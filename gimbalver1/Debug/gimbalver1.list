
gimbalver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08009e30  08009e30  0000ae30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e8  0800a2e8  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e8  0800a2e8  0000b2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f0  0800a2f0  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f0  0800a2f0  0000b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2f4  0800a2f4  0000b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a2f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001dc  0800a4d4  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800a4d4  0000c4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ba  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c76  00000000  00000000  00022bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00025840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe0  00000000  00000000  00026c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200fe  00000000  00000000  00027c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183a8  00000000  00000000  00047d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc55c  00000000  00000000  000600fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c4c  00000000  00000000  0012c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001332ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009e14 	.word	0x08009e14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08009e14 	.word	0x08009e14

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <I2cInitialize>:
//
static bool initialized = false;



static void I2cInitialize(){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	if(!initialized){
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <I2cInitialize+0x24>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <I2cInitialize+0x18>
		initialized = true;
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <I2cInitialize+0x24>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001f9 	.word	0x200001f9

0800105c <I2cWriteByte>:

static void I2cWriteByte(uint8_t add, uint8_t reg, uint8_t data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b29a      	uxth	r2, r3
 800107a:	2364      	movs	r3, #100	@ 0x64
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2301      	movs	r3, #1
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	1d7b      	adds	r3, r7, #5
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <I2cWriteByte+0x3c>)
 800108a:	f001 fac7 	bl	800261c <HAL_I2C_Mem_Write>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001fc 	.word	0x200001fc

0800109c <I2cReadByte>:

static uint8_t I2cReadByte(uint8_t add, uint8_t reg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b299      	uxth	r1, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030f 	add.w	r3, r7, #15
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <I2cReadByte+0x3c>)
 80010ca:	f001 fbbb 	bl	8002844 <HAL_I2C_Mem_Read>
	return data;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001fc 	.word	0x200001fc

080010dc <I2cReadBytes>:

static void I2cReadBytes(uint8_t add, uint8_t reg, uint8_t *data, uint8_t count)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	460b      	mov	r3, r1
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, data, count, 100);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b299      	uxth	r1, r3
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	b29b      	uxth	r3, r3
 8001102:	2064      	movs	r0, #100	@ 0x64
 8001104:	9002      	str	r0, [sp, #8]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <I2cReadBytes+0x40>)
 8001110:	f001 fb98 	bl	8002844 <HAL_I2C_Mem_Read>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001fc 	.word	0x200001fc

08001120 <DelayMs>:

static void DelayMs(uint32_t t){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <BNO055_Initialize_Fusion>:

//------------------- Write Yourself To Here-------------

bool BNO055_Initialize_Fusion(){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	I2cInitialize();
 800113a:	f7ff ff7b 	bl	8001034 <I2cInitialize>

	BNO055_ADRESS = BNO055_ADRESS_0;
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001140:	2228      	movs	r2, #40	@ 0x28
 8001142:	701a      	strb	r2, [r3, #0]

	uint8_t id = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	71fb      	strb	r3, [r7, #7]
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffa4 	bl	800109c <I2cReadByte>
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4619      	mov	r1, r3
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 800115e:	f005 f94f 	bl	8006400 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff97 	bl	800109c <I2cReadByte>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	482a      	ldr	r0, [pc, #168]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001178:	f005 f942 	bl	8006400 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff8a 	bl	800109c <I2cReadByte>
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4619      	mov	r1, r3
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001192:	f005 f935 	bl	8006400 <iprintf>
//			printf("%x\r\n",id);
//			printf("false");
//			return false;
//		}
//	}
	if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7d 	bl	800109c <I2cReadByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80011a6:	d01d      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
		BNO055_ADRESS = BNO055_ADRESS_1;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011aa:	2229      	movs	r2, #41	@ 0x29
 80011ac:	701a      	strb	r2, [r3, #0]
		if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff71 	bl	800109c <I2cReadByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80011be:	d011      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
			id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff68 	bl	800109c <I2cReadByte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
			printf("%x\r\n",id);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <BNO055_Initialize_Fusion+0xf0>)
 80011d6:	f005 f913 	bl	8006400 <iprintf>
			printf("false");
 80011da:	4813      	ldr	r0, [pc, #76]	@ (8001228 <BNO055_Initialize_Fusion+0xf4>)
 80011dc:	f005 f910 	bl	8006400 <iprintf>
			return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e016      	b.n	8001212 <BNO055_Initialize_Fusion+0xde>
		}
	}


	I2cWriteByte(BNO055_ADRESS,BNO055_PWR_MODE,0);
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	213e      	movs	r1, #62	@ 0x3e
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff35 	bl	800105c <I2cWriteByte>
	BNO055_SetUnit();
 80011f2:	f000 f81d 	bl	8001230 <BNO055_SetUnit>
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_NDOF);
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	220c      	movs	r2, #12
 80011fc:	213d      	movs	r1, #61	@ 0x3d
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff2c 	bl	800105c <I2cWriteByte>
	DelayMs(20);
 8001204:	2014      	movs	r0, #20
 8001206:	f7ff ff8b 	bl	8001120 <DelayMs>
	printf("Initialize");
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <BNO055_Initialize_Fusion+0xf8>)
 800120c:	f005 f8f8 	bl	8006400 <iprintf>
	return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001f8 	.word	0x200001f8
 8001220:	08009e30 	.word	0x08009e30
 8001224:	08009e38 	.word	0x08009e38
 8001228:	08009e40 	.word	0x08009e40
 800122c:	08009e48 	.word	0x08009e48

08001230 <BNO055_SetUnit>:
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_AMG);
	DelayMs(20);
	return true;
}

void BNO055_SetUnit(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t unit =  BNO055_UNIT_SEL_ACC | BNO055_UNIT_SEL_GYR | BNO055_UNIT_SEL_ANGL | BNO055_UNIT_SEL_Tmp | BNO055_UNIT_SEL_Fus;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
	I2cWriteByte(BNO055_ADRESS,BNO055_UNIT_SEL,unit);
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <BNO055_SetUnit+0x20>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	213b      	movs	r1, #59	@ 0x3b
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff0a 	bl	800105c <I2cWriteByte>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001f8 	.word	0x200001f8

08001254 <BNO055_ReadGyr>:
	*x = (float)_x / 16;
	*y = (float)_y / 16;
	*z = (float)_z / 16;
}

void BNO055_ReadGyr(float* x,float* y,float* z){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	uint8_t data[6]={};
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	2300      	movs	r3, #0
 8001266:	833b      	strh	r3, [r7, #24]

	I2cReadBytes(BNO055_ADRESS,BNO055_GYR_DATA_X_LSB,data,6);
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <BNO055_ReadGyr+0xa4>)
 800126a:	7818      	ldrb	r0, [r3, #0]
 800126c:	f107 0214 	add.w	r2, r7, #20
 8001270:	2306      	movs	r3, #6
 8001272:	2114      	movs	r1, #20
 8001274:	f7ff ff32 	bl	80010dc <I2cReadBytes>
	//printf("%d,%d\r\n",data[0],data[1]);

	int16_t _x,_y,_z;
	_x = data[1] << 8 | data[0];
 8001278:	7d7b      	ldrb	r3, [r7, #21]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	83fb      	strh	r3, [r7, #30]
	_y = data[3] << 8 | data[2];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	83bb      	strh	r3, [r7, #28]
	_z = data[5] << 8 | data[4];
 8001294:	7e7b      	ldrb	r3, [r7, #25]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	837b      	strh	r3, [r7, #26]

#if BNO055_UNIT_SEL_GYR == BNO055_UNIT_SEL_GYR_Dps
	*x = (float)_x / 16;
 80012a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)_y / 16;
 80012bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)_z / 16;
 80012d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a00 	vstr	s15, [r3]
	*x = (float)_x / 900;
	*y = (float)_y / 900;
	*z = (float)_z / 900;
#endif
	//printf("%f , %f , %f\r\n",x,y,z);
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001f8 	.word	0x200001f8

080012fc <A4988_Initialize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void A4988_Initialize(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MDEN_GPIO_Port,MDEN_Pin,GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f001 f8d3 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS1_GPIO_Port,MDMS1_Pin,GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f001 f8cc 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS2_GPIO_Port,MDMS2_Pin,GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2102      	movs	r1, #2
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <A4988_Initialize+0x38>)
 8001322:	f001 f8c7 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS3_GPIO_Port,MDMS3_Pin,GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <A4988_Initialize+0x38>)
 800132c:	f001 f8c2 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	48001400 	.word	0x48001400

08001338 <A4988_STEP>:

void A4988_STEP(uint16_t interval){
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
	if(stepState == 0){
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <A4988_STEP+0xe0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d120      	bne.n	800138e <A4988_STEP+0x56>
		if(stepInterval != interval - 1){
 800134c:	4b33      	ldr	r3, [pc, #204]	@ (800141c <A4988_STEP+0xe4>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	3b01      	subs	r3, #1
 8001356:	429a      	cmp	r2, r3
 8001358:	d00e      	beq.n	8001378 <A4988_STEP+0x40>
			stepInterval = interval - 1;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <A4988_STEP+0xe4>)
 8001362:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim7, stepInterval);
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <A4988_STEP+0xe4>)
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	4b2d      	ldr	r3, [pc, #180]	@ (8001420 <A4988_STEP+0xe8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <A4988_STEP+0xe4>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <A4988_STEP+0xe8>)
 8001376:	60da      	str	r2, [r3, #12]
		}
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f001 f897 	bl	80024b4 <HAL_GPIO_WritePin>
		stepState = 1;
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <A4988_STEP+0xe0>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
		stepState = 0;
		mangle += onepulse_motorangle*mdir/ms;
		//printf("onepulse");
	}

}
 800138c:	e038      	b.n	8001400 <A4988_STEP+0xc8>
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f001 f88c 	bl	80024b4 <HAL_GPIO_WritePin>
		stepState = 0;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <A4988_STEP+0xe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		mangle += onepulse_motorangle*mdir/ms;
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <A4988_STEP+0xec>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <A4988_STEP+0xf0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8dd 	bl	8000574 <__aeabi_i2d>
 80013ba:	a315      	add	r3, pc, #84	@ (adr r3, 8001410 <A4988_STEP+0xd8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f942 	bl	8000648 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <A4988_STEP+0xf4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4640      	mov	r0, r8
 80013dc:	4649      	mov	r1, r9
 80013de:	f7ff fa5d 	bl	800089c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ff77 	bl	80002dc <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fc1f 	bl	8000c38 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <A4988_STEP+0xec>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	3feccccc 	.word	0x3feccccc
 8001418:	20000388 	.word	0x20000388
 800141c:	2000038c 	.word	0x2000038c
 8001420:	2000029c 	.word	0x2000029c
 8001424:	20000390 	.word	0x20000390
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(MDMS3_GPIO_Port,MDMS3_Pin,GPIO_PIN_RESET);
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
    if(htim == &htim6){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a61      	ldr	r2, [pc, #388]	@ (80015c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800143c:	4293      	cmp	r3, r2
 800143e:	f040 80a5 	bne.w	800158c <HAL_TIM_PeriodElapsedCallback+0x15c>
        BNO055_ReadGyr(&Gyr_x, &Gyr_y, &Gyr_z);
 8001442:	4a60      	ldr	r2, [pc, #384]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001444:	4960      	ldr	r1, [pc, #384]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001446:	4861      	ldr	r0, [pc, #388]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001448:	f7ff ff04 	bl	8001254 <BNO055_ReadGyr>
        //printf("%f , %f , %f\r\n",Gyr_x,Gyr_y,Gyr_z); // @suppress("Float formatting support")
        tangle += Gyr_z * 0.01;
 800144c:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f8a1 	bl	8000598 <__aeabi_f2d>
 8001456:	4604      	mov	r4, r0
 8001458:	460d      	mov	r5, r1
 800145a:	4b5a      	ldr	r3, [pc, #360]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f89a 	bl	8000598 <__aeabi_f2d>
 8001464:	a352      	add	r3, pc, #328	@ (adr r3, 80015b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8ed 	bl	8000648 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe ff31 	bl	80002dc <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fbd9 	bl	8000c38 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4a51      	ldr	r2, [pc, #324]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800148a:	6013      	str	r3, [r2, #0]

        float diffangle = tangle - mangle;
 800148c:	4b50      	ldr	r3, [pc, #320]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	edc7 7a02 	vstr	s15, [r7, #8]
        int pulse = diffangle / (onepulse_motorangle / ms);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff f879 	bl	8000598 <__aeabi_f2d>
 80014a6:	4604      	mov	r4, r0
 80014a8:	460d      	mov	r5, r1
 80014aa:	4b4b      	ldr	r3, [pc, #300]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f860 	bl	8000574 <__aeabi_i2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	a13f      	add	r1, pc, #252	@ (adr r1, 80015b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014be:	f7ff f9ed 	bl	800089c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f9e7 	bl	800089c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb67 	bl	8000ba8 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	60fb      	str	r3, [r7, #12]
        printf("%d\r\n",pulse);
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	483e      	ldr	r0, [pc, #248]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80014e2:	f004 ff8d 	bl	8006400 <iprintf>

        if (pulse < 0) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da0e      	bge.n	800150a <HAL_TIM_PeriodElapsedCallback+0xda>
            mdir = -1;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014ee:	f04f 32ff 	mov.w	r2, #4294967295
 80014f2:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f000 ffd9 	bl	80024b4 <HAL_GPIO_WritePin>
            pulse = -pulse;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	425b      	negs	r3, r3
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e00c      	b.n	8001524 <HAL_TIM_PeriodElapsedCallback+0xf4>
        } else if (pulse > 0) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	dd09      	ble.n	8001524 <HAL_TIM_PeriodElapsedCallback+0xf4>
            mdir = 1;
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001520:	f000 ffc8 	bl	80024b4 <HAL_GPIO_WritePin>
        }

        if (pulse > 0) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd07      	ble.n	800153a <HAL_TIM_PeriodElapsedCallback+0x10a>
            mInterval = 100 / pulse;
 800152a:	2264      	movs	r2, #100	@ 0x64
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001536:	801a      	strh	r2, [r3, #0]
 8001538:	e002      	b.n	8001540 <HAL_TIM_PeriodElapsedCallback+0x110>
        } else {
            mInterval = 100; // ゼロ除算防止
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800153c:	2264      	movs	r2, #100	@ 0x64
 800153e:	801a      	strh	r2, [r3, #0]
        }
        if(mInterval < 100){
 8001540:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2b63      	cmp	r3, #99	@ 0x63
 8001546:	d802      	bhi.n	800154e <HAL_TIM_PeriodElapsedCallback+0x11e>
        	mInterval = 100;
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800154a:	2264      	movs	r2, #100	@ 0x64
 800154c:	801a      	strh	r2, [r3, #0]
        }

        if (tim7init == 0) {
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x132>
            HAL_TIM_Base_Start_IT(&htim7);
 8001556:	4825      	ldr	r0, [pc, #148]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001558:	f002 fe12 	bl	8004180 <HAL_TIM_Base_Start_IT>
            tim7init = 1;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
        }
        printf("%f,%f\r\n",tangle,mangle);
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f816 	bl	8000598 <__aeabi_f2d>
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f80f 	bl	8000598 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9cd 2300 	strd	r2, r3, [sp]
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	481a      	ldr	r0, [pc, #104]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001588:	f004 ff3a 	bl	8006400 <iprintf>
    }

    if(htim == &htim7){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d107      	bne.n	80015a4 <HAL_TIM_PeriodElapsedCallback+0x174>
    	printf("tim7");
 8001594:	4817      	ldr	r0, [pc, #92]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001596:	f004 ff33 	bl	8006400 <iprintf>
        A4988_STEP(mInterval);
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff feca 	bl	8001338 <A4988_STEP>
    }
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	47ae147b 	.word	0x47ae147b
 80015b4:	3f847ae1 	.word	0x3f847ae1
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	3feccccc 	.word	0x3feccccc
 80015c0:	20000250 	.word	0x20000250
 80015c4:	20000384 	.word	0x20000384
 80015c8:	20000380 	.word	0x20000380
 80015cc:	2000037c 	.word	0x2000037c
 80015d0:	20000394 	.word	0x20000394
 80015d4:	20000390 	.word	0x20000390
 80015d8:	20000004 	.word	0x20000004
 80015dc:	08009e54 	.word	0x08009e54
 80015e0:	20000000 	.word	0x20000000
 80015e4:	2000038e 	.word	0x2000038e
 80015e8:	20000398 	.word	0x20000398
 80015ec:	2000029c 	.word	0x2000029c
 80015f0:	08009e5c 	.word	0x08009e5c
 80015f4:	08009e64 	.word	0x08009e64

080015f8 <_write>:



int _write(int file, char *ptr, int len)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b29a      	uxth	r2, r3
 8001608:	230a      	movs	r3, #10
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <_write+0x24>)
 800160e:	f003 f94d 	bl	80048ac <HAL_UART_Transmit>
  return len;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200002e8 	.word	0x200002e8

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <main+0x5c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fef9 	bl	8006424 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f000 fc3c 	bl	8001eae <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f829 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 f973 	bl	8001924 <MX_GPIO_Init>
  MX_I2C1_Init();
 800163e:	f000 f871 	bl	8001724 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001642:	f000 f923 	bl	800188c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001646:	f000 f8e3 	bl	8001810 <MX_TIM7_Init>
  MX_TIM6_Init();
 800164a:	f000 f8ab 	bl	80017a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if(BNO055_Initialize_Fusion() == false){
 800164e:	f7ff fd71 	bl	8001134 <BNO055_Initialize_Fusion>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <main+0x46>
    	  printf("false");
 800165e:	4808      	ldr	r0, [pc, #32]	@ (8001680 <main+0x60>)
 8001660:	f004 fece 	bl	8006400 <iprintf>
 8001664:	e002      	b.n	800166c <main+0x4c>
      }else{
    	  printf("Ok");
 8001666:	4807      	ldr	r0, [pc, #28]	@ (8001684 <main+0x64>)
 8001668:	f004 feca 	bl	8006400 <iprintf>
      }
  HAL_TIM_Base_Start_IT(&htim6);
 800166c:	4806      	ldr	r0, [pc, #24]	@ (8001688 <main+0x68>)
 800166e:	f002 fd87 	bl	8004180 <HAL_TIM_Base_Start_IT>
  A4988_Initialize();
 8001672:	f7ff fe43 	bl	80012fc <A4988_Initialize>
  //HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001676:	bf00      	nop
 8001678:	e7fd      	b.n	8001676 <main+0x56>
 800167a:	bf00      	nop
 800167c:	20000020 	.word	0x20000020
 8001680:	08009e6c 	.word	0x08009e6c
 8001684:	08009e74 	.word	0x08009e74
 8001688:	20000250 	.word	0x20000250

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	@ 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	2238      	movs	r2, #56	@ 0x38
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f004 ffe1 	bl	8006662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016b2:	f001 fd3b 	bl	800312c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2340      	movs	r3, #64	@ 0x40
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016d0:	230a      	movs	r3, #10
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fdd5 	bl	8003294 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016f0:	f000 f97a 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2303      	movs	r3, #3
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f002 f8d3 	bl	80038b8 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001718:	f000 f966 	bl	80019e8 <Error_Handler>
  }
}
 800171c:	bf00      	nop
 800171e:	3750      	adds	r7, #80	@ 0x50
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <MX_I2C1_Init+0x74>)
 800172a:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <MX_I2C1_Init+0x78>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001730:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <MX_I2C1_Init+0x7c>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001734:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_I2C1_Init+0x74>)
 800173c:	2201      	movs	r2, #1
 800173e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175e:	480e      	ldr	r0, [pc, #56]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001760:	f000 fec0 	bl	80024e4 <HAL_I2C_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800176a:	f000 f93d 	bl	80019e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4809      	ldr	r0, [pc, #36]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001772:	f001 fc43 	bl	8002ffc <HAL_I2CEx_ConfigAnalogFilter>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800177c:	f000 f934 	bl	80019e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_I2C1_Init+0x74>)
 8001784:	f001 fc85 	bl	8003092 <HAL_I2CEx_ConfigDigitalFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800178e:	f000 f92b 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001fc 	.word	0x200001fc
 800179c:	40005400 	.word	0x40005400
 80017a0:	10d19ce4 	.word	0x10d19ce4

080017a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	@ (800180c <MX_TIM6_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017bc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80017c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017ca:	2209      	movs	r2, #9
 80017cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017d6:	f002 fc7b 	bl	80040d0 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017e0:	f000 f902 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_TIM6_Init+0x64>)
 80017f2:	f002 ff43 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 f8f4 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000250 	.word	0x20000250
 800180c:	40001000 	.word	0x40001000

08001810 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */


  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001822:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <MX_TIM7_Init+0x74>)
 8001824:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001828:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800182c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001836:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_TIM7_Init+0x70>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001842:	480f      	ldr	r0, [pc, #60]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001844:	f002 fc44 	bl	80040d0 <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800184e:	f000 f8cb 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4808      	ldr	r0, [pc, #32]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001860:	f002 ff0c 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800186a:	f000 f8bd 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  htim7.Init.Period = stepInterval;
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_TIM7_Init+0x78>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b02      	ldr	r3, [pc, #8]	@ (8001880 <MX_TIM7_Init+0x70>)
 8001876:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000029c 	.word	0x2000029c
 8001884:	40001400 	.word	0x40001400
 8001888:	2000038c 	.word	0x2000038c

0800188c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_USART2_UART_Init+0x90>)
 8001892:	4a23      	ldr	r2, [pc, #140]	@ (8001920 <MX_USART2_UART_Init+0x94>)
 8001894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_USART2_UART_Init+0x90>)
 8001898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800189c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d4:	4811      	ldr	r0, [pc, #68]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018d6:	f002 ff99 	bl	800480c <HAL_UART_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018e0:	f000 f882 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e4:	2100      	movs	r1, #0
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018e8:	f003 fd92 	bl	8005410 <HAL_UARTEx_SetTxFifoThreshold>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018f2:	f000 f879 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <MX_USART2_UART_Init+0x90>)
 80018fa:	f003 fdc7 	bl	800548c <HAL_UARTEx_SetRxFifoThreshold>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001904:	f000 f870 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_USART2_UART_Init+0x90>)
 800190a:	f003 fd48 	bl	800539e <HAL_UARTEx_DisableFifoMode>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001914:	f000 f868 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002e8 	.word	0x200002e8
 8001920:	40004400 	.word	0x40004400

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001940:	f043 0320 	orr.w	r3, r3, #32
 8001944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001946:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <MX_GPIO_Init+0xbc>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MDMS3_Pin|MDMS2_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2103      	movs	r1, #3
 8001986:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <MX_GPIO_Init+0xc0>)
 8001988:	f000 fd94 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDMS1_Pin|MDDIR_Pin|MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 51e8 	mov.w	r1, #7424	@ 0x1d00
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f000 fd8d 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDMS3_Pin MDMS2_Pin */
  GPIO_InitStruct.Pin = MDMS3_Pin|MDMS2_Pin;
 800199a:	2303      	movs	r3, #3
 800199c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <MX_GPIO_Init+0xc0>)
 80019b2:	f000 fbfd 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDMS1_Pin MDDIR_Pin MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDMS1_Pin|MDDIR_Pin|MDEN_Pin|MDSTEP_Pin;
 80019b6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80019ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d2:	f000 fbed 	bl	80021b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48001400 	.word	0x48001400

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <Error_Handler+0x8>

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_MspInit+0x44>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <HAL_MspInit+0x44>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <HAL_MspInit+0x44>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_MspInit+0x44>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_MspInit+0x44>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_MspInit+0x44>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a2a:	f001 fc23 	bl	8003274 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b09c      	sub	sp, #112	@ 0x70
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	f107 0318 	add.w	r3, r7, #24
 8001a58:	2244      	movs	r2, #68	@ 0x44
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 fe00 	bl	8006662 <memset>
  if(hi2c->Instance==I2C1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <HAL_I2C_MspInit+0xe0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d153      	bne.n	8001b14 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a6c:	2340      	movs	r3, #64	@ 0x40
 8001a6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 f939 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a84:	f7ff ffb0 	bl	80019e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	4a24      	ldr	r2, [pc, #144]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abe:	2312      	movs	r3, #18
 8001ac0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aca:	2304      	movs	r3, #4
 8001acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad8:	f000 fb6a 	bl	80021b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aec:	2304      	movs	r3, #4
 8001aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001af4:	4619      	mov	r1, r3
 8001af6:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <HAL_I2C_MspInit+0xe8>)
 8001af8:	f000 fb5a 	bl	80021b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001b02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_I2C_MspInit+0xe4>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	3770      	adds	r7, #112	@ 0x70
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000400 	.word	0x48000400

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x78>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d114      	bne.n	8001b64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	2036      	movs	r0, #54	@ 0x36
 8001b58:	f000 faf5 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b5c:	2036      	movs	r0, #54	@ 0x36
 8001b5e:	f000 fb0c 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b62:	e018      	b.n	8001b96 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x80>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b74:	f043 0320 	orr.w	r3, r3, #32
 8001b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2037      	movs	r0, #55	@ 0x37
 8001b8c:	f000 fadb 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b90:	2037      	movs	r0, #55	@ 0x37
 8001b92:	f000 faf2 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40001000 	.word	0x40001000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40001400 	.word	0x40001400

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b09a      	sub	sp, #104	@ 0x68
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2244      	movs	r2, #68	@ 0x44
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fd48 	bl	8006662 <memset>
  if(huart->Instance==USART2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_UART_MspInit+0xa8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d136      	bne.n	8001c4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 f881 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff fef8 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c46:	f000 fab3 	bl	80021b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3768      	adds	r7, #104	@ 0x68
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40021000 	.word	0x40021000

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <NMI_Handler+0x4>

08001c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <MemManage_Handler+0x4>

08001c74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb2:	f000 f94f 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <TIM6_DAC_IRQHandler+0x10>)
 8001cc2:	f002 fac7 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000250 	.word	0x20000250

08001cd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM7_IRQHandler+0x10>)
 8001cd6:	f002 fabd 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000029c 	.word	0x2000029c

08001ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_kill>:

int _kill(int pid, int sig)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cfe:	f004 fd03 	bl	8006708 <__errno>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2216      	movs	r2, #22
 8001d06:	601a      	str	r2, [r3, #0]
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_exit>:

void _exit (int status)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ffe7 	bl	8001cf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <_exit+0x12>

08001d2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e00a      	b.n	8001d52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d3c:	f3af 8000 	nop.w
 8001d40:	4601      	mov	r1, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	60ba      	str	r2, [r7, #8]
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dbf0      	blt.n	8001d3c <_read+0x12>
  }

  return len;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_isatty>:

int _isatty(int file)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f004 fc84 	bl	8006708 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20008000 	.word	0x20008000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	2000039c 	.word	0x2000039c
 8001e34:	200004f0 	.word	0x200004f0

08001e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e5c:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e60:	f7ff ffea 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e66:	490d      	ldr	r1, [pc, #52]	@ (8001e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <LoopForever+0xe>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea8 <LoopForever+0x16>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f004 fc43 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e8e:	f7ff fbc7 	bl	8001620 <main>

08001e92 <LoopForever>:

LoopForever:
    b LoopForever
 8001e92:	e7fe      	b.n	8001e92 <LoopForever>
  ldr   r0, =_estack
 8001e94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ea0:	0800a2f8 	.word	0x0800a2f8
  ldr r2, =_sbss
 8001ea4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ea8:	200004f0 	.word	0x200004f0

08001eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC1_2_IRQHandler>

08001eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f000 f939 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ebe:	200f      	movs	r0, #15
 8001ec0:	f000 f80e 	bl	8001ee0 <HAL_InitTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	e001      	b.n	8001ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed0:	f7ff fd90 	bl	80019f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_InitTick+0x68>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d022      	beq.n	8001f3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_InitTick+0x6c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_InitTick+0x68>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f944 	bl	8002196 <HAL_SYSTICK_Config>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d809      	bhi.n	8001f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	f000 f910 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f26:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_InitTick+0x70>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e007      	b.n	8001f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e004      	b.n	8001f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e001      	b.n	8001f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_IncTick+0x20>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a03      	ldr	r2, [pc, #12]	@ (8001f70 <HAL_IncTick+0x1c>)
 8001f64:	6013      	str	r3, [r2, #0]
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	200003a0 	.word	0x200003a0
 8001f74:	20000010 	.word	0x20000010

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200003a0 	.word	0x200003a0

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	@ (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff40 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff90 	bl	8002084 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5f 	bl	8002030 <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff33 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa4 	bl	80020ec <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021be:	e15a      	b.n	8002476 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 814c 	beq.w	8002470 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d005      	beq.n	80021f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d130      	bne.n	8002252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002226:	2201      	movs	r2, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 0201 	and.w	r2, r3, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b03      	cmp	r3, #3
 800225c:	d017      	beq.n	800228e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d123      	bne.n	80022e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0203 	and.w	r2, r3, #3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a6 	beq.w	8002470 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002324:	4b5b      	ldr	r3, [pc, #364]	@ (8002494 <HAL_GPIO_Init+0x2e4>)
 8002326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002328:	4a5a      	ldr	r2, [pc, #360]	@ (8002494 <HAL_GPIO_Init+0x2e4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002330:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <HAL_GPIO_Init+0x2e4>)
 8002332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233c:	4a56      	ldr	r2, [pc, #344]	@ (8002498 <HAL_GPIO_Init+0x2e8>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002366:	d01f      	beq.n	80023a8 <HAL_GPIO_Init+0x1f8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_GPIO_Init+0x2ec>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d019      	beq.n	80023a4 <HAL_GPIO_Init+0x1f4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4b      	ldr	r2, [pc, #300]	@ (80024a0 <HAL_GPIO_Init+0x2f0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_GPIO_Init+0x1f0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4a      	ldr	r2, [pc, #296]	@ (80024a4 <HAL_GPIO_Init+0x2f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00d      	beq.n	800239c <HAL_GPIO_Init+0x1ec>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a49      	ldr	r2, [pc, #292]	@ (80024a8 <HAL_GPIO_Init+0x2f8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <HAL_GPIO_Init+0x1e8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a48      	ldr	r2, [pc, #288]	@ (80024ac <HAL_GPIO_Init+0x2fc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_GPIO_Init+0x1e4>
 8002390:	2305      	movs	r3, #5
 8002392:	e00a      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 8002394:	2306      	movs	r3, #6
 8002396:	e008      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 8002398:	2304      	movs	r3, #4
 800239a:	e006      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 800239c:	2303      	movs	r3, #3
 800239e:	e004      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e002      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_GPIO_Init+0x1fa>
 80023a8:	2300      	movs	r3, #0
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	f002 0203 	and.w	r2, r2, #3
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	4093      	lsls	r3, r2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ba:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_GPIO_Init+0x2e8>)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c8:	4b39      	ldr	r3, [pc, #228]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ec:	4a30      	ldr	r2, [pc, #192]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f2:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002416:	4a26      	ldr	r2, [pc, #152]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800241c:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002440:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002446:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800246a:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_GPIO_Init+0x300>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f ae9d 	bne.w	80021c0 <HAL_GPIO_Init+0x10>
  }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	48000400 	.word	0x48000400
 80024a0:	48000800 	.word	0x48000800
 80024a4:	48000c00 	.word	0x48000c00
 80024a8:	48001000 	.word	0x48001000
 80024ac:	48001400 	.word	0x48001400
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e08d      	b.n	8002612 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fa96 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	e006      	b.n	800256c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800256a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d108      	bne.n	8002586 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	e007      	b.n	8002596 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4603      	mov	r3, r0
 800262c:	817b      	strh	r3, [r7, #10]
 800262e:	460b      	mov	r3, r1
 8002630:	813b      	strh	r3, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 80f9 	bne.w	8002836 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_I2C_Mem_Write+0x34>
 800264a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0ed      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2C_Mem_Write+0x4e>
 8002666:	2302      	movs	r3, #2
 8002668:	e0e6      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002672:	f7ff fc81 	bl	8001f78 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2319      	movs	r3, #25
 800267e:	2201      	movs	r2, #1
 8002680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fac3 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d1      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2221      	movs	r2, #33	@ 0x21
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2240      	movs	r2, #64	@ 0x40
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026bc:	88f8      	ldrh	r0, [r7, #6]
 80026be:	893a      	ldrh	r2, [r7, #8]
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4603      	mov	r3, r0
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f9d3 	bl	8002a78 <I2C_RequestMemoryWrite>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0a9      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	@ 0xff
 80026ec:	d90e      	bls.n	800270c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	@ 0xff
 80026f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fc47 	bl	8002f98 <I2C_TransferConfig>
 800270a:	e00f      	b.n	800272c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fc36 	bl	8002f98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fac6 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e07b      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d034      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d130      	bne.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	@ 0x80
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fa3f 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04d      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2bff      	cmp	r3, #255	@ 0xff
 80027a4:	d90e      	bls.n	80027c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	@ 0xff
 80027aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fbeb 	bl	8002f98 <I2C_TransferConfig>
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fbda 	bl	8002f98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d19e      	bne.n	800272c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 faac 	bl	8002d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e01a      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_I2C_Mem_Write+0x224>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	fe00e800 	.word	0xfe00e800

08002844 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	460b      	mov	r3, r1
 8002858:	813b      	strh	r3, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 80fd 	bne.w	8002a66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_I2C_Mem_Read+0x34>
 8002872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800287e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0f1      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Mem_Read+0x4e>
 800288e:	2302      	movs	r3, #2
 8002890:	e0ea      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289a:	f7ff fb6d 	bl	8001f78 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f9af 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d5      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2222      	movs	r2, #34	@ 0x22
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	@ 0x40
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e4:	88f8      	ldrh	r0, [r7, #6]
 80028e6:	893a      	ldrh	r2, [r7, #8]
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4603      	mov	r3, r0
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f913 	bl	8002b20 <I2C_RequestMemoryRead>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0ad      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	d90e      	bls.n	8002934 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	22ff      	movs	r2, #255	@ 0xff
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002920:	b2da      	uxtb	r2, r3
 8002922:	8979      	ldrh	r1, [r7, #10]
 8002924:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_I2C_Mem_Read+0x22c>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb33 	bl	8002f98 <I2C_TransferConfig>
 8002932:	e00f      	b.n	8002954 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	b2da      	uxtb	r2, r3
 8002944:	8979      	ldrh	r1, [r7, #10]
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_I2C_Mem_Read+0x22c>)
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fb22 	bl	8002f98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	2200      	movs	r2, #0
 800295c:	2104      	movs	r1, #4
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f956 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07c      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d034      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d130      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f927 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04d      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2bff      	cmp	r3, #255	@ 0xff
 80029d4:	d90e      	bls.n	80029f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	@ 0xff
 80029da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fad3 	bl	8002f98 <I2C_TransferConfig>
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fac2 	bl	8002f98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19a      	bne.n	8002954 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f994 	bl	8002d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01a      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_I2C_Mem_Read+0x230>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	80002400 	.word	0x80002400
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <I2C_RequestMemoryWrite+0xa4>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fa79 	bl	8002f98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f909 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e02c      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aca:	e015      	b.n	8002af8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8ef 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e012      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f884 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	80002000 	.word	0x80002000

08002b20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	460b      	mov	r3, r1
 8002b34:	813b      	strh	r3, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	8979      	ldrh	r1, [r7, #10]
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <I2C_RequestMemoryRead+0xa4>)
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa26 	bl	8002f98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f8b6 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02c      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b70:	e015      	b.n	8002b9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f89c 	bl	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e012      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	@ 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f831 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	80002000 	.word	0x80002000

08002bc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d007      	beq.n	8002c04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	619a      	str	r2, [r3, #24]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c20:	e03b      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8d6 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d02d      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7ff f99b 	bl	8001f78 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d122      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d113      	bne.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0b4      	beq.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cce:	e033      	b.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f87f 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e031      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d025      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7ff f944 	bl	8001f78 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11a      	bne.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d013      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d1c4      	bne.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5c:	e02f      	b.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f838 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02d      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7ff f901 	bl	8001f78 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11a      	bne.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d013      	beq.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d1c8      	bne.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d068      	beq.n	8002ed6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e0c:	e049      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d045      	beq.n	8002ea2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7ff f8af 	bl	8001f78 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_IsErrorOccurred+0x54>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d121      	bne.n	8002e94 <I2C_IsErrorOccurred+0xbc>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e56:	d01d      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d01a      	beq.n	8002e94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e6e:	f7ff f883 	bl	8001f78 <HAL_GetTick>
 8002e72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	e00e      	b.n	8002e94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e76:	f7ff f87f 	bl	8001f78 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b19      	cmp	r3, #25
 8002e82:	d907      	bls.n	8002e94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f043 0320 	orr.w	r3, r3, #32
 8002e8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e92:	e006      	b.n	8002ea2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d1e9      	bne.n	8002e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d003      	beq.n	8002eb8 <I2C_IsErrorOccurred+0xe0>
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0aa      	beq.n	8002e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fe3b 	bl	8002bc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <I2C_IsErrorOccurred+0x1bc>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	fe00e800 	.word	0xfe00e800

08002f98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb0:	7a7b      	ldrb	r3, [r7, #9]
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	0d5b      	lsrs	r3, r3, #21
 8002fd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <I2C_TransferConfig+0x60>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	ea02 0103 	and.w	r1, r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	03ff63ff 	.word	0x03ff63ff

08002ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d138      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800301c:	2302      	movs	r3, #2
 800301e:	e032      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800304e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d139      	bne.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e033      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	@ 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d141      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800313a:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d131      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003148:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314e:	4a46      	ldr	r2, [pc, #280]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	4b43      	ldr	r3, [pc, #268]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003160:	4a41      	ldr	r2, [pc, #260]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003168:	4b40      	ldr	r3, [pc, #256]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2232      	movs	r2, #50	@ 0x32
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a3f      	ldr	r2, [pc, #252]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317e:	e002      	b.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3b01      	subs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003186:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d102      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319a:	4b33      	ldr	r3, [pc, #204]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a6:	d158      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e057      	b.n	800325c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031bc:	e04d      	b.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c4:	d141      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c6:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d2:	d131      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e4:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2232      	movs	r2, #50	@ 0x32
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	0c9b      	lsrs	r3, r3, #18
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320a:	e002      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321e:	d102      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f2      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d112      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e011      	b.n	800325c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003248:	e007      	b.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800324a:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003258:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40007000 	.word	0x40007000
 800326c:	20000008 	.word	0x20000008
 8003270:	431bde83 	.word	0x431bde83

08003274 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003282:	6093      	str	r3, [r2, #8]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000

08003294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e2fe      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b97      	ldr	r3, [pc, #604]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032bc:	4b94      	ldr	r3, [pc, #592]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3e>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e2d9      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x74>
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a84      	ldr	r2, [pc, #528]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b7f      	ldr	r3, [pc, #508]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7e      	ldr	r2, [pc, #504]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b7c      	ldr	r3, [pc, #496]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7b      	ldr	r2, [pc, #492]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 800332c:	4b78      	ldr	r3, [pc, #480]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a77      	ldr	r2, [pc, #476]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b75      	ldr	r3, [pc, #468]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a74      	ldr	r2, [pc, #464]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fe14 	bl	8001f78 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fe10 	bl	8001f78 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e29e      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003366:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xc0>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fe00 	bl	8001f78 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fdfc 	bl	8001f78 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e28a      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338e:	4b60      	ldr	r3, [pc, #384]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0xe8>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b4:	4b56      	ldr	r3, [pc, #344]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x136>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_OscConfig+0x13c>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d11f      	bne.n	8003410 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_OscConfig+0x154>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e25d      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b49      	ldr	r3, [pc, #292]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4946      	ldr	r1, [pc, #280]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033fc:	4b45      	ldr	r3, [pc, #276]	@ (8003514 <HAL_RCC_OscConfig+0x280>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fd6d 	bl	8001ee0 <HAL_InitTick>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d043      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e249      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d023      	beq.n	8003460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fda8 	bl	8001f78 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe fda4 	bl	8001f78 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e232      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343e:	4b34      	ldr	r3, [pc, #208]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	492d      	ldr	r1, [pc, #180]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
 800345e:	e01a      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fd84 	bl	8001f78 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe fd80 	bl	8001f78 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e20e      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1e0>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d041      	beq.n	8003526 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b0:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fe fd5d 	bl	8001f78 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c2:	f7fe fd59 	bl	8001f78 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1e7      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ef      	beq.n	80034c2 <HAL_RCC_OscConfig+0x22e>
 80034e2:	e020      	b.n	8003526 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ea:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fd40 	bl	8001f78 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fa:	e00d      	b.n	8003518 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fd3c 	bl	8001f78 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d906      	bls.n	8003518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1ca      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003518:	4b8c      	ldr	r3, [pc, #560]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ea      	bne.n	80034fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a6 	beq.w	8003680 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003538:	4b84      	ldr	r3, [pc, #528]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_OscConfig+0x2b4>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x2b6>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003558:	6593      	str	r3, [r2, #88]	@ 0x58
 800355a:	4b7c      	ldr	r3, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356a:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003576:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7fe fcf9 	bl	8001f78 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fe fcf5 	bl	8001f78 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e183      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359c:	4b6c      	ldr	r3, [pc, #432]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_RCC_OscConfig+0x32e>
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c0:	e024      	b.n	800360c <HAL_RCC_OscConfig+0x378>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d110      	bne.n	80035ec <HAL_RCC_OscConfig+0x358>
 80035ca:	4b60      	ldr	r3, [pc, #384]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	4a5e      	ldr	r2, [pc, #376]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035da:	4b5c      	ldr	r3, [pc, #368]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e0:	4a5a      	ldr	r2, [pc, #360]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ea:	e00f      	b.n	800360c <HAL_RCC_OscConfig+0x378>
 80035ec:	4b57      	ldr	r3, [pc, #348]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fc:	4b53      	ldr	r3, [pc, #332]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003602:	4a52      	ldr	r2, [pc, #328]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fcb0 	bl	8001f78 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe fcac 	bl	8001f78 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e138      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	4b46      	ldr	r3, [pc, #280]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ed      	beq.n	800361c <HAL_RCC_OscConfig+0x388>
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fe fc99 	bl	8001f78 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe fc95 	bl	8001f78 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e121      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003660:	4b3a      	ldr	r3, [pc, #232]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ed      	bne.n	800364a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b35      	ldr	r3, [pc, #212]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a34      	ldr	r2, [pc, #208]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03c      	beq.n	8003706 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003694:	4b2d      	ldr	r3, [pc, #180]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369a:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe fc68 	bl	8001f78 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ac:	f7fe fc64 	bl	8001f78 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0f2      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036be:	4b23      	ldr	r3, [pc, #140]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ef      	beq.n	80036ac <HAL_RCC_OscConfig+0x418>
 80036cc:	e01b      	b.n	8003706 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ce:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d4:	4a1d      	ldr	r2, [pc, #116]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fe fc4b 	bl	8001f78 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e6:	f7fe fc47 	bl	8001f78 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0d5      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ef      	bne.n	80036e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80c9 	beq.w	80038a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003710:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b0c      	cmp	r3, #12
 800371a:	f000 8083 	beq.w	8003824 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d15e      	bne.n	80037e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a08      	ldr	r2, [pc, #32]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800372c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe fc21 	bl	8001f78 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	e00c      	b.n	8003754 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fc1d 	bl	8001f78 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d905      	bls.n	8003754 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0ab      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	4b55      	ldr	r3, [pc, #340]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ec      	bne.n	800373a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	4b52      	ldr	r3, [pc, #328]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a11      	ldr	r1, [r2, #32]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003770:	3a01      	subs	r2, #1
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800377a:	0212      	lsls	r2, r2, #8
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003782:	0852      	lsrs	r2, r2, #1
 8003784:	3a01      	subs	r2, #1
 8003786:	0552      	lsls	r2, r2, #21
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800378e:	0852      	lsrs	r2, r2, #1
 8003790:	3a01      	subs	r2, #1
 8003792:	0652      	lsls	r2, r2, #25
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379a:	06d2      	lsls	r2, r2, #27
 800379c:	430a      	orrs	r2, r1
 800379e:	4943      	ldr	r1, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe fbdc 	bl	8001f78 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fbd8 	bl	8001f78 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e066      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x530>
 80037e2:	e05e      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a30      	ldr	r2, [pc, #192]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe fbc2 	bl	8001f78 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe fbbe 	bl	8001f78 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e04c      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380a:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	4924      	ldr	r1, [pc, #144]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800381c:	4b25      	ldr	r3, [pc, #148]	@ (80038b4 <HAL_RCC_OscConfig+0x620>)
 800381e:	4013      	ands	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
 8003822:	e03e      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e039      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003830:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	429a      	cmp	r2, r3
 8003842:	d12c      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d123      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d11b      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d113      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d109      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	019f800c 	.word	0x019f800c
 80038b4:	feeefffc 	.word	0xfeeefffc

080038b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e11e      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b91      	ldr	r3, [pc, #580]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b8e      	ldr	r3, [pc, #568]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 020f 	bic.w	r2, r3, #15
 80038e6:	498c      	ldr	r1, [pc, #560]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e106      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d073      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d129      	bne.n	8003968 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003914:	4b81      	ldr	r3, [pc, #516]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0f4      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003924:	f000 f99e 	bl	8003c64 <RCC_GetSysClockFreqFromPLLSource>
 8003928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b20 <HAL_RCC_ClockConfig+0x268>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d93f      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003932:	4b7a      	ldr	r3, [pc, #488]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d033      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d12f      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003952:	4b72      	ldr	r3, [pc, #456]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	4a70      	ldr	r2, [pc, #448]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 800395c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003960:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e024      	b.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d107      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003970:	4b6a      	ldr	r3, [pc, #424]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0c6      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003980:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0be      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003990:	f000 f8ce 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <HAL_RCC_ClockConfig+0x268>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d909      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a6:	4a5d      	ldr	r2, [pc, #372]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4957      	ldr	r1, [pc, #348]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe fad8 	bl	8001f78 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe fad4 	bl	8001f78 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e095      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a24:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4936      	ldr	r1, [pc, #216]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b80      	cmp	r3, #128	@ 0x80
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a4e:	4b33      	ldr	r3, [pc, #204]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4a32      	ldr	r2, [pc, #200]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d21d      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 020f 	bic.w	r2, r3, #15
 8003a70:	4929      	ldr	r1, [pc, #164]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a78:	f7fe fa7e 	bl	8001f78 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe fa7a 	bl	8001f78 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e03b      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1ed      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4917      	ldr	r1, [pc, #92]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490f      	ldr	r1, [pc, #60]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae2:	f000 f825 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490c      	ldr	r1, [pc, #48]	@ (8003b24 <HAL_RCC_ClockConfig+0x26c>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x270>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_RCC_ClockConfig+0x274>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe f9ea 	bl	8001ee0 <HAL_InitTick>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	04c4b400 	.word	0x04c4b400
 8003b24:	08009e78 	.word	0x08009e78
 8003b28:	20000008 	.word	0x20000008
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b36:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b42:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e047      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b48:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b54:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e03e      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b5a:	4b23      	ldr	r3, [pc, #140]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d136      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	0a12      	lsrs	r2, r2, #8
 8003b92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4a10      	ldr	r2, [pc, #64]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	0a12      	lsrs	r2, r2, #8
 8003bac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
      break;
 8003bb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0e5b      	lsrs	r3, r3, #25
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e001      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd8:	693b      	ldr	r3, [r7, #16]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	@ (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000008 	.word	0x20000008

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08009e88 	.word	0x08009e88

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c3c:	f7ff ffda 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0adb      	lsrs	r3, r3, #11
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4904      	ldr	r1, [pc, #16]	@ (8003c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08009e88 	.word	0x08009e88

08003c64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d10c      	bne.n	8003ca2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c88:	4a17      	ldr	r2, [pc, #92]	@ (8003ce8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c92:	68d2      	ldr	r2, [r2, #12]
 8003c94:	0a12      	lsrs	r2, r2, #8
 8003c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]
    break;
 8003ca0:	e00c      	b.n	8003cbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ca2:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cac:	68d2      	ldr	r2, [r2, #12]
 8003cae:	0a12      	lsrs	r2, r2, #8
 8003cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    break;
 8003cba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0e5b      	lsrs	r3, r3, #25
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cd6:	687b      	ldr	r3, [r7, #4]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	007a1200 	.word	0x007a1200
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8098 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d12:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b40      	ldr	r3, [pc, #256]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a39      	ldr	r2, [pc, #228]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d46:	f7fe f917 	bl	8001f78 <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe f913 	bl	8001f78 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d159      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d90:	4b23      	ldr	r3, [pc, #140]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9c:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dac:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe f8d3 	bl	8001f78 <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd4:	e00b      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe f8cf 	bl	8001f78 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d902      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	74fb      	strb	r3, [r7, #19]
            break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ec      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4903      	ldr	r1, [pc, #12]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e18:	e008      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	74bb      	strb	r3, [r7, #18]
 8003e1e:	e005      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2c:	7c7b      	ldrb	r3, [r7, #17]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4ba6      	ldr	r3, [pc, #664]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	4aa5      	ldr	r2, [pc, #660]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4a:	4ba0      	ldr	r3, [pc, #640]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f023 0203 	bic.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	499c      	ldr	r1, [pc, #624]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e6c:	4b97      	ldr	r3, [pc, #604]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f023 020c 	bic.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4994      	ldr	r1, [pc, #592]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	498b      	ldr	r1, [pc, #556]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb0:	4b86      	ldr	r3, [pc, #536]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4983      	ldr	r1, [pc, #524]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed2:	4b7e      	ldr	r3, [pc, #504]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	497a      	ldr	r1, [pc, #488]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef4:	4b75      	ldr	r3, [pc, #468]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	4972      	ldr	r1, [pc, #456]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f16:	4b6d      	ldr	r3, [pc, #436]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4969      	ldr	r1, [pc, #420]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f38:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4961      	ldr	r1, [pc, #388]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	4958      	ldr	r1, [pc, #352]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	4950      	ldr	r1, [pc, #320]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fb4:	4b45      	ldr	r3, [pc, #276]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	4942      	ldr	r1, [pc, #264]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fde:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fec:	4b37      	ldr	r3, [pc, #220]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4934      	ldr	r1, [pc, #208]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b2f      	ldr	r3, [pc, #188]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a2e      	ldr	r2, [pc, #184]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004024:	4b29      	ldr	r3, [pc, #164]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	4926      	ldr	r1, [pc, #152]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a20      	ldr	r2, [pc, #128]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	4918      	ldr	r1, [pc, #96]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	490a      	ldr	r1, [pc, #40]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e049      	b.n	8004176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fd16 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 fa18 	bl	8004544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e04a      	b.n	800422e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a21      	ldr	r2, [pc, #132]	@ (800423c <HAL_TIM_Base_Start_IT+0xbc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x6c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c2:	d013      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x6c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <HAL_TIM_Base_Start_IT+0xc0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x6c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <HAL_TIM_Base_Start_IT+0xc4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x6c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <HAL_TIM_Base_Start_IT+0xc8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x6c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_TIM_Base_Start_IT+0xcc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d115      	bne.n	8004218 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b17      	ldr	r3, [pc, #92]	@ (8004250 <HAL_TIM_Base_Start_IT+0xd0>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d015      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xaa>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004204:	d011      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	e008      	b.n	800422a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e000      	b.n	800422c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	00010007 	.word	0x00010007

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0202 	mvn.w	r2, #2
 8004288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f931 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f923 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f934 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d020      	beq.n	8004304 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0204 	mvn.w	r2, #4
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f90b 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8fd 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f90e 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d020      	beq.n	8004350 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01b      	beq.n	8004350 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0208 	mvn.w	r2, #8
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8e5 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8d7 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8e8 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01b      	beq.n	800439c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0210 	mvn.w	r2, #16
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2208      	movs	r2, #8
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8bf 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8b1 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8c2 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0201 	mvn.w	r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd f838 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f9d3 	bl	8004794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00c      	beq.n	8004412 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f9cb 	bl	80047a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800442e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f87c 	bl	800452e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00c      	beq.n	800445a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0220 	mvn.w	r2, #32
 8004452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f993 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f99f 	bl	80047bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f997 	bl	80047d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f98f 	bl	80047e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00c      	beq.n	80044ea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f987 	bl	80047f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <TIM_Base_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3f      	ldr	r2, [pc, #252]	@ (8004664 <TIM_Base_SetConfig+0x120>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3e      	ldr	r2, [pc, #248]	@ (8004668 <TIM_Base_SetConfig+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3d      	ldr	r2, [pc, #244]	@ (800466c <TIM_Base_SetConfig+0x128>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a33      	ldr	r2, [pc, #204]	@ (8004660 <TIM_Base_SetConfig+0x11c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <TIM_Base_SetConfig+0x120>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004668 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	@ (800466c <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004670 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <TIM_Base_SetConfig+0x134>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	@ (8004660 <TIM_Base_SetConfig+0x11c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00f      	beq.n	800462c <TIM_Base_SetConfig+0xe8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a17      	ldr	r2, [pc, #92]	@ (800466c <TIM_Base_SetConfig+0x128>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00b      	beq.n	800462c <TIM_Base_SetConfig+0xe8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a16      	ldr	r2, [pc, #88]	@ (8004670 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0xe8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <TIM_Base_SetConfig+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0xe8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <TIM_Base_SetConfig+0x134>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d103      	bne.n	8004634 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d105      	bne.n	8004652 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	611a      	str	r2, [r3, #16]
  }
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40013400 	.word	0x40013400
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800

0800467c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e065      	b.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d013      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a18      	ldr	r2, [pc, #96]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a12      	ldr	r2, [pc, #72]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a13      	ldr	r2, [pc, #76]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10c      	bne.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e042      	b.n	80048a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd f9bb 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2224      	movs	r2, #36	@ 0x24
 800483a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fb82 	bl	8004f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8b3 	bl	80049c8 <UART_SetConfig>
 8004862:	4603      	mov	r3, r0
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e01b      	b.n	80048a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800487a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800488a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fc01 	bl	80050a4 <UART_CheckIdleState>
 80048a2:	4603      	mov	r3, r0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d17b      	bne.n	80049be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Transmit+0x26>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e074      	b.n	80049c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2221      	movs	r2, #33	@ 0x21
 80048e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048e6:	f7fd fb47 	bl	8001f78 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004904:	d108      	bne.n	8004918 <HAL_UART_Transmit+0x6c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e003      	b.n	8004920 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004920:	e030      	b.n	8004984 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	@ 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fc63 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e03d      	b.n	80049c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	3302      	adds	r3, #2
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e007      	b.n	8004972 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1c8      	bne.n	8004922 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	2140      	movs	r1, #64	@ 0x40
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fc2c 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e006      	b.n	80049c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b08c      	sub	sp, #48	@ 0x30
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4bab      	ldr	r3, [pc, #684]	@ (8004ca4 <UART_SetConfig+0x2dc>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4aa0      	ldr	r2, [pc, #640]	@ (8004ca8 <UART_SetConfig+0x2e0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	f023 010f 	bic.w	r1, r3, #15
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a91      	ldr	r2, [pc, #580]	@ (8004cac <UART_SetConfig+0x2e4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <UART_SetConfig+0xf0>
 8004a6c:	4b90      	ldr	r3, [pc, #576]	@ (8004cb0 <UART_SetConfig+0x2e8>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d81a      	bhi.n	8004ab0 <UART_SetConfig+0xe8>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0xb8>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e0d6      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9e:	e0d2      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa6:	e0ce      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aae:	e0ca      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	e0c6      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7d      	ldr	r2, [pc, #500]	@ (8004cb4 <UART_SetConfig+0x2ec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d138      	bne.n	8004b34 <UART_SetConfig+0x16c>
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <UART_SetConfig+0x2e8>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d82d      	bhi.n	8004b2c <UART_SetConfig+0x164>
 8004ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0x110>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b12:	e098      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1a:	e094      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b22:	e090      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2a:	e08c      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b32:	e088      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a5f      	ldr	r2, [pc, #380]	@ (8004cb8 <UART_SetConfig+0x2f0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d125      	bne.n	8004b8a <UART_SetConfig+0x1c2>
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb0 <UART_SetConfig+0x2e8>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b48:	2b30      	cmp	r3, #48	@ 0x30
 8004b4a:	d016      	beq.n	8004b7a <UART_SetConfig+0x1b2>
 8004b4c:	2b30      	cmp	r3, #48	@ 0x30
 8004b4e:	d818      	bhi.n	8004b82 <UART_SetConfig+0x1ba>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d00a      	beq.n	8004b6a <UART_SetConfig+0x1a2>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d814      	bhi.n	8004b82 <UART_SetConfig+0x1ba>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <UART_SetConfig+0x19a>
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d008      	beq.n	8004b72 <UART_SetConfig+0x1aa>
 8004b60:	e00f      	b.n	8004b82 <UART_SetConfig+0x1ba>
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b68:	e06d      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b70:	e069      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b72:	2304      	movs	r3, #4
 8004b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b78:	e065      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b80:	e061      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b82:	2310      	movs	r3, #16
 8004b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b88:	e05d      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a4b      	ldr	r2, [pc, #300]	@ (8004cbc <UART_SetConfig+0x2f4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x218>
 8004b94:	4b46      	ldr	r3, [pc, #280]	@ (8004cb0 <UART_SetConfig+0x2e8>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba0:	d016      	beq.n	8004bd0 <UART_SetConfig+0x208>
 8004ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba4:	d818      	bhi.n	8004bd8 <UART_SetConfig+0x210>
 8004ba6:	2b80      	cmp	r3, #128	@ 0x80
 8004ba8:	d00a      	beq.n	8004bc0 <UART_SetConfig+0x1f8>
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d814      	bhi.n	8004bd8 <UART_SetConfig+0x210>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <UART_SetConfig+0x1f0>
 8004bb2:	2b40      	cmp	r3, #64	@ 0x40
 8004bb4:	d008      	beq.n	8004bc8 <UART_SetConfig+0x200>
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x210>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	e042      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e03e      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	e03a      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd6:	e036      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bde:	e032      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a30      	ldr	r2, [pc, #192]	@ (8004ca8 <UART_SetConfig+0x2e0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12a      	bne.n	8004c40 <UART_SetConfig+0x278>
 8004bea:	4b31      	ldr	r3, [pc, #196]	@ (8004cb0 <UART_SetConfig+0x2e8>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bf8:	d01a      	beq.n	8004c30 <UART_SetConfig+0x268>
 8004bfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0x270>
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c04:	d00c      	beq.n	8004c20 <UART_SetConfig+0x258>
 8004c06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c0a:	d815      	bhi.n	8004c38 <UART_SetConfig+0x270>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <UART_SetConfig+0x250>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d008      	beq.n	8004c28 <UART_SetConfig+0x260>
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x270>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e012      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e00e      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e00a      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c36:	e006      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c3e:	e002      	b.n	8004c46 <UART_SetConfig+0x27e>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <UART_SetConfig+0x2e0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	f040 80a8 	bne.w	8004da2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d834      	bhi.n	8004cc4 <UART_SetConfig+0x2fc>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <UART_SetConfig+0x298>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004cc5 	.word	0x08004cc5
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004c93 	.word	0x08004c93
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004cc5 	.word	0x08004cc5
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004c9b 	.word	0x08004c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe ffc2 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8a:	e021      	b.n	8004cd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <UART_SetConfig+0x2f8>)
 8004c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c90:	e01e      	b.n	8004cd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c92:	f7fe ff4d 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c98:	e01a      	b.n	8004cd0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca0:	e016      	b.n	8004cd0 <UART_SetConfig+0x308>
 8004ca2:	bf00      	nop
 8004ca4:	cfff69f3 	.word	0xcfff69f3
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 812a 	beq.w	8004f2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	4a9e      	ldr	r2, [pc, #632]	@ (8004f58 <UART_SetConfig+0x590>)
 8004cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d305      	bcc.n	8004d08 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d0e:	e10d      	b.n	8004f2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	2200      	movs	r2, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	60fa      	str	r2, [r7, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	4a8e      	ldr	r2, [pc, #568]	@ (8004f58 <UART_SetConfig+0x590>)
 8004d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2200      	movs	r2, #0
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d32:	f7fb ffd1 	bl	8000cd8 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	020b      	lsls	r3, r1, #8
 8004d48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d4c:	0202      	lsls	r2, r0, #8
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	6849      	ldr	r1, [r1, #4]
 8004d52:	0849      	lsrs	r1, r1, #1
 8004d54:	2000      	movs	r0, #0
 8004d56:	460c      	mov	r4, r1
 8004d58:	4605      	mov	r5, r0
 8004d5a:	eb12 0804 	adds.w	r8, r2, r4
 8004d5e:	eb43 0905 	adc.w	r9, r3, r5
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	469a      	mov	sl, r3
 8004d6a:	4693      	mov	fp, r2
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	465b      	mov	r3, fp
 8004d70:	4640      	mov	r0, r8
 8004d72:	4649      	mov	r1, r9
 8004d74:	f7fb ffb0 	bl	8000cd8 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d86:	d308      	bcc.n	8004d9a <UART_SetConfig+0x3d2>
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8e:	d204      	bcs.n	8004d9a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a3a      	ldr	r2, [r7, #32]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e0c8      	b.n	8004f2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004da0:	e0c4      	b.n	8004f2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004daa:	d167      	bne.n	8004e7c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004dac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d828      	bhi.n	8004e06 <UART_SetConfig+0x43e>
 8004db4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <UART_SetConfig+0x3f4>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	08004e07 	.word	0x08004e07
 8004dcc:	08004df7 	.word	0x08004df7
 8004dd0:	08004e07 	.word	0x08004e07
 8004dd4:	08004e07 	.word	0x08004e07
 8004dd8:	08004e07 	.word	0x08004e07
 8004ddc:	08004dff 	.word	0x08004dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7fe ff14 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004de6:	e014      	b.n	8004e12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de8:	f7fe ff26 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dee:	e010      	b.n	8004e12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f5c <UART_SetConfig+0x594>)
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004df4:	e00d      	b.n	8004e12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df6:	f7fe fe9b 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004dfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dfc:	e009      	b.n	8004e12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e04:	e005      	b.n	8004e12 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8089 	beq.w	8004f2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f58 <UART_SetConfig+0x590>)
 8004e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2c:	005a      	lsls	r2, r3, #1
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	441a      	add	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	d916      	bls.n	8004e74 <UART_SetConfig+0x4ac>
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4c:	d212      	bcs.n	8004e74 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f023 030f 	bic.w	r3, r3, #15
 8004e56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	8bfb      	ldrh	r3, [r7, #30]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	8bfa      	ldrh	r2, [r7, #30]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	e05b      	b.n	8004f2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e7a:	e057      	b.n	8004f2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d828      	bhi.n	8004ed6 <UART_SetConfig+0x50e>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0x4c4>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ed7 	.word	0x08004ed7
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ed7 	.word	0x08004ed7
 8004ea4:	08004ed7 	.word	0x08004ed7
 8004ea8:	08004ed7 	.word	0x08004ed7
 8004eac:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7fe feac 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004eb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eb6:	e014      	b.n	8004ee2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fe febe 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ebe:	e010      	b.n	8004ee2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <UART_SetConfig+0x594>)
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ec4:	e00d      	b.n	8004ee2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fe fe33 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004eca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ecc:	e009      	b.n	8004ee2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ed4:	e005      	b.n	8004ee2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ee0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d021      	beq.n	8004f2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <UART_SetConfig+0x590>)
 8004eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	441a      	add	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d909      	bls.n	8004f26 <UART_SetConfig+0x55e>
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f18:	d205      	bcs.n	8004f26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e002      	b.n	8004f2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2200      	movs	r2, #0
 8004f46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	@ 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	08009e90 	.word	0x08009e90
 8004f5c:	00f42400 	.word	0x00f42400

08004f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01a      	beq.n	8005076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800505e:	d10a      	bne.n	8005076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b098      	sub	sp, #96	@ 0x60
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050b4:	f7fc ff60 	bl	8001f78 <HAL_GetTick>
 80050b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d12f      	bne.n	8005128 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f88e 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d022      	beq.n	8005128 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005100:	647b      	str	r3, [r7, #68]	@ 0x44
 8005102:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e063      	b.n	80051f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d149      	bne.n	80051ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005136:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f857 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d03c      	beq.n	80051ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	623b      	str	r3, [r7, #32]
   return(result);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005170:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	60fb      	str	r3, [r7, #12]
   return(result);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a2:	61fa      	str	r2, [r7, #28]
 80051a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	617b      	str	r3, [r7, #20]
   return(result);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e012      	b.n	80051f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3758      	adds	r7, #88	@ 0x58
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	e04f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d04b      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fc feb1 	bl	8001f78 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <UART_WaitOnFlagUntilTimeout+0x30>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e04e      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d037      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	d034      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d031      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d110      	bne.n	8005276 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2208      	movs	r2, #8
 800525a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f838 	bl	80052d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2208      	movs	r2, #8
 8005266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e029      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005284:	d111      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800528e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f81e 	bl	80052d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e00f      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d0a0      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b095      	sub	sp, #84	@ 0x54
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3308      	adds	r3, #8
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e3      	bne.n	800530c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d118      	bne.n	800537e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	60bb      	str	r3, [r7, #8]
   return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	613b      	str	r3, [r7, #16]
   return(result);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e6      	bne.n	800534c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005392:	bf00      	nop
 8005394:	3754      	adds	r7, #84	@ 0x54
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e027      	b.n	8005404 <HAL_UARTEx_DisableFifoMode+0x66>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	@ 0x24
 80053c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e02d      	b.n	8005484 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	@ 0x24
 8005434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f84f 	bl	8005508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e02d      	b.n	8005500 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2224      	movs	r2, #36	@ 0x24
 80054b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f811 	bl	8005508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005514:	2b00      	cmp	r3, #0
 8005516:	d108      	bne.n	800552a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005528:	e031      	b.n	800558e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800552a:	2308      	movs	r3, #8
 800552c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800552e:	2308      	movs	r3, #8
 8005530:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	0e5b      	lsrs	r3, r3, #25
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	0f5b      	lsrs	r3, r3, #29
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005552:	7bbb      	ldrb	r3, [r7, #14]
 8005554:	7b3a      	ldrb	r2, [r7, #12]
 8005556:	4911      	ldr	r1, [pc, #68]	@ (800559c <UARTEx_SetNbDataToProcess+0x94>)
 8005558:	5c8a      	ldrb	r2, [r1, r2]
 800555a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800555e:	7b3a      	ldrb	r2, [r7, #12]
 8005560:	490f      	ldr	r1, [pc, #60]	@ (80055a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005562:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005564:	fb93 f3f2 	sdiv	r3, r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	7b7a      	ldrb	r2, [r7, #13]
 8005574:	4909      	ldr	r1, [pc, #36]	@ (800559c <UARTEx_SetNbDataToProcess+0x94>)
 8005576:	5c8a      	ldrb	r2, [r1, r2]
 8005578:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800557c:	7b7a      	ldrb	r2, [r7, #13]
 800557e:	4908      	ldr	r1, [pc, #32]	@ (80055a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005580:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005582:	fb93 f3f2 	sdiv	r3, r3, r2
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	08009ea8 	.word	0x08009ea8
 80055a0:	08009eb0 	.word	0x08009eb0

080055a4 <__cvt>:
 80055a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	ec57 6b10 	vmov	r6, r7, d0
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4619      	mov	r1, r3
 80055b2:	463b      	mov	r3, r7
 80055b4:	bfbb      	ittet	lt
 80055b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80055ba:	461f      	movlt	r7, r3
 80055bc:	2300      	movge	r3, #0
 80055be:	232d      	movlt	r3, #45	@ 0x2d
 80055c0:	700b      	strb	r3, [r1, #0]
 80055c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055c8:	4691      	mov	r9, r2
 80055ca:	f023 0820 	bic.w	r8, r3, #32
 80055ce:	bfbc      	itt	lt
 80055d0:	4632      	movlt	r2, r6
 80055d2:	4616      	movlt	r6, r2
 80055d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055d8:	d005      	beq.n	80055e6 <__cvt+0x42>
 80055da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055de:	d100      	bne.n	80055e2 <__cvt+0x3e>
 80055e0:	3401      	adds	r4, #1
 80055e2:	2102      	movs	r1, #2
 80055e4:	e000      	b.n	80055e8 <__cvt+0x44>
 80055e6:	2103      	movs	r1, #3
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	ab02      	add	r3, sp, #8
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	ec47 6b10 	vmov	d0, r6, r7
 80055f4:	4653      	mov	r3, sl
 80055f6:	4622      	mov	r2, r4
 80055f8:	f001 f942 	bl	8006880 <_dtoa_r>
 80055fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005600:	4605      	mov	r5, r0
 8005602:	d119      	bne.n	8005638 <__cvt+0x94>
 8005604:	f019 0f01 	tst.w	r9, #1
 8005608:	d00e      	beq.n	8005628 <__cvt+0x84>
 800560a:	eb00 0904 	add.w	r9, r0, r4
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	4630      	mov	r0, r6
 8005614:	4639      	mov	r1, r7
 8005616:	f7fb fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800561a:	b108      	cbz	r0, 8005620 <__cvt+0x7c>
 800561c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005620:	2230      	movs	r2, #48	@ 0x30
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	454b      	cmp	r3, r9
 8005626:	d31e      	bcc.n	8005666 <__cvt+0xc2>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800562c:	1b5b      	subs	r3, r3, r5
 800562e:	4628      	mov	r0, r5
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	b004      	add	sp, #16
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800563c:	eb00 0904 	add.w	r9, r0, r4
 8005640:	d1e5      	bne.n	800560e <__cvt+0x6a>
 8005642:	7803      	ldrb	r3, [r0, #0]
 8005644:	2b30      	cmp	r3, #48	@ 0x30
 8005646:	d10a      	bne.n	800565e <__cvt+0xba>
 8005648:	2200      	movs	r2, #0
 800564a:	2300      	movs	r3, #0
 800564c:	4630      	mov	r0, r6
 800564e:	4639      	mov	r1, r7
 8005650:	f7fb fa62 	bl	8000b18 <__aeabi_dcmpeq>
 8005654:	b918      	cbnz	r0, 800565e <__cvt+0xba>
 8005656:	f1c4 0401 	rsb	r4, r4, #1
 800565a:	f8ca 4000 	str.w	r4, [sl]
 800565e:	f8da 3000 	ldr.w	r3, [sl]
 8005662:	4499      	add	r9, r3
 8005664:	e7d3      	b.n	800560e <__cvt+0x6a>
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	9103      	str	r1, [sp, #12]
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e7d9      	b.n	8005622 <__cvt+0x7e>

0800566e <__exponent>:
 800566e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005670:	2900      	cmp	r1, #0
 8005672:	bfba      	itte	lt
 8005674:	4249      	neglt	r1, r1
 8005676:	232d      	movlt	r3, #45	@ 0x2d
 8005678:	232b      	movge	r3, #43	@ 0x2b
 800567a:	2909      	cmp	r1, #9
 800567c:	7002      	strb	r2, [r0, #0]
 800567e:	7043      	strb	r3, [r0, #1]
 8005680:	dd29      	ble.n	80056d6 <__exponent+0x68>
 8005682:	f10d 0307 	add.w	r3, sp, #7
 8005686:	461d      	mov	r5, r3
 8005688:	270a      	movs	r7, #10
 800568a:	461a      	mov	r2, r3
 800568c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005690:	fb07 1416 	mls	r4, r7, r6, r1
 8005694:	3430      	adds	r4, #48	@ 0x30
 8005696:	f802 4c01 	strb.w	r4, [r2, #-1]
 800569a:	460c      	mov	r4, r1
 800569c:	2c63      	cmp	r4, #99	@ 0x63
 800569e:	f103 33ff 	add.w	r3, r3, #4294967295
 80056a2:	4631      	mov	r1, r6
 80056a4:	dcf1      	bgt.n	800568a <__exponent+0x1c>
 80056a6:	3130      	adds	r1, #48	@ 0x30
 80056a8:	1e94      	subs	r4, r2, #2
 80056aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056ae:	1c41      	adds	r1, r0, #1
 80056b0:	4623      	mov	r3, r4
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	d30a      	bcc.n	80056cc <__exponent+0x5e>
 80056b6:	f10d 0309 	add.w	r3, sp, #9
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	42ac      	cmp	r4, r5
 80056be:	bf88      	it	hi
 80056c0:	2300      	movhi	r3, #0
 80056c2:	3302      	adds	r3, #2
 80056c4:	4403      	add	r3, r0
 80056c6:	1a18      	subs	r0, r3, r0
 80056c8:	b003      	add	sp, #12
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056d4:	e7ed      	b.n	80056b2 <__exponent+0x44>
 80056d6:	2330      	movs	r3, #48	@ 0x30
 80056d8:	3130      	adds	r1, #48	@ 0x30
 80056da:	7083      	strb	r3, [r0, #2]
 80056dc:	70c1      	strb	r1, [r0, #3]
 80056de:	1d03      	adds	r3, r0, #4
 80056e0:	e7f1      	b.n	80056c6 <__exponent+0x58>
	...

080056e4 <_printf_float>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	b08d      	sub	sp, #52	@ 0x34
 80056ea:	460c      	mov	r4, r1
 80056ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80056f0:	4616      	mov	r6, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	4605      	mov	r5, r0
 80056f6:	f000 ffbd 	bl	8006674 <_localeconv_r>
 80056fa:	6803      	ldr	r3, [r0, #0]
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fa fdde 	bl	80002c0 <strlen>
 8005704:	2300      	movs	r3, #0
 8005706:	930a      	str	r3, [sp, #40]	@ 0x28
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	9005      	str	r0, [sp, #20]
 800570e:	3307      	adds	r3, #7
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	f894 a018 	ldrb.w	sl, [r4, #24]
 800571c:	f8d4 b000 	ldr.w	fp, [r4]
 8005720:	f8c8 2000 	str.w	r2, [r8]
 8005724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005728:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800572c:	9307      	str	r3, [sp, #28]
 800572e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573a:	4b9c      	ldr	r3, [pc, #624]	@ (80059ac <_printf_float+0x2c8>)
 800573c:	f04f 32ff 	mov.w	r2, #4294967295
 8005740:	f7fb fa1c 	bl	8000b7c <__aeabi_dcmpun>
 8005744:	bb70      	cbnz	r0, 80057a4 <_printf_float+0xc0>
 8005746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574a:	4b98      	ldr	r3, [pc, #608]	@ (80059ac <_printf_float+0x2c8>)
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	f7fb f9f6 	bl	8000b40 <__aeabi_dcmple>
 8005754:	bb30      	cbnz	r0, 80057a4 <_printf_float+0xc0>
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fb f9e5 	bl	8000b2c <__aeabi_dcmplt>
 8005762:	b110      	cbz	r0, 800576a <_printf_float+0x86>
 8005764:	232d      	movs	r3, #45	@ 0x2d
 8005766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800576a:	4a91      	ldr	r2, [pc, #580]	@ (80059b0 <_printf_float+0x2cc>)
 800576c:	4b91      	ldr	r3, [pc, #580]	@ (80059b4 <_printf_float+0x2d0>)
 800576e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005772:	bf94      	ite	ls
 8005774:	4690      	movls	r8, r2
 8005776:	4698      	movhi	r8, r3
 8005778:	2303      	movs	r3, #3
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	f02b 0304 	bic.w	r3, fp, #4
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	9700      	str	r7, [sp, #0]
 8005788:	4633      	mov	r3, r6
 800578a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800578c:	4621      	mov	r1, r4
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f9d2 	bl	8005b38 <_printf_common>
 8005794:	3001      	adds	r0, #1
 8005796:	f040 808d 	bne.w	80058b4 <_printf_float+0x1d0>
 800579a:	f04f 30ff 	mov.w	r0, #4294967295
 800579e:	b00d      	add	sp, #52	@ 0x34
 80057a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fb f9e6 	bl	8000b7c <__aeabi_dcmpun>
 80057b0:	b140      	cbz	r0, 80057c4 <_printf_float+0xe0>
 80057b2:	464b      	mov	r3, r9
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bfbc      	itt	lt
 80057b8:	232d      	movlt	r3, #45	@ 0x2d
 80057ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057be:	4a7e      	ldr	r2, [pc, #504]	@ (80059b8 <_printf_float+0x2d4>)
 80057c0:	4b7e      	ldr	r3, [pc, #504]	@ (80059bc <_printf_float+0x2d8>)
 80057c2:	e7d4      	b.n	800576e <_printf_float+0x8a>
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057ca:	9206      	str	r2, [sp, #24]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	d13b      	bne.n	8005848 <_printf_float+0x164>
 80057d0:	2306      	movs	r3, #6
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80057d8:	2300      	movs	r3, #0
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	9303      	str	r3, [sp, #12]
 80057de:	ab0a      	add	r3, sp, #40	@ 0x28
 80057e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80057e4:	ab09      	add	r3, sp, #36	@ 0x24
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	ec49 8b10 	vmov	d0, r8, r9
 80057ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7ff fed6 	bl	80055a4 <__cvt>
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057fc:	2b47      	cmp	r3, #71	@ 0x47
 80057fe:	4680      	mov	r8, r0
 8005800:	d129      	bne.n	8005856 <_printf_float+0x172>
 8005802:	1cc8      	adds	r0, r1, #3
 8005804:	db02      	blt.n	800580c <_printf_float+0x128>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	4299      	cmp	r1, r3
 800580a:	dd41      	ble.n	8005890 <_printf_float+0x1ac>
 800580c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005810:	fa5f fa8a 	uxtb.w	sl, sl
 8005814:	3901      	subs	r1, #1
 8005816:	4652      	mov	r2, sl
 8005818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800581c:	9109      	str	r1, [sp, #36]	@ 0x24
 800581e:	f7ff ff26 	bl	800566e <__exponent>
 8005822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005824:	1813      	adds	r3, r2, r0
 8005826:	2a01      	cmp	r2, #1
 8005828:	4681      	mov	r9, r0
 800582a:	6123      	str	r3, [r4, #16]
 800582c:	dc02      	bgt.n	8005834 <_printf_float+0x150>
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	07d2      	lsls	r2, r2, #31
 8005832:	d501      	bpl.n	8005838 <_printf_float+0x154>
 8005834:	3301      	adds	r3, #1
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0a2      	beq.n	8005786 <_printf_float+0xa2>
 8005840:	232d      	movs	r3, #45	@ 0x2d
 8005842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005846:	e79e      	b.n	8005786 <_printf_float+0xa2>
 8005848:	9a06      	ldr	r2, [sp, #24]
 800584a:	2a47      	cmp	r2, #71	@ 0x47
 800584c:	d1c2      	bne.n	80057d4 <_printf_float+0xf0>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1c0      	bne.n	80057d4 <_printf_float+0xf0>
 8005852:	2301      	movs	r3, #1
 8005854:	e7bd      	b.n	80057d2 <_printf_float+0xee>
 8005856:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800585a:	d9db      	bls.n	8005814 <_printf_float+0x130>
 800585c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005860:	d118      	bne.n	8005894 <_printf_float+0x1b0>
 8005862:	2900      	cmp	r1, #0
 8005864:	6863      	ldr	r3, [r4, #4]
 8005866:	dd0b      	ble.n	8005880 <_printf_float+0x19c>
 8005868:	6121      	str	r1, [r4, #16]
 800586a:	b913      	cbnz	r3, 8005872 <_printf_float+0x18e>
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	07d0      	lsls	r0, r2, #31
 8005870:	d502      	bpl.n	8005878 <_printf_float+0x194>
 8005872:	3301      	adds	r3, #1
 8005874:	440b      	add	r3, r1
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	65a1      	str	r1, [r4, #88]	@ 0x58
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	e7db      	b.n	8005838 <_printf_float+0x154>
 8005880:	b913      	cbnz	r3, 8005888 <_printf_float+0x1a4>
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	07d2      	lsls	r2, r2, #31
 8005886:	d501      	bpl.n	800588c <_printf_float+0x1a8>
 8005888:	3302      	adds	r3, #2
 800588a:	e7f4      	b.n	8005876 <_printf_float+0x192>
 800588c:	2301      	movs	r3, #1
 800588e:	e7f2      	b.n	8005876 <_printf_float+0x192>
 8005890:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005896:	4299      	cmp	r1, r3
 8005898:	db05      	blt.n	80058a6 <_printf_float+0x1c2>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	6121      	str	r1, [r4, #16]
 800589e:	07d8      	lsls	r0, r3, #31
 80058a0:	d5ea      	bpl.n	8005878 <_printf_float+0x194>
 80058a2:	1c4b      	adds	r3, r1, #1
 80058a4:	e7e7      	b.n	8005876 <_printf_float+0x192>
 80058a6:	2900      	cmp	r1, #0
 80058a8:	bfd4      	ite	le
 80058aa:	f1c1 0202 	rsble	r2, r1, #2
 80058ae:	2201      	movgt	r2, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	e7e0      	b.n	8005876 <_printf_float+0x192>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	055a      	lsls	r2, r3, #21
 80058b8:	d407      	bmi.n	80058ca <_printf_float+0x1e6>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	4642      	mov	r2, r8
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d12b      	bne.n	8005920 <_printf_float+0x23c>
 80058c8:	e767      	b.n	800579a <_printf_float+0xb6>
 80058ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058ce:	f240 80dd 	bls.w	8005a8c <_printf_float+0x3a8>
 80058d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	f7fb f91d 	bl	8000b18 <__aeabi_dcmpeq>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d033      	beq.n	800594a <_printf_float+0x266>
 80058e2:	4a37      	ldr	r2, [pc, #220]	@ (80059c0 <_printf_float+0x2dc>)
 80058e4:	2301      	movs	r3, #1
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f af54 	beq.w	800579a <_printf_float+0xb6>
 80058f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80058f6:	4543      	cmp	r3, r8
 80058f8:	db02      	blt.n	8005900 <_printf_float+0x21c>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	07d8      	lsls	r0, r3, #31
 80058fe:	d50f      	bpl.n	8005920 <_printf_float+0x23c>
 8005900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af45 	beq.w	800579a <_printf_float+0xb6>
 8005910:	f04f 0900 	mov.w	r9, #0
 8005914:	f108 38ff 	add.w	r8, r8, #4294967295
 8005918:	f104 0a1a 	add.w	sl, r4, #26
 800591c:	45c8      	cmp	r8, r9
 800591e:	dc09      	bgt.n	8005934 <_printf_float+0x250>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	079b      	lsls	r3, r3, #30
 8005924:	f100 8103 	bmi.w	8005b2e <_printf_float+0x44a>
 8005928:	68e0      	ldr	r0, [r4, #12]
 800592a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592c:	4298      	cmp	r0, r3
 800592e:	bfb8      	it	lt
 8005930:	4618      	movlt	r0, r3
 8005932:	e734      	b.n	800579e <_printf_float+0xba>
 8005934:	2301      	movs	r3, #1
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f af2b 	beq.w	800579a <_printf_float+0xb6>
 8005944:	f109 0901 	add.w	r9, r9, #1
 8005948:	e7e8      	b.n	800591c <_printf_float+0x238>
 800594a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	dc39      	bgt.n	80059c4 <_printf_float+0x2e0>
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <_printf_float+0x2dc>)
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af1d 	beq.w	800579a <_printf_float+0xb6>
 8005960:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005964:	ea59 0303 	orrs.w	r3, r9, r3
 8005968:	d102      	bne.n	8005970 <_printf_float+0x28c>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	07d9      	lsls	r1, r3, #31
 800596e:	d5d7      	bpl.n	8005920 <_printf_float+0x23c>
 8005970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af0d 	beq.w	800579a <_printf_float+0xb6>
 8005980:	f04f 0a00 	mov.w	sl, #0
 8005984:	f104 0b1a 	add.w	fp, r4, #26
 8005988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598a:	425b      	negs	r3, r3
 800598c:	4553      	cmp	r3, sl
 800598e:	dc01      	bgt.n	8005994 <_printf_float+0x2b0>
 8005990:	464b      	mov	r3, r9
 8005992:	e793      	b.n	80058bc <_printf_float+0x1d8>
 8005994:	2301      	movs	r3, #1
 8005996:	465a      	mov	r2, fp
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f aefb 	beq.w	800579a <_printf_float+0xb6>
 80059a4:	f10a 0a01 	add.w	sl, sl, #1
 80059a8:	e7ee      	b.n	8005988 <_printf_float+0x2a4>
 80059aa:	bf00      	nop
 80059ac:	7fefffff 	.word	0x7fefffff
 80059b0:	08009eb8 	.word	0x08009eb8
 80059b4:	08009ebc 	.word	0x08009ebc
 80059b8:	08009ec0 	.word	0x08009ec0
 80059bc:	08009ec4 	.word	0x08009ec4
 80059c0:	08009ec8 	.word	0x08009ec8
 80059c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059ca:	4553      	cmp	r3, sl
 80059cc:	bfa8      	it	ge
 80059ce:	4653      	movge	r3, sl
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	4699      	mov	r9, r3
 80059d4:	dc36      	bgt.n	8005a44 <_printf_float+0x360>
 80059d6:	f04f 0b00 	mov.w	fp, #0
 80059da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059de:	f104 021a 	add.w	r2, r4, #26
 80059e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059e4:	9306      	str	r3, [sp, #24]
 80059e6:	eba3 0309 	sub.w	r3, r3, r9
 80059ea:	455b      	cmp	r3, fp
 80059ec:	dc31      	bgt.n	8005a52 <_printf_float+0x36e>
 80059ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f0:	459a      	cmp	sl, r3
 80059f2:	dc3a      	bgt.n	8005a6a <_printf_float+0x386>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07da      	lsls	r2, r3, #31
 80059f8:	d437      	bmi.n	8005a6a <_printf_float+0x386>
 80059fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	ebaa 0303 	sub.w	r3, sl, r3
 8005a06:	4599      	cmp	r9, r3
 8005a08:	bfa8      	it	ge
 8005a0a:	4699      	movge	r9, r3
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dc33      	bgt.n	8005a7a <_printf_float+0x396>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1a:	f104 0b1a 	add.w	fp, r4, #26
 8005a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a20:	ebaa 0303 	sub.w	r3, sl, r3
 8005a24:	eba3 0309 	sub.w	r3, r3, r9
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	f77f af79 	ble.w	8005920 <_printf_float+0x23c>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	465a      	mov	r2, fp
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f43f aeae 	beq.w	800579a <_printf_float+0xb6>
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	e7ec      	b.n	8005a1e <_printf_float+0x33a>
 8005a44:	4642      	mov	r2, r8
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1c2      	bne.n	80059d6 <_printf_float+0x2f2>
 8005a50:	e6a3      	b.n	800579a <_printf_float+0xb6>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	9206      	str	r2, [sp, #24]
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae9c 	beq.w	800579a <_printf_float+0xb6>
 8005a62:	9a06      	ldr	r2, [sp, #24]
 8005a64:	f10b 0b01 	add.w	fp, fp, #1
 8005a68:	e7bb      	b.n	80059e2 <_printf_float+0x2fe>
 8005a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	d1c0      	bne.n	80059fa <_printf_float+0x316>
 8005a78:	e68f      	b.n	800579a <_printf_float+0xb6>
 8005a7a:	9a06      	ldr	r2, [sp, #24]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	4442      	add	r2, r8
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	d1c3      	bne.n	8005a12 <_printf_float+0x32e>
 8005a8a:	e686      	b.n	800579a <_printf_float+0xb6>
 8005a8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a90:	f1ba 0f01 	cmp.w	sl, #1
 8005a94:	dc01      	bgt.n	8005a9a <_printf_float+0x3b6>
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d536      	bpl.n	8005b08 <_printf_float+0x424>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f ae78 	beq.w	800579a <_printf_float+0xb6>
 8005aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f ae70 	beq.w	800579a <_printf_float+0xb6>
 8005aba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ac6:	f7fb f827 	bl	8000b18 <__aeabi_dcmpeq>
 8005aca:	b9c0      	cbnz	r0, 8005afe <_printf_float+0x41a>
 8005acc:	4653      	mov	r3, sl
 8005ace:	f108 0201 	add.w	r2, r8, #1
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d10c      	bne.n	8005af6 <_printf_float+0x412>
 8005adc:	e65d      	b.n	800579a <_printf_float+0xb6>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	465a      	mov	r2, fp
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f ae56 	beq.w	800579a <_printf_float+0xb6>
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	45d0      	cmp	r8, sl
 8005af4:	dbf3      	blt.n	8005ade <_printf_float+0x3fa>
 8005af6:	464b      	mov	r3, r9
 8005af8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005afc:	e6df      	b.n	80058be <_printf_float+0x1da>
 8005afe:	f04f 0800 	mov.w	r8, #0
 8005b02:	f104 0b1a 	add.w	fp, r4, #26
 8005b06:	e7f4      	b.n	8005af2 <_printf_float+0x40e>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	e7e1      	b.n	8005ad2 <_printf_float+0x3ee>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	464a      	mov	r2, r9
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f ae3e 	beq.w	800579a <_printf_float+0xb6>
 8005b1e:	f108 0801 	add.w	r8, r8, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	4543      	cmp	r3, r8
 8005b2a:	dcf0      	bgt.n	8005b0e <_printf_float+0x42a>
 8005b2c:	e6fc      	b.n	8005928 <_printf_float+0x244>
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	f104 0919 	add.w	r9, r4, #25
 8005b36:	e7f4      	b.n	8005b22 <_printf_float+0x43e>

08005b38 <_printf_common>:
 8005b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	4698      	mov	r8, r3
 8005b40:	688a      	ldr	r2, [r1, #8]
 8005b42:	690b      	ldr	r3, [r1, #16]
 8005b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bfb8      	it	lt
 8005b4c:	4613      	movlt	r3, r2
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b54:	4607      	mov	r7, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	b10a      	cbz	r2, 8005b5e <_printf_common+0x26>
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	0699      	lsls	r1, r3, #26
 8005b62:	bf42      	ittt	mi
 8005b64:	6833      	ldrmi	r3, [r6, #0]
 8005b66:	3302      	addmi	r3, #2
 8005b68:	6033      	strmi	r3, [r6, #0]
 8005b6a:	6825      	ldr	r5, [r4, #0]
 8005b6c:	f015 0506 	ands.w	r5, r5, #6
 8005b70:	d106      	bne.n	8005b80 <_printf_common+0x48>
 8005b72:	f104 0a19 	add.w	sl, r4, #25
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	6832      	ldr	r2, [r6, #0]
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dc26      	bgt.n	8005bce <_printf_common+0x96>
 8005b80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	3b00      	subs	r3, #0
 8005b88:	bf18      	it	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	0692      	lsls	r2, r2, #26
 8005b8e:	d42b      	bmi.n	8005be8 <_printf_common+0xb0>
 8005b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b94:	4641      	mov	r1, r8
 8005b96:	4638      	mov	r0, r7
 8005b98:	47c8      	blx	r9
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d01e      	beq.n	8005bdc <_printf_common+0xa4>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf02      	ittt	eq
 8005baa:	68e5      	ldreq	r5, [r4, #12]
 8005bac:	6833      	ldreq	r3, [r6, #0]
 8005bae:	1aed      	subeq	r5, r5, r3
 8005bb0:	68a3      	ldr	r3, [r4, #8]
 8005bb2:	bf0c      	ite	eq
 8005bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb8:	2500      	movne	r5, #0
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bfc4      	itt	gt
 8005bbe:	1a9b      	subgt	r3, r3, r2
 8005bc0:	18ed      	addgt	r5, r5, r3
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	341a      	adds	r4, #26
 8005bc6:	42b5      	cmp	r5, r6
 8005bc8:	d11a      	bne.n	8005c00 <_printf_common+0xc8>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e008      	b.n	8005be0 <_printf_common+0xa8>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4652      	mov	r2, sl
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	47c8      	blx	r9
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d103      	bne.n	8005be4 <_printf_common+0xac>
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7c6      	b.n	8005b76 <_printf_common+0x3e>
 8005be8:	18e1      	adds	r1, r4, r3
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	2030      	movs	r0, #48	@ 0x30
 8005bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bf2:	4422      	add	r2, r4
 8005bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	e7c7      	b.n	8005b90 <_printf_common+0x58>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4622      	mov	r2, r4
 8005c04:	4641      	mov	r1, r8
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c8      	blx	r9
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d0e6      	beq.n	8005bdc <_printf_common+0xa4>
 8005c0e:	3601      	adds	r6, #1
 8005c10:	e7d9      	b.n	8005bc6 <_printf_common+0x8e>
	...

08005c14 <_printf_i>:
 8005c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	7e0f      	ldrb	r7, [r1, #24]
 8005c1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c1c:	2f78      	cmp	r7, #120	@ 0x78
 8005c1e:	4691      	mov	r9, r2
 8005c20:	4680      	mov	r8, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	469a      	mov	sl, r3
 8005c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c2a:	d807      	bhi.n	8005c3c <_printf_i+0x28>
 8005c2c:	2f62      	cmp	r7, #98	@ 0x62
 8005c2e:	d80a      	bhi.n	8005c46 <_printf_i+0x32>
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	f000 80d2 	beq.w	8005dda <_printf_i+0x1c6>
 8005c36:	2f58      	cmp	r7, #88	@ 0x58
 8005c38:	f000 80b9 	beq.w	8005dae <_printf_i+0x19a>
 8005c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c44:	e03a      	b.n	8005cbc <_printf_i+0xa8>
 8005c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c4a:	2b15      	cmp	r3, #21
 8005c4c:	d8f6      	bhi.n	8005c3c <_printf_i+0x28>
 8005c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c54 <_printf_i+0x40>)
 8005c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c54:	08005cad 	.word	0x08005cad
 8005c58:	08005cc1 	.word	0x08005cc1
 8005c5c:	08005c3d 	.word	0x08005c3d
 8005c60:	08005c3d 	.word	0x08005c3d
 8005c64:	08005c3d 	.word	0x08005c3d
 8005c68:	08005c3d 	.word	0x08005c3d
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005c3d 	.word	0x08005c3d
 8005c74:	08005c3d 	.word	0x08005c3d
 8005c78:	08005c3d 	.word	0x08005c3d
 8005c7c:	08005c3d 	.word	0x08005c3d
 8005c80:	08005dc1 	.word	0x08005dc1
 8005c84:	08005ceb 	.word	0x08005ceb
 8005c88:	08005d7b 	.word	0x08005d7b
 8005c8c:	08005c3d 	.word	0x08005c3d
 8005c90:	08005c3d 	.word	0x08005c3d
 8005c94:	08005de3 	.word	0x08005de3
 8005c98:	08005c3d 	.word	0x08005c3d
 8005c9c:	08005ceb 	.word	0x08005ceb
 8005ca0:	08005c3d 	.word	0x08005c3d
 8005ca4:	08005c3d 	.word	0x08005c3d
 8005ca8:	08005d83 	.word	0x08005d83
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6032      	str	r2, [r6, #0]
 8005cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e09d      	b.n	8005dfc <_printf_i+0x1e8>
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	1d19      	adds	r1, r3, #4
 8005cc6:	6031      	str	r1, [r6, #0]
 8005cc8:	0606      	lsls	r6, r0, #24
 8005cca:	d501      	bpl.n	8005cd0 <_printf_i+0xbc>
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	e003      	b.n	8005cd8 <_printf_i+0xc4>
 8005cd0:	0645      	lsls	r5, r0, #25
 8005cd2:	d5fb      	bpl.n	8005ccc <_printf_i+0xb8>
 8005cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	da03      	bge.n	8005ce4 <_printf_i+0xd0>
 8005cdc:	232d      	movs	r3, #45	@ 0x2d
 8005cde:	426d      	negs	r5, r5
 8005ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce4:	4859      	ldr	r0, [pc, #356]	@ (8005e4c <_printf_i+0x238>)
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	e011      	b.n	8005d0e <_printf_i+0xfa>
 8005cea:	6821      	ldr	r1, [r4, #0]
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	0608      	lsls	r0, r1, #24
 8005cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cf4:	d402      	bmi.n	8005cfc <_printf_i+0xe8>
 8005cf6:	0649      	lsls	r1, r1, #25
 8005cf8:	bf48      	it	mi
 8005cfa:	b2ad      	uxthmi	r5, r5
 8005cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cfe:	4853      	ldr	r0, [pc, #332]	@ (8005e4c <_printf_i+0x238>)
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	bf14      	ite	ne
 8005d04:	230a      	movne	r3, #10
 8005d06:	2308      	moveq	r3, #8
 8005d08:	2100      	movs	r1, #0
 8005d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d0e:	6866      	ldr	r6, [r4, #4]
 8005d10:	60a6      	str	r6, [r4, #8]
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	bfa2      	ittt	ge
 8005d16:	6821      	ldrge	r1, [r4, #0]
 8005d18:	f021 0104 	bicge.w	r1, r1, #4
 8005d1c:	6021      	strge	r1, [r4, #0]
 8005d1e:	b90d      	cbnz	r5, 8005d24 <_printf_i+0x110>
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	d04b      	beq.n	8005dbc <_printf_i+0x1a8>
 8005d24:	4616      	mov	r6, r2
 8005d26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d2e:	5dc7      	ldrb	r7, [r0, r7]
 8005d30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d34:	462f      	mov	r7, r5
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	460d      	mov	r5, r1
 8005d3a:	d9f4      	bls.n	8005d26 <_printf_i+0x112>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10b      	bne.n	8005d58 <_printf_i+0x144>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07df      	lsls	r7, r3, #31
 8005d44:	d508      	bpl.n	8005d58 <_printf_i+0x144>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6861      	ldr	r1, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bfde      	ittt	le
 8005d4e:	2330      	movle	r3, #48	@ 0x30
 8005d50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d58:	1b92      	subs	r2, r2, r6
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	464b      	mov	r3, r9
 8005d62:	aa03      	add	r2, sp, #12
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fee6 	bl	8005b38 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d14a      	bne.n	8005e06 <_printf_i+0x1f2>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b004      	add	sp, #16
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	4833      	ldr	r0, [pc, #204]	@ (8005e50 <_printf_i+0x23c>)
 8005d84:	2778      	movs	r7, #120	@ 0x78
 8005d86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	6831      	ldr	r1, [r6, #0]
 8005d8e:	061f      	lsls	r7, r3, #24
 8005d90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d94:	d402      	bmi.n	8005d9c <_printf_i+0x188>
 8005d96:	065f      	lsls	r7, r3, #25
 8005d98:	bf48      	it	mi
 8005d9a:	b2ad      	uxthmi	r5, r5
 8005d9c:	6031      	str	r1, [r6, #0]
 8005d9e:	07d9      	lsls	r1, r3, #31
 8005da0:	bf44      	itt	mi
 8005da2:	f043 0320 	orrmi.w	r3, r3, #32
 8005da6:	6023      	strmi	r3, [r4, #0]
 8005da8:	b11d      	cbz	r5, 8005db2 <_printf_i+0x19e>
 8005daa:	2310      	movs	r3, #16
 8005dac:	e7ac      	b.n	8005d08 <_printf_i+0xf4>
 8005dae:	4827      	ldr	r0, [pc, #156]	@ (8005e4c <_printf_i+0x238>)
 8005db0:	e7e9      	b.n	8005d86 <_printf_i+0x172>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f023 0320 	bic.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	e7f6      	b.n	8005daa <_printf_i+0x196>
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	e7bd      	b.n	8005d3c <_printf_i+0x128>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	6961      	ldr	r1, [r4, #20]
 8005dc6:	1d18      	adds	r0, r3, #4
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	062e      	lsls	r6, r5, #24
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	d501      	bpl.n	8005dd4 <_printf_i+0x1c0>
 8005dd0:	6019      	str	r1, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <_printf_i+0x1c6>
 8005dd4:	0668      	lsls	r0, r5, #25
 8005dd6:	d5fb      	bpl.n	8005dd0 <_printf_i+0x1bc>
 8005dd8:	8019      	strh	r1, [r3, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	4616      	mov	r6, r2
 8005de0:	e7bc      	b.n	8005d5c <_printf_i+0x148>
 8005de2:	6833      	ldr	r3, [r6, #0]
 8005de4:	1d1a      	adds	r2, r3, #4
 8005de6:	6032      	str	r2, [r6, #0]
 8005de8:	681e      	ldr	r6, [r3, #0]
 8005dea:	6862      	ldr	r2, [r4, #4]
 8005dec:	2100      	movs	r1, #0
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7fa fa16 	bl	8000220 <memchr>
 8005df4:	b108      	cbz	r0, 8005dfa <_printf_i+0x1e6>
 8005df6:	1b80      	subs	r0, r0, r6
 8005df8:	6060      	str	r0, [r4, #4]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e04:	e7aa      	b.n	8005d5c <_printf_i+0x148>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	4632      	mov	r2, r6
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	47d0      	blx	sl
 8005e10:	3001      	adds	r0, #1
 8005e12:	d0ad      	beq.n	8005d70 <_printf_i+0x15c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	079b      	lsls	r3, r3, #30
 8005e18:	d413      	bmi.n	8005e42 <_printf_i+0x22e>
 8005e1a:	68e0      	ldr	r0, [r4, #12]
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	bfb8      	it	lt
 8005e22:	4618      	movlt	r0, r3
 8005e24:	e7a6      	b.n	8005d74 <_printf_i+0x160>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	47d0      	blx	sl
 8005e30:	3001      	adds	r0, #1
 8005e32:	d09d      	beq.n	8005d70 <_printf_i+0x15c>
 8005e34:	3501      	adds	r5, #1
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	9903      	ldr	r1, [sp, #12]
 8005e3a:	1a5b      	subs	r3, r3, r1
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dcf2      	bgt.n	8005e26 <_printf_i+0x212>
 8005e40:	e7eb      	b.n	8005e1a <_printf_i+0x206>
 8005e42:	2500      	movs	r5, #0
 8005e44:	f104 0619 	add.w	r6, r4, #25
 8005e48:	e7f5      	b.n	8005e36 <_printf_i+0x222>
 8005e4a:	bf00      	nop
 8005e4c:	08009eca 	.word	0x08009eca
 8005e50:	08009edb 	.word	0x08009edb

08005e54 <_scanf_float>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	4617      	mov	r7, r2
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	688b      	ldr	r3, [r1, #8]
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005e66:	bf81      	itttt	hi
 8005e68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005e6c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005e70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005e74:	608b      	strhi	r3, [r1, #8]
 8005e76:	680b      	ldr	r3, [r1, #0]
 8005e78:	460a      	mov	r2, r1
 8005e7a:	f04f 0500 	mov.w	r5, #0
 8005e7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005e82:	f842 3b1c 	str.w	r3, [r2], #28
 8005e86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	bf98      	it	ls
 8005e90:	f04f 0b00 	movls.w	fp, #0
 8005e94:	9201      	str	r2, [sp, #4]
 8005e96:	4616      	mov	r6, r2
 8005e98:	46aa      	mov	sl, r5
 8005e9a:	46a9      	mov	r9, r5
 8005e9c:	9502      	str	r5, [sp, #8]
 8005e9e:	68a2      	ldr	r2, [r4, #8]
 8005ea0:	b152      	cbz	r2, 8005eb8 <_scanf_float+0x64>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ea8:	d864      	bhi.n	8005f74 <_scanf_float+0x120>
 8005eaa:	2b40      	cmp	r3, #64	@ 0x40
 8005eac:	d83c      	bhi.n	8005f28 <_scanf_float+0xd4>
 8005eae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005eb2:	b2c8      	uxtb	r0, r1
 8005eb4:	280e      	cmp	r0, #14
 8005eb6:	d93a      	bls.n	8005f2e <_scanf_float+0xda>
 8005eb8:	f1b9 0f00 	cmp.w	r9, #0
 8005ebc:	d003      	beq.n	8005ec6 <_scanf_float+0x72>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eca:	f1ba 0f01 	cmp.w	sl, #1
 8005ece:	f200 8117 	bhi.w	8006100 <_scanf_float+0x2ac>
 8005ed2:	9b01      	ldr	r3, [sp, #4]
 8005ed4:	429e      	cmp	r6, r3
 8005ed6:	f200 8108 	bhi.w	80060ea <_scanf_float+0x296>
 8005eda:	2001      	movs	r0, #1
 8005edc:	b007      	add	sp, #28
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005ee6:	2a0d      	cmp	r2, #13
 8005ee8:	d8e6      	bhi.n	8005eb8 <_scanf_float+0x64>
 8005eea:	a101      	add	r1, pc, #4	@ (adr r1, 8005ef0 <_scanf_float+0x9c>)
 8005eec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ef0:	08006037 	.word	0x08006037
 8005ef4:	08005eb9 	.word	0x08005eb9
 8005ef8:	08005eb9 	.word	0x08005eb9
 8005efc:	08005eb9 	.word	0x08005eb9
 8005f00:	08006097 	.word	0x08006097
 8005f04:	0800606f 	.word	0x0800606f
 8005f08:	08005eb9 	.word	0x08005eb9
 8005f0c:	08005eb9 	.word	0x08005eb9
 8005f10:	08006045 	.word	0x08006045
 8005f14:	08005eb9 	.word	0x08005eb9
 8005f18:	08005eb9 	.word	0x08005eb9
 8005f1c:	08005eb9 	.word	0x08005eb9
 8005f20:	08005eb9 	.word	0x08005eb9
 8005f24:	08005ffd 	.word	0x08005ffd
 8005f28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005f2c:	e7db      	b.n	8005ee6 <_scanf_float+0x92>
 8005f2e:	290e      	cmp	r1, #14
 8005f30:	d8c2      	bhi.n	8005eb8 <_scanf_float+0x64>
 8005f32:	a001      	add	r0, pc, #4	@ (adr r0, 8005f38 <_scanf_float+0xe4>)
 8005f34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f38:	08005fed 	.word	0x08005fed
 8005f3c:	08005eb9 	.word	0x08005eb9
 8005f40:	08005fed 	.word	0x08005fed
 8005f44:	08006083 	.word	0x08006083
 8005f48:	08005eb9 	.word	0x08005eb9
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005fd3 	.word	0x08005fd3
 8005f54:	08005fd3 	.word	0x08005fd3
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08005fd3 	.word	0x08005fd3
 8005f60:	08005fd3 	.word	0x08005fd3
 8005f64:	08005fd3 	.word	0x08005fd3
 8005f68:	08005fd3 	.word	0x08005fd3
 8005f6c:	08005fd3 	.word	0x08005fd3
 8005f70:	08005fd3 	.word	0x08005fd3
 8005f74:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f76:	d809      	bhi.n	8005f8c <_scanf_float+0x138>
 8005f78:	2b60      	cmp	r3, #96	@ 0x60
 8005f7a:	d8b2      	bhi.n	8005ee2 <_scanf_float+0x8e>
 8005f7c:	2b54      	cmp	r3, #84	@ 0x54
 8005f7e:	d07b      	beq.n	8006078 <_scanf_float+0x224>
 8005f80:	2b59      	cmp	r3, #89	@ 0x59
 8005f82:	d199      	bne.n	8005eb8 <_scanf_float+0x64>
 8005f84:	2d07      	cmp	r5, #7
 8005f86:	d197      	bne.n	8005eb8 <_scanf_float+0x64>
 8005f88:	2508      	movs	r5, #8
 8005f8a:	e02c      	b.n	8005fe6 <_scanf_float+0x192>
 8005f8c:	2b74      	cmp	r3, #116	@ 0x74
 8005f8e:	d073      	beq.n	8006078 <_scanf_float+0x224>
 8005f90:	2b79      	cmp	r3, #121	@ 0x79
 8005f92:	e7f6      	b.n	8005f82 <_scanf_float+0x12e>
 8005f94:	6821      	ldr	r1, [r4, #0]
 8005f96:	05c8      	lsls	r0, r1, #23
 8005f98:	d51b      	bpl.n	8005fd2 <_scanf_float+0x17e>
 8005f9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005f9e:	6021      	str	r1, [r4, #0]
 8005fa0:	f109 0901 	add.w	r9, r9, #1
 8005fa4:	f1bb 0f00 	cmp.w	fp, #0
 8005fa8:	d003      	beq.n	8005fb2 <_scanf_float+0x15e>
 8005faa:	3201      	adds	r2, #1
 8005fac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fb0:	60a2      	str	r2, [r4, #8]
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	60a3      	str	r3, [r4, #8]
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	f340 8087 	ble.w	80060d8 <_scanf_float+0x284>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	e765      	b.n	8005e9e <_scanf_float+0x4a>
 8005fd2:	eb1a 0105 	adds.w	r1, sl, r5
 8005fd6:	f47f af6f 	bne.w	8005eb8 <_scanf_float+0x64>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005fe0:	6022      	str	r2, [r4, #0]
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	468a      	mov	sl, r1
 8005fe6:	f806 3b01 	strb.w	r3, [r6], #1
 8005fea:	e7e2      	b.n	8005fb2 <_scanf_float+0x15e>
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	0610      	lsls	r0, r2, #24
 8005ff0:	f57f af62 	bpl.w	8005eb8 <_scanf_float+0x64>
 8005ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	e7f4      	b.n	8005fe6 <_scanf_float+0x192>
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	d10e      	bne.n	8006020 <_scanf_float+0x1cc>
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	d10e      	bne.n	8006026 <_scanf_float+0x1d2>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800600e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006012:	d108      	bne.n	8006026 <_scanf_float+0x1d2>
 8006014:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006018:	6022      	str	r2, [r4, #0]
 800601a:	f04f 0a01 	mov.w	sl, #1
 800601e:	e7e2      	b.n	8005fe6 <_scanf_float+0x192>
 8006020:	f1ba 0f02 	cmp.w	sl, #2
 8006024:	d055      	beq.n	80060d2 <_scanf_float+0x27e>
 8006026:	2d01      	cmp	r5, #1
 8006028:	d002      	beq.n	8006030 <_scanf_float+0x1dc>
 800602a:	2d04      	cmp	r5, #4
 800602c:	f47f af44 	bne.w	8005eb8 <_scanf_float+0x64>
 8006030:	3501      	adds	r5, #1
 8006032:	b2ed      	uxtb	r5, r5
 8006034:	e7d7      	b.n	8005fe6 <_scanf_float+0x192>
 8006036:	f1ba 0f01 	cmp.w	sl, #1
 800603a:	f47f af3d 	bne.w	8005eb8 <_scanf_float+0x64>
 800603e:	f04f 0a02 	mov.w	sl, #2
 8006042:	e7d0      	b.n	8005fe6 <_scanf_float+0x192>
 8006044:	b97d      	cbnz	r5, 8006066 <_scanf_float+0x212>
 8006046:	f1b9 0f00 	cmp.w	r9, #0
 800604a:	f47f af38 	bne.w	8005ebe <_scanf_float+0x6a>
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006054:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006058:	f040 8108 	bne.w	800626c <_scanf_float+0x418>
 800605c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006060:	6022      	str	r2, [r4, #0]
 8006062:	2501      	movs	r5, #1
 8006064:	e7bf      	b.n	8005fe6 <_scanf_float+0x192>
 8006066:	2d03      	cmp	r5, #3
 8006068:	d0e2      	beq.n	8006030 <_scanf_float+0x1dc>
 800606a:	2d05      	cmp	r5, #5
 800606c:	e7de      	b.n	800602c <_scanf_float+0x1d8>
 800606e:	2d02      	cmp	r5, #2
 8006070:	f47f af22 	bne.w	8005eb8 <_scanf_float+0x64>
 8006074:	2503      	movs	r5, #3
 8006076:	e7b6      	b.n	8005fe6 <_scanf_float+0x192>
 8006078:	2d06      	cmp	r5, #6
 800607a:	f47f af1d 	bne.w	8005eb8 <_scanf_float+0x64>
 800607e:	2507      	movs	r5, #7
 8006080:	e7b1      	b.n	8005fe6 <_scanf_float+0x192>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	0591      	lsls	r1, r2, #22
 8006086:	f57f af17 	bpl.w	8005eb8 <_scanf_float+0x64>
 800608a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800608e:	6022      	str	r2, [r4, #0]
 8006090:	f8cd 9008 	str.w	r9, [sp, #8]
 8006094:	e7a7      	b.n	8005fe6 <_scanf_float+0x192>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800609c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80060a0:	d006      	beq.n	80060b0 <_scanf_float+0x25c>
 80060a2:	0550      	lsls	r0, r2, #21
 80060a4:	f57f af08 	bpl.w	8005eb8 <_scanf_float+0x64>
 80060a8:	f1b9 0f00 	cmp.w	r9, #0
 80060ac:	f000 80de 	beq.w	800626c <_scanf_float+0x418>
 80060b0:	0591      	lsls	r1, r2, #22
 80060b2:	bf58      	it	pl
 80060b4:	9902      	ldrpl	r1, [sp, #8]
 80060b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060ba:	bf58      	it	pl
 80060bc:	eba9 0101 	subpl.w	r1, r9, r1
 80060c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80060c4:	bf58      	it	pl
 80060c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060ca:	6022      	str	r2, [r4, #0]
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	e789      	b.n	8005fe6 <_scanf_float+0x192>
 80060d2:	f04f 0a03 	mov.w	sl, #3
 80060d6:	e786      	b.n	8005fe6 <_scanf_float+0x192>
 80060d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80060dc:	4639      	mov	r1, r7
 80060de:	4640      	mov	r0, r8
 80060e0:	4798      	blx	r3
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f43f aedb 	beq.w	8005e9e <_scanf_float+0x4a>
 80060e8:	e6e6      	b.n	8005eb8 <_scanf_float+0x64>
 80060ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060f2:	463a      	mov	r2, r7
 80060f4:	4640      	mov	r0, r8
 80060f6:	4798      	blx	r3
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e6e8      	b.n	8005ed2 <_scanf_float+0x7e>
 8006100:	1e6b      	subs	r3, r5, #1
 8006102:	2b06      	cmp	r3, #6
 8006104:	d824      	bhi.n	8006150 <_scanf_float+0x2fc>
 8006106:	2d02      	cmp	r5, #2
 8006108:	d836      	bhi.n	8006178 <_scanf_float+0x324>
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	429e      	cmp	r6, r3
 800610e:	f67f aee4 	bls.w	8005eda <_scanf_float+0x86>
 8006112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800611a:	463a      	mov	r2, r7
 800611c:	4640      	mov	r0, r8
 800611e:	4798      	blx	r3
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	3b01      	subs	r3, #1
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	e7f0      	b.n	800610a <_scanf_float+0x2b6>
 8006128:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800612c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006130:	463a      	mov	r2, r7
 8006132:	4640      	mov	r0, r8
 8006134:	4798      	blx	r3
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	3b01      	subs	r3, #1
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006140:	fa5f fa8a 	uxtb.w	sl, sl
 8006144:	f1ba 0f02 	cmp.w	sl, #2
 8006148:	d1ee      	bne.n	8006128 <_scanf_float+0x2d4>
 800614a:	3d03      	subs	r5, #3
 800614c:	b2ed      	uxtb	r5, r5
 800614e:	1b76      	subs	r6, r6, r5
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	05da      	lsls	r2, r3, #23
 8006154:	d530      	bpl.n	80061b8 <_scanf_float+0x364>
 8006156:	055b      	lsls	r3, r3, #21
 8006158:	d511      	bpl.n	800617e <_scanf_float+0x32a>
 800615a:	9b01      	ldr	r3, [sp, #4]
 800615c:	429e      	cmp	r6, r3
 800615e:	f67f aebc 	bls.w	8005eda <_scanf_float+0x86>
 8006162:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800616a:	463a      	mov	r2, r7
 800616c:	4640      	mov	r0, r8
 800616e:	4798      	blx	r3
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	3b01      	subs	r3, #1
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	e7f0      	b.n	800615a <_scanf_float+0x306>
 8006178:	46aa      	mov	sl, r5
 800617a:	46b3      	mov	fp, r6
 800617c:	e7de      	b.n	800613c <_scanf_float+0x2e8>
 800617e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	2965      	cmp	r1, #101	@ 0x65
 8006186:	f103 33ff 	add.w	r3, r3, #4294967295
 800618a:	f106 35ff 	add.w	r5, r6, #4294967295
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	d00c      	beq.n	80061ac <_scanf_float+0x358>
 8006192:	2945      	cmp	r1, #69	@ 0x45
 8006194:	d00a      	beq.n	80061ac <_scanf_float+0x358>
 8006196:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800619a:	463a      	mov	r2, r7
 800619c:	4640      	mov	r0, r8
 800619e:	4798      	blx	r3
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	1eb5      	subs	r5, r6, #2
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061b0:	463a      	mov	r2, r7
 80061b2:	4640      	mov	r0, r8
 80061b4:	4798      	blx	r3
 80061b6:	462e      	mov	r6, r5
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	f012 0210 	ands.w	r2, r2, #16
 80061be:	d001      	beq.n	80061c4 <_scanf_float+0x370>
 80061c0:	2000      	movs	r0, #0
 80061c2:	e68b      	b.n	8005edc <_scanf_float+0x88>
 80061c4:	7032      	strb	r2, [r6, #0]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d0:	d11c      	bne.n	800620c <_scanf_float+0x3b8>
 80061d2:	9b02      	ldr	r3, [sp, #8]
 80061d4:	454b      	cmp	r3, r9
 80061d6:	eba3 0209 	sub.w	r2, r3, r9
 80061da:	d123      	bne.n	8006224 <_scanf_float+0x3d0>
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	4640      	mov	r0, r8
 80061e2:	f002 fcc5 	bl	8008b70 <_strtod_r>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f011 0f02 	tst.w	r1, #2
 80061f0:	ec57 6b10 	vmov	r6, r7, d0
 80061f4:	f103 0204 	add.w	r2, r3, #4
 80061f8:	d01f      	beq.n	800623a <_scanf_float+0x3e6>
 80061fa:	9903      	ldr	r1, [sp, #12]
 80061fc:	600a      	str	r2, [r1, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	e9c3 6700 	strd	r6, r7, [r3]
 8006204:	68e3      	ldr	r3, [r4, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60e3      	str	r3, [r4, #12]
 800620a:	e7d9      	b.n	80061c0 <_scanf_float+0x36c>
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0e4      	beq.n	80061dc <_scanf_float+0x388>
 8006212:	9905      	ldr	r1, [sp, #20]
 8006214:	230a      	movs	r3, #10
 8006216:	3101      	adds	r1, #1
 8006218:	4640      	mov	r0, r8
 800621a:	f002 fd29 	bl	8008c70 <_strtol_r>
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	9e05      	ldr	r6, [sp, #20]
 8006222:	1ac2      	subs	r2, r0, r3
 8006224:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006228:	429e      	cmp	r6, r3
 800622a:	bf28      	it	cs
 800622c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006230:	4910      	ldr	r1, [pc, #64]	@ (8006274 <_scanf_float+0x420>)
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f9b2 	bl	800659c <siprintf>
 8006238:	e7d0      	b.n	80061dc <_scanf_float+0x388>
 800623a:	f011 0f04 	tst.w	r1, #4
 800623e:	9903      	ldr	r1, [sp, #12]
 8006240:	600a      	str	r2, [r1, #0]
 8006242:	d1dc      	bne.n	80061fe <_scanf_float+0x3aa>
 8006244:	681d      	ldr	r5, [r3, #0]
 8006246:	4632      	mov	r2, r6
 8006248:	463b      	mov	r3, r7
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	f7fa fc95 	bl	8000b7c <__aeabi_dcmpun>
 8006252:	b128      	cbz	r0, 8006260 <_scanf_float+0x40c>
 8006254:	4808      	ldr	r0, [pc, #32]	@ (8006278 <_scanf_float+0x424>)
 8006256:	f000 fa85 	bl	8006764 <nanf>
 800625a:	ed85 0a00 	vstr	s0, [r5]
 800625e:	e7d1      	b.n	8006204 <_scanf_float+0x3b0>
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa fce8 	bl	8000c38 <__aeabi_d2f>
 8006268:	6028      	str	r0, [r5, #0]
 800626a:	e7cb      	b.n	8006204 <_scanf_float+0x3b0>
 800626c:	f04f 0900 	mov.w	r9, #0
 8006270:	e629      	b.n	8005ec6 <_scanf_float+0x72>
 8006272:	bf00      	nop
 8006274:	08009eec 	.word	0x08009eec
 8006278:	0800a285 	.word	0x0800a285

0800627c <std>:
 800627c:	2300      	movs	r3, #0
 800627e:	b510      	push	{r4, lr}
 8006280:	4604      	mov	r4, r0
 8006282:	e9c0 3300 	strd	r3, r3, [r0]
 8006286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800628a:	6083      	str	r3, [r0, #8]
 800628c:	8181      	strh	r1, [r0, #12]
 800628e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006290:	81c2      	strh	r2, [r0, #14]
 8006292:	6183      	str	r3, [r0, #24]
 8006294:	4619      	mov	r1, r3
 8006296:	2208      	movs	r2, #8
 8006298:	305c      	adds	r0, #92	@ 0x5c
 800629a:	f000 f9e2 	bl	8006662 <memset>
 800629e:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <std+0x58>)
 80062a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <std+0x5c>)
 80062a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062a6:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <std+0x60>)
 80062a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <std+0x64>)
 80062ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <std+0x68>)
 80062b0:	6224      	str	r4, [r4, #32]
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d006      	beq.n	80062c4 <std+0x48>
 80062b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062ba:	4294      	cmp	r4, r2
 80062bc:	d002      	beq.n	80062c4 <std+0x48>
 80062be:	33d0      	adds	r3, #208	@ 0xd0
 80062c0:	429c      	cmp	r4, r3
 80062c2:	d105      	bne.n	80062d0 <std+0x54>
 80062c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062cc:	f000 ba46 	b.w	800675c <__retarget_lock_init_recursive>
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	bf00      	nop
 80062d4:	080065dd 	.word	0x080065dd
 80062d8:	080065ff 	.word	0x080065ff
 80062dc:	08006637 	.word	0x08006637
 80062e0:	0800665b 	.word	0x0800665b
 80062e4:	200003a4 	.word	0x200003a4

080062e8 <stdio_exit_handler>:
 80062e8:	4a02      	ldr	r2, [pc, #8]	@ (80062f4 <stdio_exit_handler+0xc>)
 80062ea:	4903      	ldr	r1, [pc, #12]	@ (80062f8 <stdio_exit_handler+0x10>)
 80062ec:	4803      	ldr	r0, [pc, #12]	@ (80062fc <stdio_exit_handler+0x14>)
 80062ee:	f000 b869 	b.w	80063c4 <_fwalk_sglue>
 80062f2:	bf00      	nop
 80062f4:	20000014 	.word	0x20000014
 80062f8:	080092b1 	.word	0x080092b1
 80062fc:	20000024 	.word	0x20000024

08006300 <cleanup_stdio>:
 8006300:	6841      	ldr	r1, [r0, #4]
 8006302:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <cleanup_stdio+0x34>)
 8006304:	4299      	cmp	r1, r3
 8006306:	b510      	push	{r4, lr}
 8006308:	4604      	mov	r4, r0
 800630a:	d001      	beq.n	8006310 <cleanup_stdio+0x10>
 800630c:	f002 ffd0 	bl	80092b0 <_fflush_r>
 8006310:	68a1      	ldr	r1, [r4, #8]
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <cleanup_stdio+0x38>)
 8006314:	4299      	cmp	r1, r3
 8006316:	d002      	beq.n	800631e <cleanup_stdio+0x1e>
 8006318:	4620      	mov	r0, r4
 800631a:	f002 ffc9 	bl	80092b0 <_fflush_r>
 800631e:	68e1      	ldr	r1, [r4, #12]
 8006320:	4b06      	ldr	r3, [pc, #24]	@ (800633c <cleanup_stdio+0x3c>)
 8006322:	4299      	cmp	r1, r3
 8006324:	d004      	beq.n	8006330 <cleanup_stdio+0x30>
 8006326:	4620      	mov	r0, r4
 8006328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800632c:	f002 bfc0 	b.w	80092b0 <_fflush_r>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	bf00      	nop
 8006334:	200003a4 	.word	0x200003a4
 8006338:	2000040c 	.word	0x2000040c
 800633c:	20000474 	.word	0x20000474

08006340 <global_stdio_init.part.0>:
 8006340:	b510      	push	{r4, lr}
 8006342:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <global_stdio_init.part.0+0x30>)
 8006344:	4c0b      	ldr	r4, [pc, #44]	@ (8006374 <global_stdio_init.part.0+0x34>)
 8006346:	4a0c      	ldr	r2, [pc, #48]	@ (8006378 <global_stdio_init.part.0+0x38>)
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	4620      	mov	r0, r4
 800634c:	2200      	movs	r2, #0
 800634e:	2104      	movs	r1, #4
 8006350:	f7ff ff94 	bl	800627c <std>
 8006354:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006358:	2201      	movs	r2, #1
 800635a:	2109      	movs	r1, #9
 800635c:	f7ff ff8e 	bl	800627c <std>
 8006360:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006364:	2202      	movs	r2, #2
 8006366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636a:	2112      	movs	r1, #18
 800636c:	f7ff bf86 	b.w	800627c <std>
 8006370:	200004dc 	.word	0x200004dc
 8006374:	200003a4 	.word	0x200003a4
 8006378:	080062e9 	.word	0x080062e9

0800637c <__sfp_lock_acquire>:
 800637c:	4801      	ldr	r0, [pc, #4]	@ (8006384 <__sfp_lock_acquire+0x8>)
 800637e:	f000 b9ee 	b.w	800675e <__retarget_lock_acquire_recursive>
 8006382:	bf00      	nop
 8006384:	200004e5 	.word	0x200004e5

08006388 <__sfp_lock_release>:
 8006388:	4801      	ldr	r0, [pc, #4]	@ (8006390 <__sfp_lock_release+0x8>)
 800638a:	f000 b9e9 	b.w	8006760 <__retarget_lock_release_recursive>
 800638e:	bf00      	nop
 8006390:	200004e5 	.word	0x200004e5

08006394 <__sinit>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	f7ff fff0 	bl	800637c <__sfp_lock_acquire>
 800639c:	6a23      	ldr	r3, [r4, #32]
 800639e:	b11b      	cbz	r3, 80063a8 <__sinit+0x14>
 80063a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a4:	f7ff bff0 	b.w	8006388 <__sfp_lock_release>
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <__sinit+0x28>)
 80063aa:	6223      	str	r3, [r4, #32]
 80063ac:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <__sinit+0x2c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f5      	bne.n	80063a0 <__sinit+0xc>
 80063b4:	f7ff ffc4 	bl	8006340 <global_stdio_init.part.0>
 80063b8:	e7f2      	b.n	80063a0 <__sinit+0xc>
 80063ba:	bf00      	nop
 80063bc:	08006301 	.word	0x08006301
 80063c0:	200004dc 	.word	0x200004dc

080063c4 <_fwalk_sglue>:
 80063c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c8:	4607      	mov	r7, r0
 80063ca:	4688      	mov	r8, r1
 80063cc:	4614      	mov	r4, r2
 80063ce:	2600      	movs	r6, #0
 80063d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063d4:	f1b9 0901 	subs.w	r9, r9, #1
 80063d8:	d505      	bpl.n	80063e6 <_fwalk_sglue+0x22>
 80063da:	6824      	ldr	r4, [r4, #0]
 80063dc:	2c00      	cmp	r4, #0
 80063de:	d1f7      	bne.n	80063d0 <_fwalk_sglue+0xc>
 80063e0:	4630      	mov	r0, r6
 80063e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d907      	bls.n	80063fc <_fwalk_sglue+0x38>
 80063ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063f0:	3301      	adds	r3, #1
 80063f2:	d003      	beq.n	80063fc <_fwalk_sglue+0x38>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c0      	blx	r8
 80063fa:	4306      	orrs	r6, r0
 80063fc:	3568      	adds	r5, #104	@ 0x68
 80063fe:	e7e9      	b.n	80063d4 <_fwalk_sglue+0x10>

08006400 <iprintf>:
 8006400:	b40f      	push	{r0, r1, r2, r3}
 8006402:	b507      	push	{r0, r1, r2, lr}
 8006404:	4906      	ldr	r1, [pc, #24]	@ (8006420 <iprintf+0x20>)
 8006406:	ab04      	add	r3, sp, #16
 8006408:	6808      	ldr	r0, [r1, #0]
 800640a:	f853 2b04 	ldr.w	r2, [r3], #4
 800640e:	6881      	ldr	r1, [r0, #8]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f002 fdb1 	bl	8008f78 <_vfiprintf_r>
 8006416:	b003      	add	sp, #12
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b004      	add	sp, #16
 800641e:	4770      	bx	lr
 8006420:	20000020 	.word	0x20000020

08006424 <setbuf>:
 8006424:	fab1 f281 	clz	r2, r1
 8006428:	0952      	lsrs	r2, r2, #5
 800642a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	f000 b800 	b.w	8006434 <setvbuf>

08006434 <setvbuf>:
 8006434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006438:	461d      	mov	r5, r3
 800643a:	4b57      	ldr	r3, [pc, #348]	@ (8006598 <setvbuf+0x164>)
 800643c:	681f      	ldr	r7, [r3, #0]
 800643e:	4604      	mov	r4, r0
 8006440:	460e      	mov	r6, r1
 8006442:	4690      	mov	r8, r2
 8006444:	b127      	cbz	r7, 8006450 <setvbuf+0x1c>
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	b913      	cbnz	r3, 8006450 <setvbuf+0x1c>
 800644a:	4638      	mov	r0, r7
 800644c:	f7ff ffa2 	bl	8006394 <__sinit>
 8006450:	f1b8 0f02 	cmp.w	r8, #2
 8006454:	d006      	beq.n	8006464 <setvbuf+0x30>
 8006456:	f1b8 0f01 	cmp.w	r8, #1
 800645a:	f200 809a 	bhi.w	8006592 <setvbuf+0x15e>
 800645e:	2d00      	cmp	r5, #0
 8006460:	f2c0 8097 	blt.w	8006592 <setvbuf+0x15e>
 8006464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <setvbuf+0x42>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <setvbuf+0x42>
 8006470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006472:	f000 f974 	bl	800675e <__retarget_lock_acquire_recursive>
 8006476:	4621      	mov	r1, r4
 8006478:	4638      	mov	r0, r7
 800647a:	f002 ff19 	bl	80092b0 <_fflush_r>
 800647e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006480:	b141      	cbz	r1, 8006494 <setvbuf+0x60>
 8006482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006486:	4299      	cmp	r1, r3
 8006488:	d002      	beq.n	8006490 <setvbuf+0x5c>
 800648a:	4638      	mov	r0, r7
 800648c:	f000 ffbc 	bl	8007408 <_free_r>
 8006490:	2300      	movs	r3, #0
 8006492:	6363      	str	r3, [r4, #52]	@ 0x34
 8006494:	2300      	movs	r3, #0
 8006496:	61a3      	str	r3, [r4, #24]
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	061b      	lsls	r3, r3, #24
 800649e:	d503      	bpl.n	80064a8 <setvbuf+0x74>
 80064a0:	6921      	ldr	r1, [r4, #16]
 80064a2:	4638      	mov	r0, r7
 80064a4:	f000 ffb0 	bl	8007408 <_free_r>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80064ae:	f023 0303 	bic.w	r3, r3, #3
 80064b2:	f1b8 0f02 	cmp.w	r8, #2
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	d061      	beq.n	800657e <setvbuf+0x14a>
 80064ba:	ab01      	add	r3, sp, #4
 80064bc:	466a      	mov	r2, sp
 80064be:	4621      	mov	r1, r4
 80064c0:	4638      	mov	r0, r7
 80064c2:	f002 ff1d 	bl	8009300 <__swhatbuf_r>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	4318      	orrs	r0, r3
 80064ca:	81a0      	strh	r0, [r4, #12]
 80064cc:	bb2d      	cbnz	r5, 800651a <setvbuf+0xe6>
 80064ce:	9d00      	ldr	r5, [sp, #0]
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 ffe3 	bl	800749c <malloc>
 80064d6:	4606      	mov	r6, r0
 80064d8:	2800      	cmp	r0, #0
 80064da:	d152      	bne.n	8006582 <setvbuf+0x14e>
 80064dc:	f8dd 9000 	ldr.w	r9, [sp]
 80064e0:	45a9      	cmp	r9, r5
 80064e2:	d140      	bne.n	8006566 <setvbuf+0x132>
 80064e4:	f04f 35ff 	mov.w	r5, #4294967295
 80064e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ec:	f043 0202 	orr.w	r2, r3, #2
 80064f0:	81a2      	strh	r2, [r4, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	60a2      	str	r2, [r4, #8]
 80064f6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	6122      	str	r2, [r4, #16]
 80064fe:	2201      	movs	r2, #1
 8006500:	6162      	str	r2, [r4, #20]
 8006502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006504:	07d6      	lsls	r6, r2, #31
 8006506:	d404      	bmi.n	8006512 <setvbuf+0xde>
 8006508:	0598      	lsls	r0, r3, #22
 800650a:	d402      	bmi.n	8006512 <setvbuf+0xde>
 800650c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800650e:	f000 f927 	bl	8006760 <__retarget_lock_release_recursive>
 8006512:	4628      	mov	r0, r5
 8006514:	b003      	add	sp, #12
 8006516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800651a:	2e00      	cmp	r6, #0
 800651c:	d0d8      	beq.n	80064d0 <setvbuf+0x9c>
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	b913      	cbnz	r3, 8006528 <setvbuf+0xf4>
 8006522:	4638      	mov	r0, r7
 8006524:	f7ff ff36 	bl	8006394 <__sinit>
 8006528:	f1b8 0f01 	cmp.w	r8, #1
 800652c:	bf08      	it	eq
 800652e:	89a3      	ldrheq	r3, [r4, #12]
 8006530:	6026      	str	r6, [r4, #0]
 8006532:	bf04      	itt	eq
 8006534:	f043 0301 	orreq.w	r3, r3, #1
 8006538:	81a3      	strheq	r3, [r4, #12]
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	f013 0208 	ands.w	r2, r3, #8
 8006542:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006546:	d01e      	beq.n	8006586 <setvbuf+0x152>
 8006548:	07d9      	lsls	r1, r3, #31
 800654a:	bf41      	itttt	mi
 800654c:	2200      	movmi	r2, #0
 800654e:	426d      	negmi	r5, r5
 8006550:	60a2      	strmi	r2, [r4, #8]
 8006552:	61a5      	strmi	r5, [r4, #24]
 8006554:	bf58      	it	pl
 8006556:	60a5      	strpl	r5, [r4, #8]
 8006558:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800655a:	07d2      	lsls	r2, r2, #31
 800655c:	d401      	bmi.n	8006562 <setvbuf+0x12e>
 800655e:	059b      	lsls	r3, r3, #22
 8006560:	d513      	bpl.n	800658a <setvbuf+0x156>
 8006562:	2500      	movs	r5, #0
 8006564:	e7d5      	b.n	8006512 <setvbuf+0xde>
 8006566:	4648      	mov	r0, r9
 8006568:	f000 ff98 	bl	800749c <malloc>
 800656c:	4606      	mov	r6, r0
 800656e:	2800      	cmp	r0, #0
 8006570:	d0b8      	beq.n	80064e4 <setvbuf+0xb0>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	464d      	mov	r5, r9
 800657c:	e7cf      	b.n	800651e <setvbuf+0xea>
 800657e:	2500      	movs	r5, #0
 8006580:	e7b2      	b.n	80064e8 <setvbuf+0xb4>
 8006582:	46a9      	mov	r9, r5
 8006584:	e7f5      	b.n	8006572 <setvbuf+0x13e>
 8006586:	60a2      	str	r2, [r4, #8]
 8006588:	e7e6      	b.n	8006558 <setvbuf+0x124>
 800658a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800658c:	f000 f8e8 	bl	8006760 <__retarget_lock_release_recursive>
 8006590:	e7e7      	b.n	8006562 <setvbuf+0x12e>
 8006592:	f04f 35ff 	mov.w	r5, #4294967295
 8006596:	e7bc      	b.n	8006512 <setvbuf+0xde>
 8006598:	20000020 	.word	0x20000020

0800659c <siprintf>:
 800659c:	b40e      	push	{r1, r2, r3}
 800659e:	b500      	push	{lr}
 80065a0:	b09c      	sub	sp, #112	@ 0x70
 80065a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80065a4:	9002      	str	r0, [sp, #8]
 80065a6:	9006      	str	r0, [sp, #24]
 80065a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065ac:	4809      	ldr	r0, [pc, #36]	@ (80065d4 <siprintf+0x38>)
 80065ae:	9107      	str	r1, [sp, #28]
 80065b0:	9104      	str	r1, [sp, #16]
 80065b2:	4909      	ldr	r1, [pc, #36]	@ (80065d8 <siprintf+0x3c>)
 80065b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b8:	9105      	str	r1, [sp, #20]
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	a902      	add	r1, sp, #8
 80065c0:	f002 fbb4 	bl	8008d2c <_svfiprintf_r>
 80065c4:	9b02      	ldr	r3, [sp, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	b01c      	add	sp, #112	@ 0x70
 80065cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d0:	b003      	add	sp, #12
 80065d2:	4770      	bx	lr
 80065d4:	20000020 	.word	0x20000020
 80065d8:	ffff0208 	.word	0xffff0208

080065dc <__sread>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	f000 f86c 	bl	80066c0 <_read_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	bfab      	itete	ge
 80065ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ee:	89a3      	ldrhlt	r3, [r4, #12]
 80065f0:	181b      	addge	r3, r3, r0
 80065f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065f6:	bfac      	ite	ge
 80065f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065fa:	81a3      	strhlt	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__swrite>:
 80065fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	461f      	mov	r7, r3
 8006604:	898b      	ldrh	r3, [r1, #12]
 8006606:	05db      	lsls	r3, r3, #23
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
 800660c:	4616      	mov	r6, r2
 800660e:	d505      	bpl.n	800661c <__swrite+0x1e>
 8006610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006614:	2302      	movs	r3, #2
 8006616:	2200      	movs	r2, #0
 8006618:	f000 f840 	bl	800669c <_lseek_r>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	4632      	mov	r2, r6
 800662a:	463b      	mov	r3, r7
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	f000 b857 	b.w	80066e4 <_write_r>

08006636 <__sseek>:
 8006636:	b510      	push	{r4, lr}
 8006638:	460c      	mov	r4, r1
 800663a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663e:	f000 f82d 	bl	800669c <_lseek_r>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	bf15      	itete	ne
 8006648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800664a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800664e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006652:	81a3      	strheq	r3, [r4, #12]
 8006654:	bf18      	it	ne
 8006656:	81a3      	strhne	r3, [r4, #12]
 8006658:	bd10      	pop	{r4, pc}

0800665a <__sclose>:
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 b80d 	b.w	800667c <_close_r>

08006662 <memset>:
 8006662:	4402      	add	r2, r0
 8006664:	4603      	mov	r3, r0
 8006666:	4293      	cmp	r3, r2
 8006668:	d100      	bne.n	800666c <memset+0xa>
 800666a:	4770      	bx	lr
 800666c:	f803 1b01 	strb.w	r1, [r3], #1
 8006670:	e7f9      	b.n	8006666 <memset+0x4>
	...

08006674 <_localeconv_r>:
 8006674:	4800      	ldr	r0, [pc, #0]	@ (8006678 <_localeconv_r+0x4>)
 8006676:	4770      	bx	lr
 8006678:	20000160 	.word	0x20000160

0800667c <_close_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d06      	ldr	r5, [pc, #24]	@ (8006698 <_close_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	f7fb fb6c 	bl	8001d64 <_close>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_close_r+0x1a>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_close_r+0x1a>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	200004e0 	.word	0x200004e0

0800669c <_lseek_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	@ (80066bc <_lseek_r+0x20>)
 80066a0:	4604      	mov	r4, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	4611      	mov	r1, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	602a      	str	r2, [r5, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f7fb fb81 	bl	8001db2 <_lseek>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_lseek_r+0x1e>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_lseek_r+0x1e>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	200004e0 	.word	0x200004e0

080066c0 <_read_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d07      	ldr	r5, [pc, #28]	@ (80066e0 <_read_r+0x20>)
 80066c4:	4604      	mov	r4, r0
 80066c6:	4608      	mov	r0, r1
 80066c8:	4611      	mov	r1, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	602a      	str	r2, [r5, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f7fb fb2b 	bl	8001d2a <_read>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_read_r+0x1e>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_read_r+0x1e>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	200004e0 	.word	0x200004e0

080066e4 <_write_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d07      	ldr	r5, [pc, #28]	@ (8006704 <_write_r+0x20>)
 80066e8:	4604      	mov	r4, r0
 80066ea:	4608      	mov	r0, r1
 80066ec:	4611      	mov	r1, r2
 80066ee:	2200      	movs	r2, #0
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f7fa ff80 	bl	80015f8 <_write>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_write_r+0x1e>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_write_r+0x1e>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	200004e0 	.word	0x200004e0

08006708 <__errno>:
 8006708:	4b01      	ldr	r3, [pc, #4]	@ (8006710 <__errno+0x8>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000020 	.word	0x20000020

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	@ (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	@ (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	@ (8006758 <__libc_init_array+0x44>)
 8006728:	f003 fb74 	bl	8009e14 <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	0800a2f0 	.word	0x0800a2f0
 8006750:	0800a2f0 	.word	0x0800a2f0
 8006754:	0800a2f0 	.word	0x0800a2f0
 8006758:	0800a2f4 	.word	0x0800a2f4

0800675c <__retarget_lock_init_recursive>:
 800675c:	4770      	bx	lr

0800675e <__retarget_lock_acquire_recursive>:
 800675e:	4770      	bx	lr

08006760 <__retarget_lock_release_recursive>:
 8006760:	4770      	bx	lr
	...

08006764 <nanf>:
 8006764:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800676c <nanf+0x8>
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	7fc00000 	.word	0x7fc00000

08006770 <quorem>:
 8006770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	6903      	ldr	r3, [r0, #16]
 8006776:	690c      	ldr	r4, [r1, #16]
 8006778:	42a3      	cmp	r3, r4
 800677a:	4607      	mov	r7, r0
 800677c:	db7e      	blt.n	800687c <quorem+0x10c>
 800677e:	3c01      	subs	r4, #1
 8006780:	f101 0814 	add.w	r8, r1, #20
 8006784:	00a3      	lsls	r3, r4, #2
 8006786:	f100 0514 	add.w	r5, r0, #20
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800679a:	3301      	adds	r3, #1
 800679c:	429a      	cmp	r2, r3
 800679e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80067a6:	d32e      	bcc.n	8006806 <quorem+0x96>
 80067a8:	f04f 0a00 	mov.w	sl, #0
 80067ac:	46c4      	mov	ip, r8
 80067ae:	46ae      	mov	lr, r5
 80067b0:	46d3      	mov	fp, sl
 80067b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067b6:	b298      	uxth	r0, r3
 80067b8:	fb06 a000 	mla	r0, r6, r0, sl
 80067bc:	0c02      	lsrs	r2, r0, #16
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	fb06 2303 	mla	r3, r6, r3, r2
 80067c4:	f8de 2000 	ldr.w	r2, [lr]
 80067c8:	b280      	uxth	r0, r0
 80067ca:	b292      	uxth	r2, r2
 80067cc:	1a12      	subs	r2, r2, r0
 80067ce:	445a      	add	r2, fp
 80067d0:	f8de 0000 	ldr.w	r0, [lr]
 80067d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067d8:	b29b      	uxth	r3, r3
 80067da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80067de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80067e2:	b292      	uxth	r2, r2
 80067e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067e8:	45e1      	cmp	r9, ip
 80067ea:	f84e 2b04 	str.w	r2, [lr], #4
 80067ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067f2:	d2de      	bcs.n	80067b2 <quorem+0x42>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	58eb      	ldr	r3, [r5, r3]
 80067f8:	b92b      	cbnz	r3, 8006806 <quorem+0x96>
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	429d      	cmp	r5, r3
 8006800:	461a      	mov	r2, r3
 8006802:	d32f      	bcc.n	8006864 <quorem+0xf4>
 8006804:	613c      	str	r4, [r7, #16]
 8006806:	4638      	mov	r0, r7
 8006808:	f001 f9c2 	bl	8007b90 <__mcmp>
 800680c:	2800      	cmp	r0, #0
 800680e:	db25      	blt.n	800685c <quorem+0xec>
 8006810:	4629      	mov	r1, r5
 8006812:	2000      	movs	r0, #0
 8006814:	f858 2b04 	ldr.w	r2, [r8], #4
 8006818:	f8d1 c000 	ldr.w	ip, [r1]
 800681c:	fa1f fe82 	uxth.w	lr, r2
 8006820:	fa1f f38c 	uxth.w	r3, ip
 8006824:	eba3 030e 	sub.w	r3, r3, lr
 8006828:	4403      	add	r3, r0
 800682a:	0c12      	lsrs	r2, r2, #16
 800682c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006830:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006834:	b29b      	uxth	r3, r3
 8006836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800683a:	45c1      	cmp	r9, r8
 800683c:	f841 3b04 	str.w	r3, [r1], #4
 8006840:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006844:	d2e6      	bcs.n	8006814 <quorem+0xa4>
 8006846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800684a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800684e:	b922      	cbnz	r2, 800685a <quorem+0xea>
 8006850:	3b04      	subs	r3, #4
 8006852:	429d      	cmp	r5, r3
 8006854:	461a      	mov	r2, r3
 8006856:	d30b      	bcc.n	8006870 <quorem+0x100>
 8006858:	613c      	str	r4, [r7, #16]
 800685a:	3601      	adds	r6, #1
 800685c:	4630      	mov	r0, r6
 800685e:	b003      	add	sp, #12
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	3b04      	subs	r3, #4
 8006868:	2a00      	cmp	r2, #0
 800686a:	d1cb      	bne.n	8006804 <quorem+0x94>
 800686c:	3c01      	subs	r4, #1
 800686e:	e7c6      	b.n	80067fe <quorem+0x8e>
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	3b04      	subs	r3, #4
 8006874:	2a00      	cmp	r2, #0
 8006876:	d1ef      	bne.n	8006858 <quorem+0xe8>
 8006878:	3c01      	subs	r4, #1
 800687a:	e7ea      	b.n	8006852 <quorem+0xe2>
 800687c:	2000      	movs	r0, #0
 800687e:	e7ee      	b.n	800685e <quorem+0xee>

08006880 <_dtoa_r>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	69c7      	ldr	r7, [r0, #28]
 8006886:	b099      	sub	sp, #100	@ 0x64
 8006888:	ed8d 0b02 	vstr	d0, [sp, #8]
 800688c:	ec55 4b10 	vmov	r4, r5, d0
 8006890:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006892:	9109      	str	r1, [sp, #36]	@ 0x24
 8006894:	4683      	mov	fp, r0
 8006896:	920e      	str	r2, [sp, #56]	@ 0x38
 8006898:	9313      	str	r3, [sp, #76]	@ 0x4c
 800689a:	b97f      	cbnz	r7, 80068bc <_dtoa_r+0x3c>
 800689c:	2010      	movs	r0, #16
 800689e:	f000 fdfd 	bl	800749c <malloc>
 80068a2:	4602      	mov	r2, r0
 80068a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80068a8:	b920      	cbnz	r0, 80068b4 <_dtoa_r+0x34>
 80068aa:	4ba7      	ldr	r3, [pc, #668]	@ (8006b48 <_dtoa_r+0x2c8>)
 80068ac:	21ef      	movs	r1, #239	@ 0xef
 80068ae:	48a7      	ldr	r0, [pc, #668]	@ (8006b4c <_dtoa_r+0x2cc>)
 80068b0:	f002 fe92 	bl	80095d8 <__assert_func>
 80068b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068b8:	6007      	str	r7, [r0, #0]
 80068ba:	60c7      	str	r7, [r0, #12]
 80068bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	b159      	cbz	r1, 80068dc <_dtoa_r+0x5c>
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	604a      	str	r2, [r1, #4]
 80068c8:	2301      	movs	r3, #1
 80068ca:	4093      	lsls	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
 80068ce:	4658      	mov	r0, fp
 80068d0:	f000 feda 	bl	8007688 <_Bfree>
 80068d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	1e2b      	subs	r3, r5, #0
 80068de:	bfb9      	ittee	lt
 80068e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80068e4:	9303      	strlt	r3, [sp, #12]
 80068e6:	2300      	movge	r3, #0
 80068e8:	6033      	strge	r3, [r6, #0]
 80068ea:	9f03      	ldr	r7, [sp, #12]
 80068ec:	4b98      	ldr	r3, [pc, #608]	@ (8006b50 <_dtoa_r+0x2d0>)
 80068ee:	bfbc      	itt	lt
 80068f0:	2201      	movlt	r2, #1
 80068f2:	6032      	strlt	r2, [r6, #0]
 80068f4:	43bb      	bics	r3, r7
 80068f6:	d112      	bne.n	800691e <_dtoa_r+0x9e>
 80068f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006904:	4323      	orrs	r3, r4
 8006906:	f000 854d 	beq.w	80073a4 <_dtoa_r+0xb24>
 800690a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800690c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006b64 <_dtoa_r+0x2e4>
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 854f 	beq.w	80073b4 <_dtoa_r+0xb34>
 8006916:	f10a 0303 	add.w	r3, sl, #3
 800691a:	f000 bd49 	b.w	80073b0 <_dtoa_r+0xb30>
 800691e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	ec51 0b17 	vmov	r0, r1, d7
 8006928:	2300      	movs	r3, #0
 800692a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800692e:	f7fa f8f3 	bl	8000b18 <__aeabi_dcmpeq>
 8006932:	4680      	mov	r8, r0
 8006934:	b158      	cbz	r0, 800694e <_dtoa_r+0xce>
 8006936:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006938:	2301      	movs	r3, #1
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800693e:	b113      	cbz	r3, 8006946 <_dtoa_r+0xc6>
 8006940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006942:	4b84      	ldr	r3, [pc, #528]	@ (8006b54 <_dtoa_r+0x2d4>)
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006b68 <_dtoa_r+0x2e8>
 800694a:	f000 bd33 	b.w	80073b4 <_dtoa_r+0xb34>
 800694e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006952:	aa16      	add	r2, sp, #88	@ 0x58
 8006954:	a917      	add	r1, sp, #92	@ 0x5c
 8006956:	4658      	mov	r0, fp
 8006958:	f001 fa3a 	bl	8007dd0 <__d2b>
 800695c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006960:	4681      	mov	r9, r0
 8006962:	2e00      	cmp	r6, #0
 8006964:	d077      	beq.n	8006a56 <_dtoa_r+0x1d6>
 8006966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006968:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800696c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006974:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006978:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800697c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006980:	4619      	mov	r1, r3
 8006982:	2200      	movs	r2, #0
 8006984:	4b74      	ldr	r3, [pc, #464]	@ (8006b58 <_dtoa_r+0x2d8>)
 8006986:	f7f9 fca7 	bl	80002d8 <__aeabi_dsub>
 800698a:	a369      	add	r3, pc, #420	@ (adr r3, 8006b30 <_dtoa_r+0x2b0>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fe5a 	bl	8000648 <__aeabi_dmul>
 8006994:	a368      	add	r3, pc, #416	@ (adr r3, 8006b38 <_dtoa_r+0x2b8>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f7f9 fc9f 	bl	80002dc <__adddf3>
 800699e:	4604      	mov	r4, r0
 80069a0:	4630      	mov	r0, r6
 80069a2:	460d      	mov	r5, r1
 80069a4:	f7f9 fde6 	bl	8000574 <__aeabi_i2d>
 80069a8:	a365      	add	r3, pc, #404	@ (adr r3, 8006b40 <_dtoa_r+0x2c0>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f7f9 fe4b 	bl	8000648 <__aeabi_dmul>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fc8f 	bl	80002dc <__adddf3>
 80069be:	4604      	mov	r4, r0
 80069c0:	460d      	mov	r5, r1
 80069c2:	f7fa f8f1 	bl	8000ba8 <__aeabi_d2iz>
 80069c6:	2200      	movs	r2, #0
 80069c8:	4607      	mov	r7, r0
 80069ca:	2300      	movs	r3, #0
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7fa f8ac 	bl	8000b2c <__aeabi_dcmplt>
 80069d4:	b140      	cbz	r0, 80069e8 <_dtoa_r+0x168>
 80069d6:	4638      	mov	r0, r7
 80069d8:	f7f9 fdcc 	bl	8000574 <__aeabi_i2d>
 80069dc:	4622      	mov	r2, r4
 80069de:	462b      	mov	r3, r5
 80069e0:	f7fa f89a 	bl	8000b18 <__aeabi_dcmpeq>
 80069e4:	b900      	cbnz	r0, 80069e8 <_dtoa_r+0x168>
 80069e6:	3f01      	subs	r7, #1
 80069e8:	2f16      	cmp	r7, #22
 80069ea:	d851      	bhi.n	8006a90 <_dtoa_r+0x210>
 80069ec:	4b5b      	ldr	r3, [pc, #364]	@ (8006b5c <_dtoa_r+0x2dc>)
 80069ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069fa:	f7fa f897 	bl	8000b2c <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d048      	beq.n	8006a94 <_dtoa_r+0x214>
 8006a02:	3f01      	subs	r7, #1
 8006a04:	2300      	movs	r3, #0
 8006a06:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a0a:	1b9b      	subs	r3, r3, r6
 8006a0c:	1e5a      	subs	r2, r3, #1
 8006a0e:	bf44      	itt	mi
 8006a10:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a14:	2300      	movmi	r3, #0
 8006a16:	9208      	str	r2, [sp, #32]
 8006a18:	bf54      	ite	pl
 8006a1a:	f04f 0800 	movpl.w	r8, #0
 8006a1e:	9308      	strmi	r3, [sp, #32]
 8006a20:	2f00      	cmp	r7, #0
 8006a22:	db39      	blt.n	8006a98 <_dtoa_r+0x218>
 8006a24:	9b08      	ldr	r3, [sp, #32]
 8006a26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a28:	443b      	add	r3, r7
 8006a2a:	9308      	str	r3, [sp, #32]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d864      	bhi.n	8006b00 <_dtoa_r+0x280>
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	bfc4      	itt	gt
 8006a3a:	3b04      	subgt	r3, #4
 8006a3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a40:	f1a3 0302 	sub.w	r3, r3, #2
 8006a44:	bfcc      	ite	gt
 8006a46:	2400      	movgt	r4, #0
 8006a48:	2401      	movle	r4, #1
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d863      	bhi.n	8006b16 <_dtoa_r+0x296>
 8006a4e:	e8df f003 	tbb	[pc, r3]
 8006a52:	372a      	.short	0x372a
 8006a54:	5535      	.short	0x5535
 8006a56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006a5a:	441e      	add	r6, r3
 8006a5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	bfc1      	itttt	gt
 8006a64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a68:	409f      	lslgt	r7, r3
 8006a6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a72:	bfd6      	itet	le
 8006a74:	f1c3 0320 	rsble	r3, r3, #32
 8006a78:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a7c:	fa04 f003 	lslle.w	r0, r4, r3
 8006a80:	f7f9 fd68 	bl	8000554 <__aeabi_ui2d>
 8006a84:	2201      	movs	r2, #1
 8006a86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a8a:	3e01      	subs	r6, #1
 8006a8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a8e:	e777      	b.n	8006980 <_dtoa_r+0x100>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7b8      	b.n	8006a06 <_dtoa_r+0x186>
 8006a94:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a96:	e7b7      	b.n	8006a08 <_dtoa_r+0x188>
 8006a98:	427b      	negs	r3, r7
 8006a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	eba8 0807 	sub.w	r8, r8, r7
 8006aa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006aa4:	e7c4      	b.n	8006a30 <_dtoa_r+0x1b0>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dc35      	bgt.n	8006b1c <_dtoa_r+0x29c>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	9307      	str	r3, [sp, #28]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006aba:	e00b      	b.n	8006ad4 <_dtoa_r+0x254>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e7f3      	b.n	8006aa8 <_dtoa_r+0x228>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	bfb8      	it	lt
 8006ad2:	2301      	movlt	r3, #1
 8006ad4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ad8:	2100      	movs	r1, #0
 8006ada:	2204      	movs	r2, #4
 8006adc:	f102 0514 	add.w	r5, r2, #20
 8006ae0:	429d      	cmp	r5, r3
 8006ae2:	d91f      	bls.n	8006b24 <_dtoa_r+0x2a4>
 8006ae4:	6041      	str	r1, [r0, #4]
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 fd8e 	bl	8007608 <_Balloc>
 8006aec:	4682      	mov	sl, r0
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d13c      	bne.n	8006b6c <_dtoa_r+0x2ec>
 8006af2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <_dtoa_r+0x2e0>)
 8006af4:	4602      	mov	r2, r0
 8006af6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006afa:	e6d8      	b.n	80068ae <_dtoa_r+0x2e>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e7e0      	b.n	8006ac2 <_dtoa_r+0x242>
 8006b00:	2401      	movs	r4, #1
 8006b02:	2300      	movs	r3, #0
 8006b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	2200      	movs	r2, #0
 8006b12:	2312      	movs	r3, #18
 8006b14:	e7d0      	b.n	8006ab8 <_dtoa_r+0x238>
 8006b16:	2301      	movs	r3, #1
 8006b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b1a:	e7f5      	b.n	8006b08 <_dtoa_r+0x288>
 8006b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	e7d7      	b.n	8006ad4 <_dtoa_r+0x254>
 8006b24:	3101      	adds	r1, #1
 8006b26:	0052      	lsls	r2, r2, #1
 8006b28:	e7d8      	b.n	8006adc <_dtoa_r+0x25c>
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w
 8006b30:	636f4361 	.word	0x636f4361
 8006b34:	3fd287a7 	.word	0x3fd287a7
 8006b38:	8b60c8b3 	.word	0x8b60c8b3
 8006b3c:	3fc68a28 	.word	0x3fc68a28
 8006b40:	509f79fb 	.word	0x509f79fb
 8006b44:	3fd34413 	.word	0x3fd34413
 8006b48:	08009efe 	.word	0x08009efe
 8006b4c:	08009f15 	.word	0x08009f15
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	08009ec9 	.word	0x08009ec9
 8006b58:	3ff80000 	.word	0x3ff80000
 8006b5c:	0800a010 	.word	0x0800a010
 8006b60:	08009f6d 	.word	0x08009f6d
 8006b64:	08009efa 	.word	0x08009efa
 8006b68:	08009ec8 	.word	0x08009ec8
 8006b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b70:	6018      	str	r0, [r3, #0]
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	2b0e      	cmp	r3, #14
 8006b76:	f200 80a4 	bhi.w	8006cc2 <_dtoa_r+0x442>
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	f000 80a1 	beq.w	8006cc2 <_dtoa_r+0x442>
 8006b80:	2f00      	cmp	r7, #0
 8006b82:	dd33      	ble.n	8006bec <_dtoa_r+0x36c>
 8006b84:	4bad      	ldr	r3, [pc, #692]	@ (8006e3c <_dtoa_r+0x5bc>)
 8006b86:	f007 020f 	and.w	r2, r7, #15
 8006b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b8e:	ed93 7b00 	vldr	d7, [r3]
 8006b92:	05f8      	lsls	r0, r7, #23
 8006b94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b9c:	d516      	bpl.n	8006bcc <_dtoa_r+0x34c>
 8006b9e:	4ba8      	ldr	r3, [pc, #672]	@ (8006e40 <_dtoa_r+0x5c0>)
 8006ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ba8:	f7f9 fe78 	bl	800089c <__aeabi_ddiv>
 8006bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb0:	f004 040f 	and.w	r4, r4, #15
 8006bb4:	2603      	movs	r6, #3
 8006bb6:	4da2      	ldr	r5, [pc, #648]	@ (8006e40 <_dtoa_r+0x5c0>)
 8006bb8:	b954      	cbnz	r4, 8006bd0 <_dtoa_r+0x350>
 8006bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	f7f9 fe6b 	bl	800089c <__aeabi_ddiv>
 8006bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bca:	e028      	b.n	8006c1e <_dtoa_r+0x39e>
 8006bcc:	2602      	movs	r6, #2
 8006bce:	e7f2      	b.n	8006bb6 <_dtoa_r+0x336>
 8006bd0:	07e1      	lsls	r1, r4, #31
 8006bd2:	d508      	bpl.n	8006be6 <_dtoa_r+0x366>
 8006bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bdc:	f7f9 fd34 	bl	8000648 <__aeabi_dmul>
 8006be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be4:	3601      	adds	r6, #1
 8006be6:	1064      	asrs	r4, r4, #1
 8006be8:	3508      	adds	r5, #8
 8006bea:	e7e5      	b.n	8006bb8 <_dtoa_r+0x338>
 8006bec:	f000 80d2 	beq.w	8006d94 <_dtoa_r+0x514>
 8006bf0:	427c      	negs	r4, r7
 8006bf2:	4b92      	ldr	r3, [pc, #584]	@ (8006e3c <_dtoa_r+0x5bc>)
 8006bf4:	4d92      	ldr	r5, [pc, #584]	@ (8006e40 <_dtoa_r+0x5c0>)
 8006bf6:	f004 020f 	and.w	r2, r4, #15
 8006bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c06:	f7f9 fd1f 	bl	8000648 <__aeabi_dmul>
 8006c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c0e:	1124      	asrs	r4, r4, #4
 8006c10:	2300      	movs	r3, #0
 8006c12:	2602      	movs	r6, #2
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	f040 80b2 	bne.w	8006d7e <_dtoa_r+0x4fe>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1d3      	bne.n	8006bc6 <_dtoa_r+0x346>
 8006c1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80b7 	beq.w	8006d98 <_dtoa_r+0x518>
 8006c2a:	4b86      	ldr	r3, [pc, #536]	@ (8006e44 <_dtoa_r+0x5c4>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 ff7b 	bl	8000b2c <__aeabi_dcmplt>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f000 80ae 	beq.w	8006d98 <_dtoa_r+0x518>
 8006c3c:	9b07      	ldr	r3, [sp, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80aa 	beq.w	8006d98 <_dtoa_r+0x518>
 8006c44:	9b00      	ldr	r3, [sp, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dd37      	ble.n	8006cba <_dtoa_r+0x43a>
 8006c4a:	1e7b      	subs	r3, r7, #1
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4b7d      	ldr	r3, [pc, #500]	@ (8006e48 <_dtoa_r+0x5c8>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 fcf7 	bl	8000648 <__aeabi_dmul>
 8006c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5e:	9c00      	ldr	r4, [sp, #0]
 8006c60:	3601      	adds	r6, #1
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7f9 fc86 	bl	8000574 <__aeabi_i2d>
 8006c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c6c:	f7f9 fcec 	bl	8000648 <__aeabi_dmul>
 8006c70:	4b76      	ldr	r3, [pc, #472]	@ (8006e4c <_dtoa_r+0x5cc>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7f9 fb32 	bl	80002dc <__adddf3>
 8006c78:	4605      	mov	r5, r0
 8006c7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c7e:	2c00      	cmp	r4, #0
 8006c80:	f040 808d 	bne.w	8006d9e <_dtoa_r+0x51e>
 8006c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c88:	4b71      	ldr	r3, [pc, #452]	@ (8006e50 <_dtoa_r+0x5d0>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f7f9 fb24 	bl	80002d8 <__aeabi_dsub>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c98:	462a      	mov	r2, r5
 8006c9a:	4633      	mov	r3, r6
 8006c9c:	f7f9 ff64 	bl	8000b68 <__aeabi_dcmpgt>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f040 828b 	bne.w	80071bc <_dtoa_r+0x93c>
 8006ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006caa:	462a      	mov	r2, r5
 8006cac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cb0:	f7f9 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f040 8128 	bne.w	8006f0a <_dtoa_r+0x68a>
 8006cba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006cbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006cc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f2c0 815a 	blt.w	8006f7e <_dtoa_r+0x6fe>
 8006cca:	2f0e      	cmp	r7, #14
 8006ccc:	f300 8157 	bgt.w	8006f7e <_dtoa_r+0x6fe>
 8006cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e3c <_dtoa_r+0x5bc>)
 8006cd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cd6:	ed93 7b00 	vldr	d7, [r3]
 8006cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	ed8d 7b00 	vstr	d7, [sp]
 8006ce2:	da03      	bge.n	8006cec <_dtoa_r+0x46c>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f340 8101 	ble.w	8006eee <_dtoa_r+0x66e>
 8006cec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cf0:	4656      	mov	r6, sl
 8006cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fdcf 	bl	800089c <__aeabi_ddiv>
 8006cfe:	f7f9 ff53 	bl	8000ba8 <__aeabi_d2iz>
 8006d02:	4680      	mov	r8, r0
 8006d04:	f7f9 fc36 	bl	8000574 <__aeabi_i2d>
 8006d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d0c:	f7f9 fc9c 	bl	8000648 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d1c:	f7f9 fadc 	bl	80002d8 <__aeabi_dsub>
 8006d20:	f806 4b01 	strb.w	r4, [r6], #1
 8006d24:	9d07      	ldr	r5, [sp, #28]
 8006d26:	eba6 040a 	sub.w	r4, r6, sl
 8006d2a:	42a5      	cmp	r5, r4
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	f040 8117 	bne.w	8006f62 <_dtoa_r+0x6e2>
 8006d34:	f7f9 fad2 	bl	80002dc <__adddf3>
 8006d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	460d      	mov	r5, r1
 8006d40:	f7f9 ff12 	bl	8000b68 <__aeabi_dcmpgt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 80f9 	bne.w	8006f3c <_dtoa_r+0x6bc>
 8006d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fee1 	bl	8000b18 <__aeabi_dcmpeq>
 8006d56:	b118      	cbz	r0, 8006d60 <_dtoa_r+0x4e0>
 8006d58:	f018 0f01 	tst.w	r8, #1
 8006d5c:	f040 80ee 	bne.w	8006f3c <_dtoa_r+0x6bc>
 8006d60:	4649      	mov	r1, r9
 8006d62:	4658      	mov	r0, fp
 8006d64:	f000 fc90 	bl	8007688 <_Bfree>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	7033      	strb	r3, [r6, #0]
 8006d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d6e:	3701      	adds	r7, #1
 8006d70:	601f      	str	r7, [r3, #0]
 8006d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 831d 	beq.w	80073b4 <_dtoa_r+0xb34>
 8006d7a:	601e      	str	r6, [r3, #0]
 8006d7c:	e31a      	b.n	80073b4 <_dtoa_r+0xb34>
 8006d7e:	07e2      	lsls	r2, r4, #31
 8006d80:	d505      	bpl.n	8006d8e <_dtoa_r+0x50e>
 8006d82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d86:	f7f9 fc5f 	bl	8000648 <__aeabi_dmul>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	1064      	asrs	r4, r4, #1
 8006d90:	3508      	adds	r5, #8
 8006d92:	e73f      	b.n	8006c14 <_dtoa_r+0x394>
 8006d94:	2602      	movs	r6, #2
 8006d96:	e742      	b.n	8006c1e <_dtoa_r+0x39e>
 8006d98:	9c07      	ldr	r4, [sp, #28]
 8006d9a:	9704      	str	r7, [sp, #16]
 8006d9c:	e761      	b.n	8006c62 <_dtoa_r+0x3e2>
 8006d9e:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <_dtoa_r+0x5bc>)
 8006da0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006da2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006da6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006daa:	4454      	add	r4, sl
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d053      	beq.n	8006e58 <_dtoa_r+0x5d8>
 8006db0:	4928      	ldr	r1, [pc, #160]	@ (8006e54 <_dtoa_r+0x5d4>)
 8006db2:	2000      	movs	r0, #0
 8006db4:	f7f9 fd72 	bl	800089c <__aeabi_ddiv>
 8006db8:	4633      	mov	r3, r6
 8006dba:	462a      	mov	r2, r5
 8006dbc:	f7f9 fa8c 	bl	80002d8 <__aeabi_dsub>
 8006dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006dc4:	4656      	mov	r6, sl
 8006dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dca:	f7f9 feed 	bl	8000ba8 <__aeabi_d2iz>
 8006dce:	4605      	mov	r5, r0
 8006dd0:	f7f9 fbd0 	bl	8000574 <__aeabi_i2d>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ddc:	f7f9 fa7c 	bl	80002d8 <__aeabi_dsub>
 8006de0:	3530      	adds	r5, #48	@ 0x30
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dea:	f806 5b01 	strb.w	r5, [r6], #1
 8006dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006df2:	f7f9 fe9b 	bl	8000b2c <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d171      	bne.n	8006ede <_dtoa_r+0x65e>
 8006dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dfe:	4911      	ldr	r1, [pc, #68]	@ (8006e44 <_dtoa_r+0x5c4>)
 8006e00:	2000      	movs	r0, #0
 8006e02:	f7f9 fa69 	bl	80002d8 <__aeabi_dsub>
 8006e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e0a:	f7f9 fe8f 	bl	8000b2c <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f040 8095 	bne.w	8006f3e <_dtoa_r+0x6be>
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	f43f af50 	beq.w	8006cba <_dtoa_r+0x43a>
 8006e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <_dtoa_r+0x5c8>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	f7f9 fc11 	bl	8000648 <__aeabi_dmul>
 8006e26:	4b08      	ldr	r3, [pc, #32]	@ (8006e48 <_dtoa_r+0x5c8>)
 8006e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fc09 	bl	8000648 <__aeabi_dmul>
 8006e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3a:	e7c4      	b.n	8006dc6 <_dtoa_r+0x546>
 8006e3c:	0800a010 	.word	0x0800a010
 8006e40:	08009fe8 	.word	0x08009fe8
 8006e44:	3ff00000 	.word	0x3ff00000
 8006e48:	40240000 	.word	0x40240000
 8006e4c:	401c0000 	.word	0x401c0000
 8006e50:	40140000 	.word	0x40140000
 8006e54:	3fe00000 	.word	0x3fe00000
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7f9 fbf4 	bl	8000648 <__aeabi_dmul>
 8006e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e64:	9415      	str	r4, [sp, #84]	@ 0x54
 8006e66:	4656      	mov	r6, sl
 8006e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6c:	f7f9 fe9c 	bl	8000ba8 <__aeabi_d2iz>
 8006e70:	4605      	mov	r5, r0
 8006e72:	f7f9 fb7f 	bl	8000574 <__aeabi_i2d>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7e:	f7f9 fa2b 	bl	80002d8 <__aeabi_dsub>
 8006e82:	3530      	adds	r5, #48	@ 0x30
 8006e84:	f806 5b01 	strb.w	r5, [r6], #1
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	d124      	bne.n	8006ee2 <_dtoa_r+0x662>
 8006e98:	4bac      	ldr	r3, [pc, #688]	@ (800714c <_dtoa_r+0x8cc>)
 8006e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e9e:	f7f9 fa1d 	bl	80002dc <__adddf3>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fe5d 	bl	8000b68 <__aeabi_dcmpgt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d145      	bne.n	8006f3e <_dtoa_r+0x6be>
 8006eb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eb6:	49a5      	ldr	r1, [pc, #660]	@ (800714c <_dtoa_r+0x8cc>)
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7f9 fa0d 	bl	80002d8 <__aeabi_dsub>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec6:	f7f9 fe31 	bl	8000b2c <__aeabi_dcmplt>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	f43f aef5 	beq.w	8006cba <_dtoa_r+0x43a>
 8006ed0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006ed2:	1e73      	subs	r3, r6, #1
 8006ed4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ed6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006eda:	2b30      	cmp	r3, #48	@ 0x30
 8006edc:	d0f8      	beq.n	8006ed0 <_dtoa_r+0x650>
 8006ede:	9f04      	ldr	r7, [sp, #16]
 8006ee0:	e73e      	b.n	8006d60 <_dtoa_r+0x4e0>
 8006ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8007150 <_dtoa_r+0x8d0>)
 8006ee4:	f7f9 fbb0 	bl	8000648 <__aeabi_dmul>
 8006ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eec:	e7bc      	b.n	8006e68 <_dtoa_r+0x5e8>
 8006eee:	d10c      	bne.n	8006f0a <_dtoa_r+0x68a>
 8006ef0:	4b98      	ldr	r3, [pc, #608]	@ (8007154 <_dtoa_r+0x8d4>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef8:	f7f9 fba6 	bl	8000648 <__aeabi_dmul>
 8006efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f00:	f7f9 fe28 	bl	8000b54 <__aeabi_dcmpge>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f000 8157 	beq.w	80071b8 <_dtoa_r+0x938>
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	4625      	mov	r5, r4
 8006f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f10:	43db      	mvns	r3, r3
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	4656      	mov	r6, sl
 8006f16:	2700      	movs	r7, #0
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4658      	mov	r0, fp
 8006f1c:	f000 fbb4 	bl	8007688 <_Bfree>
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d0dc      	beq.n	8006ede <_dtoa_r+0x65e>
 8006f24:	b12f      	cbz	r7, 8006f32 <_dtoa_r+0x6b2>
 8006f26:	42af      	cmp	r7, r5
 8006f28:	d003      	beq.n	8006f32 <_dtoa_r+0x6b2>
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	4658      	mov	r0, fp
 8006f2e:	f000 fbab 	bl	8007688 <_Bfree>
 8006f32:	4629      	mov	r1, r5
 8006f34:	4658      	mov	r0, fp
 8006f36:	f000 fba7 	bl	8007688 <_Bfree>
 8006f3a:	e7d0      	b.n	8006ede <_dtoa_r+0x65e>
 8006f3c:	9704      	str	r7, [sp, #16]
 8006f3e:	4633      	mov	r3, r6
 8006f40:	461e      	mov	r6, r3
 8006f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f46:	2a39      	cmp	r2, #57	@ 0x39
 8006f48:	d107      	bne.n	8006f5a <_dtoa_r+0x6da>
 8006f4a:	459a      	cmp	sl, r3
 8006f4c:	d1f8      	bne.n	8006f40 <_dtoa_r+0x6c0>
 8006f4e:	9a04      	ldr	r2, [sp, #16]
 8006f50:	3201      	adds	r2, #1
 8006f52:	9204      	str	r2, [sp, #16]
 8006f54:	2230      	movs	r2, #48	@ 0x30
 8006f56:	f88a 2000 	strb.w	r2, [sl]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e7bd      	b.n	8006ede <_dtoa_r+0x65e>
 8006f62:	4b7b      	ldr	r3, [pc, #492]	@ (8007150 <_dtoa_r+0x8d0>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	f7f9 fb6f 	bl	8000648 <__aeabi_dmul>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	460d      	mov	r5, r1
 8006f72:	f7f9 fdd1 	bl	8000b18 <__aeabi_dcmpeq>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f aebb 	beq.w	8006cf2 <_dtoa_r+0x472>
 8006f7c:	e6f0      	b.n	8006d60 <_dtoa_r+0x4e0>
 8006f7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	f000 80db 	beq.w	800713c <_dtoa_r+0x8bc>
 8006f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f88:	2a01      	cmp	r2, #1
 8006f8a:	f300 80bf 	bgt.w	800710c <_dtoa_r+0x88c>
 8006f8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	f000 80b7 	beq.w	8007104 <_dtoa_r+0x884>
 8006f96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f9c:	4646      	mov	r6, r8
 8006f9e:	9a08      	ldr	r2, [sp, #32]
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	441a      	add	r2, r3
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	4498      	add	r8, r3
 8006fa8:	9208      	str	r2, [sp, #32]
 8006faa:	f000 fc6b 	bl	8007884 <__i2b>
 8006fae:	4605      	mov	r5, r0
 8006fb0:	b15e      	cbz	r6, 8006fca <_dtoa_r+0x74a>
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd08      	ble.n	8006fca <_dtoa_r+0x74a>
 8006fb8:	42b3      	cmp	r3, r6
 8006fba:	9a08      	ldr	r2, [sp, #32]
 8006fbc:	bfa8      	it	ge
 8006fbe:	4633      	movge	r3, r6
 8006fc0:	eba8 0803 	sub.w	r8, r8, r3
 8006fc4:	1af6      	subs	r6, r6, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	9308      	str	r3, [sp, #32]
 8006fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fcc:	b1f3      	cbz	r3, 800700c <_dtoa_r+0x78c>
 8006fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80b7 	beq.w	8007144 <_dtoa_r+0x8c4>
 8006fd6:	b18c      	cbz	r4, 8006ffc <_dtoa_r+0x77c>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4622      	mov	r2, r4
 8006fdc:	4658      	mov	r0, fp
 8006fde:	f000 fd11 	bl	8007a04 <__pow5mult>
 8006fe2:	464a      	mov	r2, r9
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	4658      	mov	r0, fp
 8006fea:	f000 fc61 	bl	80078b0 <__multiply>
 8006fee:	4649      	mov	r1, r9
 8006ff0:	9004      	str	r0, [sp, #16]
 8006ff2:	4658      	mov	r0, fp
 8006ff4:	f000 fb48 	bl	8007688 <_Bfree>
 8006ff8:	9b04      	ldr	r3, [sp, #16]
 8006ffa:	4699      	mov	r9, r3
 8006ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffe:	1b1a      	subs	r2, r3, r4
 8007000:	d004      	beq.n	800700c <_dtoa_r+0x78c>
 8007002:	4649      	mov	r1, r9
 8007004:	4658      	mov	r0, fp
 8007006:	f000 fcfd 	bl	8007a04 <__pow5mult>
 800700a:	4681      	mov	r9, r0
 800700c:	2101      	movs	r1, #1
 800700e:	4658      	mov	r0, fp
 8007010:	f000 fc38 	bl	8007884 <__i2b>
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	4604      	mov	r4, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 81cf 	beq.w	80073bc <_dtoa_r+0xb3c>
 800701e:	461a      	mov	r2, r3
 8007020:	4601      	mov	r1, r0
 8007022:	4658      	mov	r0, fp
 8007024:	f000 fcee 	bl	8007a04 <__pow5mult>
 8007028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800702a:	2b01      	cmp	r3, #1
 800702c:	4604      	mov	r4, r0
 800702e:	f300 8095 	bgt.w	800715c <_dtoa_r+0x8dc>
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 8087 	bne.w	8007148 <_dtoa_r+0x8c8>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 8089 	bne.w	8007158 <_dtoa_r+0x8d8>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800704c:	0d1b      	lsrs	r3, r3, #20
 800704e:	051b      	lsls	r3, r3, #20
 8007050:	b12b      	cbz	r3, 800705e <_dtoa_r+0x7de>
 8007052:	9b08      	ldr	r3, [sp, #32]
 8007054:	3301      	adds	r3, #1
 8007056:	9308      	str	r3, [sp, #32]
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	2301      	movs	r3, #1
 800705e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 81b0 	beq.w	80073c8 <_dtoa_r+0xb48>
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800706e:	6918      	ldr	r0, [r3, #16]
 8007070:	f000 fbbc 	bl	80077ec <__hi0bits>
 8007074:	f1c0 0020 	rsb	r0, r0, #32
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	4418      	add	r0, r3
 800707c:	f010 001f 	ands.w	r0, r0, #31
 8007080:	d077      	beq.n	8007172 <_dtoa_r+0x8f2>
 8007082:	f1c0 0320 	rsb	r3, r0, #32
 8007086:	2b04      	cmp	r3, #4
 8007088:	dd6b      	ble.n	8007162 <_dtoa_r+0x8e2>
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	f1c0 001c 	rsb	r0, r0, #28
 8007090:	4403      	add	r3, r0
 8007092:	4480      	add	r8, r0
 8007094:	4406      	add	r6, r0
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	f1b8 0f00 	cmp.w	r8, #0
 800709c:	dd05      	ble.n	80070aa <_dtoa_r+0x82a>
 800709e:	4649      	mov	r1, r9
 80070a0:	4642      	mov	r2, r8
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fd08 	bl	8007ab8 <__lshift>
 80070a8:	4681      	mov	r9, r0
 80070aa:	9b08      	ldr	r3, [sp, #32]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dd05      	ble.n	80070bc <_dtoa_r+0x83c>
 80070b0:	4621      	mov	r1, r4
 80070b2:	461a      	mov	r2, r3
 80070b4:	4658      	mov	r0, fp
 80070b6:	f000 fcff 	bl	8007ab8 <__lshift>
 80070ba:	4604      	mov	r4, r0
 80070bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d059      	beq.n	8007176 <_dtoa_r+0x8f6>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4648      	mov	r0, r9
 80070c6:	f000 fd63 	bl	8007b90 <__mcmp>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	da53      	bge.n	8007176 <_dtoa_r+0x8f6>
 80070ce:	1e7b      	subs	r3, r7, #1
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	4649      	mov	r1, r9
 80070d4:	2300      	movs	r3, #0
 80070d6:	220a      	movs	r2, #10
 80070d8:	4658      	mov	r0, fp
 80070da:	f000 faf7 	bl	80076cc <__multadd>
 80070de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070e0:	4681      	mov	r9, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8172 	beq.w	80073cc <_dtoa_r+0xb4c>
 80070e8:	2300      	movs	r3, #0
 80070ea:	4629      	mov	r1, r5
 80070ec:	220a      	movs	r2, #10
 80070ee:	4658      	mov	r0, fp
 80070f0:	f000 faec 	bl	80076cc <__multadd>
 80070f4:	9b00      	ldr	r3, [sp, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	4605      	mov	r5, r0
 80070fa:	dc67      	bgt.n	80071cc <_dtoa_r+0x94c>
 80070fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fe:	2b02      	cmp	r3, #2
 8007100:	dc41      	bgt.n	8007186 <_dtoa_r+0x906>
 8007102:	e063      	b.n	80071cc <_dtoa_r+0x94c>
 8007104:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007106:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800710a:	e746      	b.n	8006f9a <_dtoa_r+0x71a>
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	1e5c      	subs	r4, r3, #1
 8007110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007112:	42a3      	cmp	r3, r4
 8007114:	bfbf      	itttt	lt
 8007116:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007118:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800711a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800711c:	1ae3      	sublt	r3, r4, r3
 800711e:	bfb4      	ite	lt
 8007120:	18d2      	addlt	r2, r2, r3
 8007122:	1b1c      	subge	r4, r3, r4
 8007124:	9b07      	ldr	r3, [sp, #28]
 8007126:	bfbc      	itt	lt
 8007128:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800712a:	2400      	movlt	r4, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	bfb5      	itete	lt
 8007130:	eba8 0603 	sublt.w	r6, r8, r3
 8007134:	9b07      	ldrge	r3, [sp, #28]
 8007136:	2300      	movlt	r3, #0
 8007138:	4646      	movge	r6, r8
 800713a:	e730      	b.n	8006f9e <_dtoa_r+0x71e>
 800713c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800713e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007140:	4646      	mov	r6, r8
 8007142:	e735      	b.n	8006fb0 <_dtoa_r+0x730>
 8007144:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007146:	e75c      	b.n	8007002 <_dtoa_r+0x782>
 8007148:	2300      	movs	r3, #0
 800714a:	e788      	b.n	800705e <_dtoa_r+0x7de>
 800714c:	3fe00000 	.word	0x3fe00000
 8007150:	40240000 	.word	0x40240000
 8007154:	40140000 	.word	0x40140000
 8007158:	9b02      	ldr	r3, [sp, #8]
 800715a:	e780      	b.n	800705e <_dtoa_r+0x7de>
 800715c:	2300      	movs	r3, #0
 800715e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007160:	e782      	b.n	8007068 <_dtoa_r+0x7e8>
 8007162:	d099      	beq.n	8007098 <_dtoa_r+0x818>
 8007164:	9a08      	ldr	r2, [sp, #32]
 8007166:	331c      	adds	r3, #28
 8007168:	441a      	add	r2, r3
 800716a:	4498      	add	r8, r3
 800716c:	441e      	add	r6, r3
 800716e:	9208      	str	r2, [sp, #32]
 8007170:	e792      	b.n	8007098 <_dtoa_r+0x818>
 8007172:	4603      	mov	r3, r0
 8007174:	e7f6      	b.n	8007164 <_dtoa_r+0x8e4>
 8007176:	9b07      	ldr	r3, [sp, #28]
 8007178:	9704      	str	r7, [sp, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc20      	bgt.n	80071c0 <_dtoa_r+0x940>
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007182:	2b02      	cmp	r3, #2
 8007184:	dd1e      	ble.n	80071c4 <_dtoa_r+0x944>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	f47f aec0 	bne.w	8006f0e <_dtoa_r+0x68e>
 800718e:	4621      	mov	r1, r4
 8007190:	2205      	movs	r2, #5
 8007192:	4658      	mov	r0, fp
 8007194:	f000 fa9a 	bl	80076cc <__multadd>
 8007198:	4601      	mov	r1, r0
 800719a:	4604      	mov	r4, r0
 800719c:	4648      	mov	r0, r9
 800719e:	f000 fcf7 	bl	8007b90 <__mcmp>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	f77f aeb3 	ble.w	8006f0e <_dtoa_r+0x68e>
 80071a8:	4656      	mov	r6, sl
 80071aa:	2331      	movs	r3, #49	@ 0x31
 80071ac:	f806 3b01 	strb.w	r3, [r6], #1
 80071b0:	9b04      	ldr	r3, [sp, #16]
 80071b2:	3301      	adds	r3, #1
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	e6ae      	b.n	8006f16 <_dtoa_r+0x696>
 80071b8:	9c07      	ldr	r4, [sp, #28]
 80071ba:	9704      	str	r7, [sp, #16]
 80071bc:	4625      	mov	r5, r4
 80071be:	e7f3      	b.n	80071a8 <_dtoa_r+0x928>
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8104 	beq.w	80073d4 <_dtoa_r+0xb54>
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	dd05      	ble.n	80071dc <_dtoa_r+0x95c>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4632      	mov	r2, r6
 80071d4:	4658      	mov	r0, fp
 80071d6:	f000 fc6f 	bl	8007ab8 <__lshift>
 80071da:	4605      	mov	r5, r0
 80071dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d05a      	beq.n	8007298 <_dtoa_r+0xa18>
 80071e2:	6869      	ldr	r1, [r5, #4]
 80071e4:	4658      	mov	r0, fp
 80071e6:	f000 fa0f 	bl	8007608 <_Balloc>
 80071ea:	4606      	mov	r6, r0
 80071ec:	b928      	cbnz	r0, 80071fa <_dtoa_r+0x97a>
 80071ee:	4b84      	ldr	r3, [pc, #528]	@ (8007400 <_dtoa_r+0xb80>)
 80071f0:	4602      	mov	r2, r0
 80071f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071f6:	f7ff bb5a 	b.w	80068ae <_dtoa_r+0x2e>
 80071fa:	692a      	ldr	r2, [r5, #16]
 80071fc:	3202      	adds	r2, #2
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	f105 010c 	add.w	r1, r5, #12
 8007204:	300c      	adds	r0, #12
 8007206:	f002 f9cf 	bl	80095a8 <memcpy>
 800720a:	2201      	movs	r2, #1
 800720c:	4631      	mov	r1, r6
 800720e:	4658      	mov	r0, fp
 8007210:	f000 fc52 	bl	8007ab8 <__lshift>
 8007214:	f10a 0301 	add.w	r3, sl, #1
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	9b00      	ldr	r3, [sp, #0]
 800721c:	4453      	add	r3, sl
 800721e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007220:	9b02      	ldr	r3, [sp, #8]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	462f      	mov	r7, r5
 8007228:	930a      	str	r3, [sp, #40]	@ 0x28
 800722a:	4605      	mov	r5, r0
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	4621      	mov	r1, r4
 8007230:	3b01      	subs	r3, #1
 8007232:	4648      	mov	r0, r9
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	f7ff fa9b 	bl	8006770 <quorem>
 800723a:	4639      	mov	r1, r7
 800723c:	9002      	str	r0, [sp, #8]
 800723e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007242:	4648      	mov	r0, r9
 8007244:	f000 fca4 	bl	8007b90 <__mcmp>
 8007248:	462a      	mov	r2, r5
 800724a:	9008      	str	r0, [sp, #32]
 800724c:	4621      	mov	r1, r4
 800724e:	4658      	mov	r0, fp
 8007250:	f000 fcba 	bl	8007bc8 <__mdiff>
 8007254:	68c2      	ldr	r2, [r0, #12]
 8007256:	4606      	mov	r6, r0
 8007258:	bb02      	cbnz	r2, 800729c <_dtoa_r+0xa1c>
 800725a:	4601      	mov	r1, r0
 800725c:	4648      	mov	r0, r9
 800725e:	f000 fc97 	bl	8007b90 <__mcmp>
 8007262:	4602      	mov	r2, r0
 8007264:	4631      	mov	r1, r6
 8007266:	4658      	mov	r0, fp
 8007268:	920e      	str	r2, [sp, #56]	@ 0x38
 800726a:	f000 fa0d 	bl	8007688 <_Bfree>
 800726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007272:	9e07      	ldr	r6, [sp, #28]
 8007274:	ea43 0102 	orr.w	r1, r3, r2
 8007278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800727a:	4319      	orrs	r1, r3
 800727c:	d110      	bne.n	80072a0 <_dtoa_r+0xa20>
 800727e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007282:	d029      	beq.n	80072d8 <_dtoa_r+0xa58>
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	dd02      	ble.n	8007290 <_dtoa_r+0xa10>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	f883 8000 	strb.w	r8, [r3]
 8007296:	e63f      	b.n	8006f18 <_dtoa_r+0x698>
 8007298:	4628      	mov	r0, r5
 800729a:	e7bb      	b.n	8007214 <_dtoa_r+0x994>
 800729c:	2201      	movs	r2, #1
 800729e:	e7e1      	b.n	8007264 <_dtoa_r+0x9e4>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	db04      	blt.n	80072b0 <_dtoa_r+0xa30>
 80072a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072a8:	430b      	orrs	r3, r1
 80072aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ac:	430b      	orrs	r3, r1
 80072ae:	d120      	bne.n	80072f2 <_dtoa_r+0xa72>
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	dded      	ble.n	8007290 <_dtoa_r+0xa10>
 80072b4:	4649      	mov	r1, r9
 80072b6:	2201      	movs	r2, #1
 80072b8:	4658      	mov	r0, fp
 80072ba:	f000 fbfd 	bl	8007ab8 <__lshift>
 80072be:	4621      	mov	r1, r4
 80072c0:	4681      	mov	r9, r0
 80072c2:	f000 fc65 	bl	8007b90 <__mcmp>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	dc03      	bgt.n	80072d2 <_dtoa_r+0xa52>
 80072ca:	d1e1      	bne.n	8007290 <_dtoa_r+0xa10>
 80072cc:	f018 0f01 	tst.w	r8, #1
 80072d0:	d0de      	beq.n	8007290 <_dtoa_r+0xa10>
 80072d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072d6:	d1d8      	bne.n	800728a <_dtoa_r+0xa0a>
 80072d8:	9a00      	ldr	r2, [sp, #0]
 80072da:	2339      	movs	r3, #57	@ 0x39
 80072dc:	7013      	strb	r3, [r2, #0]
 80072de:	4633      	mov	r3, r6
 80072e0:	461e      	mov	r6, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072e8:	2a39      	cmp	r2, #57	@ 0x39
 80072ea:	d052      	beq.n	8007392 <_dtoa_r+0xb12>
 80072ec:	3201      	adds	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e612      	b.n	8006f18 <_dtoa_r+0x698>
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	dd07      	ble.n	8007306 <_dtoa_r+0xa86>
 80072f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072fa:	d0ed      	beq.n	80072d8 <_dtoa_r+0xa58>
 80072fc:	9a00      	ldr	r2, [sp, #0]
 80072fe:	f108 0301 	add.w	r3, r8, #1
 8007302:	7013      	strb	r3, [r2, #0]
 8007304:	e608      	b.n	8006f18 <_dtoa_r+0x698>
 8007306:	9b07      	ldr	r3, [sp, #28]
 8007308:	9a07      	ldr	r2, [sp, #28]
 800730a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800730e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007310:	4293      	cmp	r3, r2
 8007312:	d028      	beq.n	8007366 <_dtoa_r+0xae6>
 8007314:	4649      	mov	r1, r9
 8007316:	2300      	movs	r3, #0
 8007318:	220a      	movs	r2, #10
 800731a:	4658      	mov	r0, fp
 800731c:	f000 f9d6 	bl	80076cc <__multadd>
 8007320:	42af      	cmp	r7, r5
 8007322:	4681      	mov	r9, r0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	f04f 020a 	mov.w	r2, #10
 800732c:	4639      	mov	r1, r7
 800732e:	4658      	mov	r0, fp
 8007330:	d107      	bne.n	8007342 <_dtoa_r+0xac2>
 8007332:	f000 f9cb 	bl	80076cc <__multadd>
 8007336:	4607      	mov	r7, r0
 8007338:	4605      	mov	r5, r0
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	3301      	adds	r3, #1
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	e774      	b.n	800722c <_dtoa_r+0x9ac>
 8007342:	f000 f9c3 	bl	80076cc <__multadd>
 8007346:	4629      	mov	r1, r5
 8007348:	4607      	mov	r7, r0
 800734a:	2300      	movs	r3, #0
 800734c:	220a      	movs	r2, #10
 800734e:	4658      	mov	r0, fp
 8007350:	f000 f9bc 	bl	80076cc <__multadd>
 8007354:	4605      	mov	r5, r0
 8007356:	e7f0      	b.n	800733a <_dtoa_r+0xaba>
 8007358:	9b00      	ldr	r3, [sp, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfcc      	ite	gt
 800735e:	461e      	movgt	r6, r3
 8007360:	2601      	movle	r6, #1
 8007362:	4456      	add	r6, sl
 8007364:	2700      	movs	r7, #0
 8007366:	4649      	mov	r1, r9
 8007368:	2201      	movs	r2, #1
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fba4 	bl	8007ab8 <__lshift>
 8007370:	4621      	mov	r1, r4
 8007372:	4681      	mov	r9, r0
 8007374:	f000 fc0c 	bl	8007b90 <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	dcb0      	bgt.n	80072de <_dtoa_r+0xa5e>
 800737c:	d102      	bne.n	8007384 <_dtoa_r+0xb04>
 800737e:	f018 0f01 	tst.w	r8, #1
 8007382:	d1ac      	bne.n	80072de <_dtoa_r+0xa5e>
 8007384:	4633      	mov	r3, r6
 8007386:	461e      	mov	r6, r3
 8007388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800738c:	2a30      	cmp	r2, #48	@ 0x30
 800738e:	d0fa      	beq.n	8007386 <_dtoa_r+0xb06>
 8007390:	e5c2      	b.n	8006f18 <_dtoa_r+0x698>
 8007392:	459a      	cmp	sl, r3
 8007394:	d1a4      	bne.n	80072e0 <_dtoa_r+0xa60>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	2331      	movs	r3, #49	@ 0x31
 800739e:	f88a 3000 	strb.w	r3, [sl]
 80073a2:	e5b9      	b.n	8006f18 <_dtoa_r+0x698>
 80073a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007404 <_dtoa_r+0xb84>
 80073aa:	b11b      	cbz	r3, 80073b4 <_dtoa_r+0xb34>
 80073ac:	f10a 0308 	add.w	r3, sl, #8
 80073b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4650      	mov	r0, sl
 80073b6:	b019      	add	sp, #100	@ 0x64
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073be:	2b01      	cmp	r3, #1
 80073c0:	f77f ae37 	ble.w	8007032 <_dtoa_r+0x7b2>
 80073c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c8:	2001      	movs	r0, #1
 80073ca:	e655      	b.n	8007078 <_dtoa_r+0x7f8>
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f77f aed6 	ble.w	8007180 <_dtoa_r+0x900>
 80073d4:	4656      	mov	r6, sl
 80073d6:	4621      	mov	r1, r4
 80073d8:	4648      	mov	r0, r9
 80073da:	f7ff f9c9 	bl	8006770 <quorem>
 80073de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073e2:	f806 8b01 	strb.w	r8, [r6], #1
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	eba6 020a 	sub.w	r2, r6, sl
 80073ec:	4293      	cmp	r3, r2
 80073ee:	ddb3      	ble.n	8007358 <_dtoa_r+0xad8>
 80073f0:	4649      	mov	r1, r9
 80073f2:	2300      	movs	r3, #0
 80073f4:	220a      	movs	r2, #10
 80073f6:	4658      	mov	r0, fp
 80073f8:	f000 f968 	bl	80076cc <__multadd>
 80073fc:	4681      	mov	r9, r0
 80073fe:	e7ea      	b.n	80073d6 <_dtoa_r+0xb56>
 8007400:	08009f6d 	.word	0x08009f6d
 8007404:	08009ef1 	.word	0x08009ef1

08007408 <_free_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4605      	mov	r5, r0
 800740c:	2900      	cmp	r1, #0
 800740e:	d041      	beq.n	8007494 <_free_r+0x8c>
 8007410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007414:	1f0c      	subs	r4, r1, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	18e4      	addlt	r4, r4, r3
 800741c:	f000 f8e8 	bl	80075f0 <__malloc_lock>
 8007420:	4a1d      	ldr	r2, [pc, #116]	@ (8007498 <_free_r+0x90>)
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	b933      	cbnz	r3, 8007434 <_free_r+0x2c>
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6014      	str	r4, [r2, #0]
 800742a:	4628      	mov	r0, r5
 800742c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007430:	f000 b8e4 	b.w	80075fc <__malloc_unlock>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d908      	bls.n	800744a <_free_r+0x42>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	1821      	adds	r1, r4, r0
 800743c:	428b      	cmp	r3, r1
 800743e:	bf01      	itttt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	1809      	addeq	r1, r1, r0
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	e7ed      	b.n	8007426 <_free_r+0x1e>
 800744a:	461a      	mov	r2, r3
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b10b      	cbz	r3, 8007454 <_free_r+0x4c>
 8007450:	42a3      	cmp	r3, r4
 8007452:	d9fa      	bls.n	800744a <_free_r+0x42>
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	1850      	adds	r0, r2, r1
 8007458:	42a0      	cmp	r0, r4
 800745a:	d10b      	bne.n	8007474 <_free_r+0x6c>
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	4401      	add	r1, r0
 8007460:	1850      	adds	r0, r2, r1
 8007462:	4283      	cmp	r3, r0
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	d1e0      	bne.n	800742a <_free_r+0x22>
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	6053      	str	r3, [r2, #4]
 800746e:	4408      	add	r0, r1
 8007470:	6010      	str	r0, [r2, #0]
 8007472:	e7da      	b.n	800742a <_free_r+0x22>
 8007474:	d902      	bls.n	800747c <_free_r+0x74>
 8007476:	230c      	movs	r3, #12
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	e7d6      	b.n	800742a <_free_r+0x22>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	1821      	adds	r1, r4, r0
 8007480:	428b      	cmp	r3, r1
 8007482:	bf04      	itt	eq
 8007484:	6819      	ldreq	r1, [r3, #0]
 8007486:	685b      	ldreq	r3, [r3, #4]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	bf04      	itt	eq
 800748c:	1809      	addeq	r1, r1, r0
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	6054      	str	r4, [r2, #4]
 8007492:	e7ca      	b.n	800742a <_free_r+0x22>
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	200004ec 	.word	0x200004ec

0800749c <malloc>:
 800749c:	4b02      	ldr	r3, [pc, #8]	@ (80074a8 <malloc+0xc>)
 800749e:	4601      	mov	r1, r0
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f000 b825 	b.w	80074f0 <_malloc_r>
 80074a6:	bf00      	nop
 80074a8:	20000020 	.word	0x20000020

080074ac <sbrk_aligned>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	4e0f      	ldr	r6, [pc, #60]	@ (80074ec <sbrk_aligned+0x40>)
 80074b0:	460c      	mov	r4, r1
 80074b2:	6831      	ldr	r1, [r6, #0]
 80074b4:	4605      	mov	r5, r0
 80074b6:	b911      	cbnz	r1, 80074be <sbrk_aligned+0x12>
 80074b8:	f002 f866 	bl	8009588 <_sbrk_r>
 80074bc:	6030      	str	r0, [r6, #0]
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	f002 f861 	bl	8009588 <_sbrk_r>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d103      	bne.n	80074d2 <sbrk_aligned+0x26>
 80074ca:	f04f 34ff 	mov.w	r4, #4294967295
 80074ce:	4620      	mov	r0, r4
 80074d0:	bd70      	pop	{r4, r5, r6, pc}
 80074d2:	1cc4      	adds	r4, r0, #3
 80074d4:	f024 0403 	bic.w	r4, r4, #3
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d0f8      	beq.n	80074ce <sbrk_aligned+0x22>
 80074dc:	1a21      	subs	r1, r4, r0
 80074de:	4628      	mov	r0, r5
 80074e0:	f002 f852 	bl	8009588 <_sbrk_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d1f2      	bne.n	80074ce <sbrk_aligned+0x22>
 80074e8:	e7ef      	b.n	80074ca <sbrk_aligned+0x1e>
 80074ea:	bf00      	nop
 80074ec:	200004e8 	.word	0x200004e8

080074f0 <_malloc_r>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	1ccd      	adds	r5, r1, #3
 80074f6:	f025 0503 	bic.w	r5, r5, #3
 80074fa:	3508      	adds	r5, #8
 80074fc:	2d0c      	cmp	r5, #12
 80074fe:	bf38      	it	cc
 8007500:	250c      	movcc	r5, #12
 8007502:	2d00      	cmp	r5, #0
 8007504:	4606      	mov	r6, r0
 8007506:	db01      	blt.n	800750c <_malloc_r+0x1c>
 8007508:	42a9      	cmp	r1, r5
 800750a:	d904      	bls.n	8007516 <_malloc_r+0x26>
 800750c:	230c      	movs	r3, #12
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	2000      	movs	r0, #0
 8007512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075ec <_malloc_r+0xfc>
 800751a:	f000 f869 	bl	80075f0 <__malloc_lock>
 800751e:	f8d8 3000 	ldr.w	r3, [r8]
 8007522:	461c      	mov	r4, r3
 8007524:	bb44      	cbnz	r4, 8007578 <_malloc_r+0x88>
 8007526:	4629      	mov	r1, r5
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff ffbf 	bl	80074ac <sbrk_aligned>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	4604      	mov	r4, r0
 8007532:	d158      	bne.n	80075e6 <_malloc_r+0xf6>
 8007534:	f8d8 4000 	ldr.w	r4, [r8]
 8007538:	4627      	mov	r7, r4
 800753a:	2f00      	cmp	r7, #0
 800753c:	d143      	bne.n	80075c6 <_malloc_r+0xd6>
 800753e:	2c00      	cmp	r4, #0
 8007540:	d04b      	beq.n	80075da <_malloc_r+0xea>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	4639      	mov	r1, r7
 8007546:	4630      	mov	r0, r6
 8007548:	eb04 0903 	add.w	r9, r4, r3
 800754c:	f002 f81c 	bl	8009588 <_sbrk_r>
 8007550:	4581      	cmp	r9, r0
 8007552:	d142      	bne.n	80075da <_malloc_r+0xea>
 8007554:	6821      	ldr	r1, [r4, #0]
 8007556:	1a6d      	subs	r5, r5, r1
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ffa6 	bl	80074ac <sbrk_aligned>
 8007560:	3001      	adds	r0, #1
 8007562:	d03a      	beq.n	80075da <_malloc_r+0xea>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	442b      	add	r3, r5
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	f8d8 3000 	ldr.w	r3, [r8]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	bb62      	cbnz	r2, 80075cc <_malloc_r+0xdc>
 8007572:	f8c8 7000 	str.w	r7, [r8]
 8007576:	e00f      	b.n	8007598 <_malloc_r+0xa8>
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	1b52      	subs	r2, r2, r5
 800757c:	d420      	bmi.n	80075c0 <_malloc_r+0xd0>
 800757e:	2a0b      	cmp	r2, #11
 8007580:	d917      	bls.n	80075b2 <_malloc_r+0xc2>
 8007582:	1961      	adds	r1, r4, r5
 8007584:	42a3      	cmp	r3, r4
 8007586:	6025      	str	r5, [r4, #0]
 8007588:	bf18      	it	ne
 800758a:	6059      	strne	r1, [r3, #4]
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	bf08      	it	eq
 8007590:	f8c8 1000 	streq.w	r1, [r8]
 8007594:	5162      	str	r2, [r4, r5]
 8007596:	604b      	str	r3, [r1, #4]
 8007598:	4630      	mov	r0, r6
 800759a:	f000 f82f 	bl	80075fc <__malloc_unlock>
 800759e:	f104 000b 	add.w	r0, r4, #11
 80075a2:	1d23      	adds	r3, r4, #4
 80075a4:	f020 0007 	bic.w	r0, r0, #7
 80075a8:	1ac2      	subs	r2, r0, r3
 80075aa:	bf1c      	itt	ne
 80075ac:	1a1b      	subne	r3, r3, r0
 80075ae:	50a3      	strne	r3, [r4, r2]
 80075b0:	e7af      	b.n	8007512 <_malloc_r+0x22>
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	bf0c      	ite	eq
 80075b8:	f8c8 2000 	streq.w	r2, [r8]
 80075bc:	605a      	strne	r2, [r3, #4]
 80075be:	e7eb      	b.n	8007598 <_malloc_r+0xa8>
 80075c0:	4623      	mov	r3, r4
 80075c2:	6864      	ldr	r4, [r4, #4]
 80075c4:	e7ae      	b.n	8007524 <_malloc_r+0x34>
 80075c6:	463c      	mov	r4, r7
 80075c8:	687f      	ldr	r7, [r7, #4]
 80075ca:	e7b6      	b.n	800753a <_malloc_r+0x4a>
 80075cc:	461a      	mov	r2, r3
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d1fb      	bne.n	80075cc <_malloc_r+0xdc>
 80075d4:	2300      	movs	r3, #0
 80075d6:	6053      	str	r3, [r2, #4]
 80075d8:	e7de      	b.n	8007598 <_malloc_r+0xa8>
 80075da:	230c      	movs	r3, #12
 80075dc:	6033      	str	r3, [r6, #0]
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 f80c 	bl	80075fc <__malloc_unlock>
 80075e4:	e794      	b.n	8007510 <_malloc_r+0x20>
 80075e6:	6005      	str	r5, [r0, #0]
 80075e8:	e7d6      	b.n	8007598 <_malloc_r+0xa8>
 80075ea:	bf00      	nop
 80075ec:	200004ec 	.word	0x200004ec

080075f0 <__malloc_lock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_lock+0x8>)
 80075f2:	f7ff b8b4 	b.w	800675e <__retarget_lock_acquire_recursive>
 80075f6:	bf00      	nop
 80075f8:	200004e4 	.word	0x200004e4

080075fc <__malloc_unlock>:
 80075fc:	4801      	ldr	r0, [pc, #4]	@ (8007604 <__malloc_unlock+0x8>)
 80075fe:	f7ff b8af 	b.w	8006760 <__retarget_lock_release_recursive>
 8007602:	bf00      	nop
 8007604:	200004e4 	.word	0x200004e4

08007608 <_Balloc>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	69c6      	ldr	r6, [r0, #28]
 800760c:	4604      	mov	r4, r0
 800760e:	460d      	mov	r5, r1
 8007610:	b976      	cbnz	r6, 8007630 <_Balloc+0x28>
 8007612:	2010      	movs	r0, #16
 8007614:	f7ff ff42 	bl	800749c <malloc>
 8007618:	4602      	mov	r2, r0
 800761a:	61e0      	str	r0, [r4, #28]
 800761c:	b920      	cbnz	r0, 8007628 <_Balloc+0x20>
 800761e:	4b18      	ldr	r3, [pc, #96]	@ (8007680 <_Balloc+0x78>)
 8007620:	4818      	ldr	r0, [pc, #96]	@ (8007684 <_Balloc+0x7c>)
 8007622:	216b      	movs	r1, #107	@ 0x6b
 8007624:	f001 ffd8 	bl	80095d8 <__assert_func>
 8007628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800762c:	6006      	str	r6, [r0, #0]
 800762e:	60c6      	str	r6, [r0, #12]
 8007630:	69e6      	ldr	r6, [r4, #28]
 8007632:	68f3      	ldr	r3, [r6, #12]
 8007634:	b183      	cbz	r3, 8007658 <_Balloc+0x50>
 8007636:	69e3      	ldr	r3, [r4, #28]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800763e:	b9b8      	cbnz	r0, 8007670 <_Balloc+0x68>
 8007640:	2101      	movs	r1, #1
 8007642:	fa01 f605 	lsl.w	r6, r1, r5
 8007646:	1d72      	adds	r2, r6, #5
 8007648:	0092      	lsls	r2, r2, #2
 800764a:	4620      	mov	r0, r4
 800764c:	f001 ffe2 	bl	8009614 <_calloc_r>
 8007650:	b160      	cbz	r0, 800766c <_Balloc+0x64>
 8007652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007656:	e00e      	b.n	8007676 <_Balloc+0x6e>
 8007658:	2221      	movs	r2, #33	@ 0x21
 800765a:	2104      	movs	r1, #4
 800765c:	4620      	mov	r0, r4
 800765e:	f001 ffd9 	bl	8009614 <_calloc_r>
 8007662:	69e3      	ldr	r3, [r4, #28]
 8007664:	60f0      	str	r0, [r6, #12]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e4      	bne.n	8007636 <_Balloc+0x2e>
 800766c:	2000      	movs	r0, #0
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	6802      	ldr	r2, [r0, #0]
 8007672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007676:	2300      	movs	r3, #0
 8007678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800767c:	e7f7      	b.n	800766e <_Balloc+0x66>
 800767e:	bf00      	nop
 8007680:	08009efe 	.word	0x08009efe
 8007684:	08009f7e 	.word	0x08009f7e

08007688 <_Bfree>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	69c6      	ldr	r6, [r0, #28]
 800768c:	4605      	mov	r5, r0
 800768e:	460c      	mov	r4, r1
 8007690:	b976      	cbnz	r6, 80076b0 <_Bfree+0x28>
 8007692:	2010      	movs	r0, #16
 8007694:	f7ff ff02 	bl	800749c <malloc>
 8007698:	4602      	mov	r2, r0
 800769a:	61e8      	str	r0, [r5, #28]
 800769c:	b920      	cbnz	r0, 80076a8 <_Bfree+0x20>
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <_Bfree+0x3c>)
 80076a0:	4809      	ldr	r0, [pc, #36]	@ (80076c8 <_Bfree+0x40>)
 80076a2:	218f      	movs	r1, #143	@ 0x8f
 80076a4:	f001 ff98 	bl	80095d8 <__assert_func>
 80076a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ac:	6006      	str	r6, [r0, #0]
 80076ae:	60c6      	str	r6, [r0, #12]
 80076b0:	b13c      	cbz	r4, 80076c2 <_Bfree+0x3a>
 80076b2:	69eb      	ldr	r3, [r5, #28]
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076bc:	6021      	str	r1, [r4, #0]
 80076be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	08009efe 	.word	0x08009efe
 80076c8:	08009f7e 	.word	0x08009f7e

080076cc <__multadd>:
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	690d      	ldr	r5, [r1, #16]
 80076d2:	4607      	mov	r7, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	461e      	mov	r6, r3
 80076d8:	f101 0c14 	add.w	ip, r1, #20
 80076dc:	2000      	movs	r0, #0
 80076de:	f8dc 3000 	ldr.w	r3, [ip]
 80076e2:	b299      	uxth	r1, r3
 80076e4:	fb02 6101 	mla	r1, r2, r1, r6
 80076e8:	0c1e      	lsrs	r6, r3, #16
 80076ea:	0c0b      	lsrs	r3, r1, #16
 80076ec:	fb02 3306 	mla	r3, r2, r6, r3
 80076f0:	b289      	uxth	r1, r1
 80076f2:	3001      	adds	r0, #1
 80076f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076f8:	4285      	cmp	r5, r0
 80076fa:	f84c 1b04 	str.w	r1, [ip], #4
 80076fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007702:	dcec      	bgt.n	80076de <__multadd+0x12>
 8007704:	b30e      	cbz	r6, 800774a <__multadd+0x7e>
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	42ab      	cmp	r3, r5
 800770a:	dc19      	bgt.n	8007740 <__multadd+0x74>
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	4638      	mov	r0, r7
 8007710:	3101      	adds	r1, #1
 8007712:	f7ff ff79 	bl	8007608 <_Balloc>
 8007716:	4680      	mov	r8, r0
 8007718:	b928      	cbnz	r0, 8007726 <__multadd+0x5a>
 800771a:	4602      	mov	r2, r0
 800771c:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <__multadd+0x84>)
 800771e:	480d      	ldr	r0, [pc, #52]	@ (8007754 <__multadd+0x88>)
 8007720:	21ba      	movs	r1, #186	@ 0xba
 8007722:	f001 ff59 	bl	80095d8 <__assert_func>
 8007726:	6922      	ldr	r2, [r4, #16]
 8007728:	3202      	adds	r2, #2
 800772a:	f104 010c 	add.w	r1, r4, #12
 800772e:	0092      	lsls	r2, r2, #2
 8007730:	300c      	adds	r0, #12
 8007732:	f001 ff39 	bl	80095a8 <memcpy>
 8007736:	4621      	mov	r1, r4
 8007738:	4638      	mov	r0, r7
 800773a:	f7ff ffa5 	bl	8007688 <_Bfree>
 800773e:	4644      	mov	r4, r8
 8007740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007744:	3501      	adds	r5, #1
 8007746:	615e      	str	r6, [r3, #20]
 8007748:	6125      	str	r5, [r4, #16]
 800774a:	4620      	mov	r0, r4
 800774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007750:	08009f6d 	.word	0x08009f6d
 8007754:	08009f7e 	.word	0x08009f7e

08007758 <__s2b>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	460c      	mov	r4, r1
 800775e:	4615      	mov	r5, r2
 8007760:	461f      	mov	r7, r3
 8007762:	2209      	movs	r2, #9
 8007764:	3308      	adds	r3, #8
 8007766:	4606      	mov	r6, r0
 8007768:	fb93 f3f2 	sdiv	r3, r3, r2
 800776c:	2100      	movs	r1, #0
 800776e:	2201      	movs	r2, #1
 8007770:	429a      	cmp	r2, r3
 8007772:	db09      	blt.n	8007788 <__s2b+0x30>
 8007774:	4630      	mov	r0, r6
 8007776:	f7ff ff47 	bl	8007608 <_Balloc>
 800777a:	b940      	cbnz	r0, 800778e <__s2b+0x36>
 800777c:	4602      	mov	r2, r0
 800777e:	4b19      	ldr	r3, [pc, #100]	@ (80077e4 <__s2b+0x8c>)
 8007780:	4819      	ldr	r0, [pc, #100]	@ (80077e8 <__s2b+0x90>)
 8007782:	21d3      	movs	r1, #211	@ 0xd3
 8007784:	f001 ff28 	bl	80095d8 <__assert_func>
 8007788:	0052      	lsls	r2, r2, #1
 800778a:	3101      	adds	r1, #1
 800778c:	e7f0      	b.n	8007770 <__s2b+0x18>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	6143      	str	r3, [r0, #20]
 8007792:	2d09      	cmp	r5, #9
 8007794:	f04f 0301 	mov.w	r3, #1
 8007798:	6103      	str	r3, [r0, #16]
 800779a:	dd16      	ble.n	80077ca <__s2b+0x72>
 800779c:	f104 0909 	add.w	r9, r4, #9
 80077a0:	46c8      	mov	r8, r9
 80077a2:	442c      	add	r4, r5
 80077a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077a8:	4601      	mov	r1, r0
 80077aa:	3b30      	subs	r3, #48	@ 0x30
 80077ac:	220a      	movs	r2, #10
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff8c 	bl	80076cc <__multadd>
 80077b4:	45a0      	cmp	r8, r4
 80077b6:	d1f5      	bne.n	80077a4 <__s2b+0x4c>
 80077b8:	f1a5 0408 	sub.w	r4, r5, #8
 80077bc:	444c      	add	r4, r9
 80077be:	1b2d      	subs	r5, r5, r4
 80077c0:	1963      	adds	r3, r4, r5
 80077c2:	42bb      	cmp	r3, r7
 80077c4:	db04      	blt.n	80077d0 <__s2b+0x78>
 80077c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ca:	340a      	adds	r4, #10
 80077cc:	2509      	movs	r5, #9
 80077ce:	e7f6      	b.n	80077be <__s2b+0x66>
 80077d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077d4:	4601      	mov	r1, r0
 80077d6:	3b30      	subs	r3, #48	@ 0x30
 80077d8:	220a      	movs	r2, #10
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ff76 	bl	80076cc <__multadd>
 80077e0:	e7ee      	b.n	80077c0 <__s2b+0x68>
 80077e2:	bf00      	nop
 80077e4:	08009f6d 	.word	0x08009f6d
 80077e8:	08009f7e 	.word	0x08009f7e

080077ec <__hi0bits>:
 80077ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077f0:	4603      	mov	r3, r0
 80077f2:	bf36      	itet	cc
 80077f4:	0403      	lslcc	r3, r0, #16
 80077f6:	2000      	movcs	r0, #0
 80077f8:	2010      	movcc	r0, #16
 80077fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077fe:	bf3c      	itt	cc
 8007800:	021b      	lslcc	r3, r3, #8
 8007802:	3008      	addcc	r0, #8
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007808:	bf3c      	itt	cc
 800780a:	011b      	lslcc	r3, r3, #4
 800780c:	3004      	addcc	r0, #4
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	bf3c      	itt	cc
 8007814:	009b      	lslcc	r3, r3, #2
 8007816:	3002      	addcc	r0, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	db05      	blt.n	8007828 <__hi0bits+0x3c>
 800781c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007820:	f100 0001 	add.w	r0, r0, #1
 8007824:	bf08      	it	eq
 8007826:	2020      	moveq	r0, #32
 8007828:	4770      	bx	lr

0800782a <__lo0bits>:
 800782a:	6803      	ldr	r3, [r0, #0]
 800782c:	4602      	mov	r2, r0
 800782e:	f013 0007 	ands.w	r0, r3, #7
 8007832:	d00b      	beq.n	800784c <__lo0bits+0x22>
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d421      	bmi.n	800787c <__lo0bits+0x52>
 8007838:	0798      	lsls	r0, r3, #30
 800783a:	bf49      	itett	mi
 800783c:	085b      	lsrmi	r3, r3, #1
 800783e:	089b      	lsrpl	r3, r3, #2
 8007840:	2001      	movmi	r0, #1
 8007842:	6013      	strmi	r3, [r2, #0]
 8007844:	bf5c      	itt	pl
 8007846:	6013      	strpl	r3, [r2, #0]
 8007848:	2002      	movpl	r0, #2
 800784a:	4770      	bx	lr
 800784c:	b299      	uxth	r1, r3
 800784e:	b909      	cbnz	r1, 8007854 <__lo0bits+0x2a>
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	2010      	movs	r0, #16
 8007854:	b2d9      	uxtb	r1, r3
 8007856:	b909      	cbnz	r1, 800785c <__lo0bits+0x32>
 8007858:	3008      	adds	r0, #8
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	0719      	lsls	r1, r3, #28
 800785e:	bf04      	itt	eq
 8007860:	091b      	lsreq	r3, r3, #4
 8007862:	3004      	addeq	r0, #4
 8007864:	0799      	lsls	r1, r3, #30
 8007866:	bf04      	itt	eq
 8007868:	089b      	lsreq	r3, r3, #2
 800786a:	3002      	addeq	r0, #2
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d403      	bmi.n	8007878 <__lo0bits+0x4e>
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	f100 0001 	add.w	r0, r0, #1
 8007876:	d003      	beq.n	8007880 <__lo0bits+0x56>
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4770      	bx	lr
 800787c:	2000      	movs	r0, #0
 800787e:	4770      	bx	lr
 8007880:	2020      	movs	r0, #32
 8007882:	4770      	bx	lr

08007884 <__i2b>:
 8007884:	b510      	push	{r4, lr}
 8007886:	460c      	mov	r4, r1
 8007888:	2101      	movs	r1, #1
 800788a:	f7ff febd 	bl	8007608 <_Balloc>
 800788e:	4602      	mov	r2, r0
 8007890:	b928      	cbnz	r0, 800789e <__i2b+0x1a>
 8007892:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <__i2b+0x24>)
 8007894:	4805      	ldr	r0, [pc, #20]	@ (80078ac <__i2b+0x28>)
 8007896:	f240 1145 	movw	r1, #325	@ 0x145
 800789a:	f001 fe9d 	bl	80095d8 <__assert_func>
 800789e:	2301      	movs	r3, #1
 80078a0:	6144      	str	r4, [r0, #20]
 80078a2:	6103      	str	r3, [r0, #16]
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08009f6d 	.word	0x08009f6d
 80078ac:	08009f7e 	.word	0x08009f7e

080078b0 <__multiply>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4614      	mov	r4, r2
 80078b6:	690a      	ldr	r2, [r1, #16]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	bfa8      	it	ge
 80078be:	4623      	movge	r3, r4
 80078c0:	460f      	mov	r7, r1
 80078c2:	bfa4      	itt	ge
 80078c4:	460c      	movge	r4, r1
 80078c6:	461f      	movge	r7, r3
 80078c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078d0:	68a3      	ldr	r3, [r4, #8]
 80078d2:	6861      	ldr	r1, [r4, #4]
 80078d4:	eb0a 0609 	add.w	r6, sl, r9
 80078d8:	42b3      	cmp	r3, r6
 80078da:	b085      	sub	sp, #20
 80078dc:	bfb8      	it	lt
 80078de:	3101      	addlt	r1, #1
 80078e0:	f7ff fe92 	bl	8007608 <_Balloc>
 80078e4:	b930      	cbnz	r0, 80078f4 <__multiply+0x44>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4b44      	ldr	r3, [pc, #272]	@ (80079fc <__multiply+0x14c>)
 80078ea:	4845      	ldr	r0, [pc, #276]	@ (8007a00 <__multiply+0x150>)
 80078ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078f0:	f001 fe72 	bl	80095d8 <__assert_func>
 80078f4:	f100 0514 	add.w	r5, r0, #20
 80078f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078fc:	462b      	mov	r3, r5
 80078fe:	2200      	movs	r2, #0
 8007900:	4543      	cmp	r3, r8
 8007902:	d321      	bcc.n	8007948 <__multiply+0x98>
 8007904:	f107 0114 	add.w	r1, r7, #20
 8007908:	f104 0214 	add.w	r2, r4, #20
 800790c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007910:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	1b13      	subs	r3, r2, r4
 8007918:	3b15      	subs	r3, #21
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	3304      	adds	r3, #4
 8007920:	f104 0715 	add.w	r7, r4, #21
 8007924:	42ba      	cmp	r2, r7
 8007926:	bf38      	it	cc
 8007928:	2304      	movcc	r3, #4
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	9b02      	ldr	r3, [sp, #8]
 800792e:	9103      	str	r1, [sp, #12]
 8007930:	428b      	cmp	r3, r1
 8007932:	d80c      	bhi.n	800794e <__multiply+0x9e>
 8007934:	2e00      	cmp	r6, #0
 8007936:	dd03      	ble.n	8007940 <__multiply+0x90>
 8007938:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800793c:	2b00      	cmp	r3, #0
 800793e:	d05b      	beq.n	80079f8 <__multiply+0x148>
 8007940:	6106      	str	r6, [r0, #16]
 8007942:	b005      	add	sp, #20
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	f843 2b04 	str.w	r2, [r3], #4
 800794c:	e7d8      	b.n	8007900 <__multiply+0x50>
 800794e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007952:	f1ba 0f00 	cmp.w	sl, #0
 8007956:	d024      	beq.n	80079a2 <__multiply+0xf2>
 8007958:	f104 0e14 	add.w	lr, r4, #20
 800795c:	46a9      	mov	r9, r5
 800795e:	f04f 0c00 	mov.w	ip, #0
 8007962:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007966:	f8d9 3000 	ldr.w	r3, [r9]
 800796a:	fa1f fb87 	uxth.w	fp, r7
 800796e:	b29b      	uxth	r3, r3
 8007970:	fb0a 330b 	mla	r3, sl, fp, r3
 8007974:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007978:	f8d9 7000 	ldr.w	r7, [r9]
 800797c:	4463      	add	r3, ip
 800797e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007982:	fb0a c70b 	mla	r7, sl, fp, ip
 8007986:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007990:	4572      	cmp	r2, lr
 8007992:	f849 3b04 	str.w	r3, [r9], #4
 8007996:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800799a:	d8e2      	bhi.n	8007962 <__multiply+0xb2>
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	f845 c003 	str.w	ip, [r5, r3]
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079a8:	3104      	adds	r1, #4
 80079aa:	f1b9 0f00 	cmp.w	r9, #0
 80079ae:	d021      	beq.n	80079f4 <__multiply+0x144>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	f104 0c14 	add.w	ip, r4, #20
 80079b6:	46ae      	mov	lr, r5
 80079b8:	f04f 0a00 	mov.w	sl, #0
 80079bc:	f8bc b000 	ldrh.w	fp, [ip]
 80079c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079c4:	fb09 770b 	mla	r7, r9, fp, r7
 80079c8:	4457      	add	r7, sl
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079d0:	f84e 3b04 	str.w	r3, [lr], #4
 80079d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079dc:	f8be 3000 	ldrh.w	r3, [lr]
 80079e0:	fb09 330a 	mla	r3, r9, sl, r3
 80079e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079e8:	4562      	cmp	r2, ip
 80079ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079ee:	d8e5      	bhi.n	80079bc <__multiply+0x10c>
 80079f0:	9f01      	ldr	r7, [sp, #4]
 80079f2:	51eb      	str	r3, [r5, r7]
 80079f4:	3504      	adds	r5, #4
 80079f6:	e799      	b.n	800792c <__multiply+0x7c>
 80079f8:	3e01      	subs	r6, #1
 80079fa:	e79b      	b.n	8007934 <__multiply+0x84>
 80079fc:	08009f6d 	.word	0x08009f6d
 8007a00:	08009f7e 	.word	0x08009f7e

08007a04 <__pow5mult>:
 8007a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a08:	4615      	mov	r5, r2
 8007a0a:	f012 0203 	ands.w	r2, r2, #3
 8007a0e:	4607      	mov	r7, r0
 8007a10:	460e      	mov	r6, r1
 8007a12:	d007      	beq.n	8007a24 <__pow5mult+0x20>
 8007a14:	4c25      	ldr	r4, [pc, #148]	@ (8007aac <__pow5mult+0xa8>)
 8007a16:	3a01      	subs	r2, #1
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a1e:	f7ff fe55 	bl	80076cc <__multadd>
 8007a22:	4606      	mov	r6, r0
 8007a24:	10ad      	asrs	r5, r5, #2
 8007a26:	d03d      	beq.n	8007aa4 <__pow5mult+0xa0>
 8007a28:	69fc      	ldr	r4, [r7, #28]
 8007a2a:	b97c      	cbnz	r4, 8007a4c <__pow5mult+0x48>
 8007a2c:	2010      	movs	r0, #16
 8007a2e:	f7ff fd35 	bl	800749c <malloc>
 8007a32:	4602      	mov	r2, r0
 8007a34:	61f8      	str	r0, [r7, #28]
 8007a36:	b928      	cbnz	r0, 8007a44 <__pow5mult+0x40>
 8007a38:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab0 <__pow5mult+0xac>)
 8007a3a:	481e      	ldr	r0, [pc, #120]	@ (8007ab4 <__pow5mult+0xb0>)
 8007a3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a40:	f001 fdca 	bl	80095d8 <__assert_func>
 8007a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a48:	6004      	str	r4, [r0, #0]
 8007a4a:	60c4      	str	r4, [r0, #12]
 8007a4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a54:	b94c      	cbnz	r4, 8007a6a <__pow5mult+0x66>
 8007a56:	f240 2171 	movw	r1, #625	@ 0x271
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f7ff ff12 	bl	8007884 <__i2b>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a66:	4604      	mov	r4, r0
 8007a68:	6003      	str	r3, [r0, #0]
 8007a6a:	f04f 0900 	mov.w	r9, #0
 8007a6e:	07eb      	lsls	r3, r5, #31
 8007a70:	d50a      	bpl.n	8007a88 <__pow5mult+0x84>
 8007a72:	4631      	mov	r1, r6
 8007a74:	4622      	mov	r2, r4
 8007a76:	4638      	mov	r0, r7
 8007a78:	f7ff ff1a 	bl	80078b0 <__multiply>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff fe01 	bl	8007688 <_Bfree>
 8007a86:	4646      	mov	r6, r8
 8007a88:	106d      	asrs	r5, r5, #1
 8007a8a:	d00b      	beq.n	8007aa4 <__pow5mult+0xa0>
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	b938      	cbnz	r0, 8007aa0 <__pow5mult+0x9c>
 8007a90:	4622      	mov	r2, r4
 8007a92:	4621      	mov	r1, r4
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff ff0b 	bl	80078b0 <__multiply>
 8007a9a:	6020      	str	r0, [r4, #0]
 8007a9c:	f8c0 9000 	str.w	r9, [r0]
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	e7e4      	b.n	8007a6e <__pow5mult+0x6a>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aaa:	bf00      	nop
 8007aac:	08009fd8 	.word	0x08009fd8
 8007ab0:	08009efe 	.word	0x08009efe
 8007ab4:	08009f7e 	.word	0x08009f7e

08007ab8 <__lshift>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	6849      	ldr	r1, [r1, #4]
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	4607      	mov	r7, r0
 8007aca:	4691      	mov	r9, r2
 8007acc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ad0:	f108 0601 	add.w	r6, r8, #1
 8007ad4:	42b3      	cmp	r3, r6
 8007ad6:	db0b      	blt.n	8007af0 <__lshift+0x38>
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff fd95 	bl	8007608 <_Balloc>
 8007ade:	4605      	mov	r5, r0
 8007ae0:	b948      	cbnz	r0, 8007af6 <__lshift+0x3e>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b28      	ldr	r3, [pc, #160]	@ (8007b88 <__lshift+0xd0>)
 8007ae6:	4829      	ldr	r0, [pc, #164]	@ (8007b8c <__lshift+0xd4>)
 8007ae8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007aec:	f001 fd74 	bl	80095d8 <__assert_func>
 8007af0:	3101      	adds	r1, #1
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	e7ee      	b.n	8007ad4 <__lshift+0x1c>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f100 0114 	add.w	r1, r0, #20
 8007afc:	f100 0210 	add.w	r2, r0, #16
 8007b00:	4618      	mov	r0, r3
 8007b02:	4553      	cmp	r3, sl
 8007b04:	db33      	blt.n	8007b6e <__lshift+0xb6>
 8007b06:	6920      	ldr	r0, [r4, #16]
 8007b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b0c:	f104 0314 	add.w	r3, r4, #20
 8007b10:	f019 091f 	ands.w	r9, r9, #31
 8007b14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b1c:	d02b      	beq.n	8007b76 <__lshift+0xbe>
 8007b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b22:	468a      	mov	sl, r1
 8007b24:	2200      	movs	r2, #0
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	fa00 f009 	lsl.w	r0, r0, r9
 8007b2c:	4310      	orrs	r0, r2
 8007b2e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b36:	459c      	cmp	ip, r3
 8007b38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b3c:	d8f3      	bhi.n	8007b26 <__lshift+0x6e>
 8007b3e:	ebac 0304 	sub.w	r3, ip, r4
 8007b42:	3b15      	subs	r3, #21
 8007b44:	f023 0303 	bic.w	r3, r3, #3
 8007b48:	3304      	adds	r3, #4
 8007b4a:	f104 0015 	add.w	r0, r4, #21
 8007b4e:	4584      	cmp	ip, r0
 8007b50:	bf38      	it	cc
 8007b52:	2304      	movcc	r3, #4
 8007b54:	50ca      	str	r2, [r1, r3]
 8007b56:	b10a      	cbz	r2, 8007b5c <__lshift+0xa4>
 8007b58:	f108 0602 	add.w	r6, r8, #2
 8007b5c:	3e01      	subs	r6, #1
 8007b5e:	4638      	mov	r0, r7
 8007b60:	612e      	str	r6, [r5, #16]
 8007b62:	4621      	mov	r1, r4
 8007b64:	f7ff fd90 	bl	8007688 <_Bfree>
 8007b68:	4628      	mov	r0, r5
 8007b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b72:	3301      	adds	r3, #1
 8007b74:	e7c5      	b.n	8007b02 <__lshift+0x4a>
 8007b76:	3904      	subs	r1, #4
 8007b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b80:	459c      	cmp	ip, r3
 8007b82:	d8f9      	bhi.n	8007b78 <__lshift+0xc0>
 8007b84:	e7ea      	b.n	8007b5c <__lshift+0xa4>
 8007b86:	bf00      	nop
 8007b88:	08009f6d 	.word	0x08009f6d
 8007b8c:	08009f7e 	.word	0x08009f7e

08007b90 <__mcmp>:
 8007b90:	690a      	ldr	r2, [r1, #16]
 8007b92:	4603      	mov	r3, r0
 8007b94:	6900      	ldr	r0, [r0, #16]
 8007b96:	1a80      	subs	r0, r0, r2
 8007b98:	b530      	push	{r4, r5, lr}
 8007b9a:	d10e      	bne.n	8007bba <__mcmp+0x2a>
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	3114      	adds	r1, #20
 8007ba0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ba4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ba8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bb0:	4295      	cmp	r5, r2
 8007bb2:	d003      	beq.n	8007bbc <__mcmp+0x2c>
 8007bb4:	d205      	bcs.n	8007bc2 <__mcmp+0x32>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	bd30      	pop	{r4, r5, pc}
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d3f3      	bcc.n	8007ba8 <__mcmp+0x18>
 8007bc0:	e7fb      	b.n	8007bba <__mcmp+0x2a>
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	e7f9      	b.n	8007bba <__mcmp+0x2a>
	...

08007bc8 <__mdiff>:
 8007bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4689      	mov	r9, r1
 8007bce:	4606      	mov	r6, r0
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	f7ff ffdb 	bl	8007b90 <__mcmp>
 8007bda:	1e05      	subs	r5, r0, #0
 8007bdc:	d112      	bne.n	8007c04 <__mdiff+0x3c>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff fd11 	bl	8007608 <_Balloc>
 8007be6:	4602      	mov	r2, r0
 8007be8:	b928      	cbnz	r0, 8007bf6 <__mdiff+0x2e>
 8007bea:	4b3f      	ldr	r3, [pc, #252]	@ (8007ce8 <__mdiff+0x120>)
 8007bec:	f240 2137 	movw	r1, #567	@ 0x237
 8007bf0:	483e      	ldr	r0, [pc, #248]	@ (8007cec <__mdiff+0x124>)
 8007bf2:	f001 fcf1 	bl	80095d8 <__assert_func>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	b003      	add	sp, #12
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	bfbc      	itt	lt
 8007c06:	464b      	movlt	r3, r9
 8007c08:	46a1      	movlt	r9, r4
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c10:	bfba      	itte	lt
 8007c12:	461c      	movlt	r4, r3
 8007c14:	2501      	movlt	r5, #1
 8007c16:	2500      	movge	r5, #0
 8007c18:	f7ff fcf6 	bl	8007608 <_Balloc>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	b918      	cbnz	r0, 8007c28 <__mdiff+0x60>
 8007c20:	4b31      	ldr	r3, [pc, #196]	@ (8007ce8 <__mdiff+0x120>)
 8007c22:	f240 2145 	movw	r1, #581	@ 0x245
 8007c26:	e7e3      	b.n	8007bf0 <__mdiff+0x28>
 8007c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c2c:	6926      	ldr	r6, [r4, #16]
 8007c2e:	60c5      	str	r5, [r0, #12]
 8007c30:	f109 0310 	add.w	r3, r9, #16
 8007c34:	f109 0514 	add.w	r5, r9, #20
 8007c38:	f104 0e14 	add.w	lr, r4, #20
 8007c3c:	f100 0b14 	add.w	fp, r0, #20
 8007c40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	46d9      	mov	r9, fp
 8007c4c:	f04f 0c00 	mov.w	ip, #0
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	fa1f f38a 	uxth.w	r3, sl
 8007c60:	4619      	mov	r1, r3
 8007c62:	b283      	uxth	r3, r0
 8007c64:	1acb      	subs	r3, r1, r3
 8007c66:	0c00      	lsrs	r0, r0, #16
 8007c68:	4463      	add	r3, ip
 8007c6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c78:	4576      	cmp	r6, lr
 8007c7a:	f849 3b04 	str.w	r3, [r9], #4
 8007c7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c82:	d8e5      	bhi.n	8007c50 <__mdiff+0x88>
 8007c84:	1b33      	subs	r3, r6, r4
 8007c86:	3b15      	subs	r3, #21
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	3415      	adds	r4, #21
 8007c8e:	3304      	adds	r3, #4
 8007c90:	42a6      	cmp	r6, r4
 8007c92:	bf38      	it	cc
 8007c94:	2304      	movcc	r3, #4
 8007c96:	441d      	add	r5, r3
 8007c98:	445b      	add	r3, fp
 8007c9a:	461e      	mov	r6, r3
 8007c9c:	462c      	mov	r4, r5
 8007c9e:	4544      	cmp	r4, r8
 8007ca0:	d30e      	bcc.n	8007cc0 <__mdiff+0xf8>
 8007ca2:	f108 0103 	add.w	r1, r8, #3
 8007ca6:	1b49      	subs	r1, r1, r5
 8007ca8:	f021 0103 	bic.w	r1, r1, #3
 8007cac:	3d03      	subs	r5, #3
 8007cae:	45a8      	cmp	r8, r5
 8007cb0:	bf38      	it	cc
 8007cb2:	2100      	movcc	r1, #0
 8007cb4:	440b      	add	r3, r1
 8007cb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cba:	b191      	cbz	r1, 8007ce2 <__mdiff+0x11a>
 8007cbc:	6117      	str	r7, [r2, #16]
 8007cbe:	e79d      	b.n	8007bfc <__mdiff+0x34>
 8007cc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cc4:	46e6      	mov	lr, ip
 8007cc6:	0c08      	lsrs	r0, r1, #16
 8007cc8:	fa1c fc81 	uxtah	ip, ip, r1
 8007ccc:	4471      	add	r1, lr
 8007cce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cd2:	b289      	uxth	r1, r1
 8007cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cd8:	f846 1b04 	str.w	r1, [r6], #4
 8007cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ce0:	e7dd      	b.n	8007c9e <__mdiff+0xd6>
 8007ce2:	3f01      	subs	r7, #1
 8007ce4:	e7e7      	b.n	8007cb6 <__mdiff+0xee>
 8007ce6:	bf00      	nop
 8007ce8:	08009f6d 	.word	0x08009f6d
 8007cec:	08009f7e 	.word	0x08009f7e

08007cf0 <__ulp>:
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	ed8d 0b00 	vstr	d0, [sp]
 8007cf6:	9a01      	ldr	r2, [sp, #4]
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d38 <__ulp+0x48>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc08      	bgt.n	8007d16 <__ulp+0x26>
 8007d04:	425b      	negs	r3, r3
 8007d06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d0e:	da04      	bge.n	8007d1a <__ulp+0x2a>
 8007d10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d14:	4113      	asrs	r3, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	e008      	b.n	8007d2c <__ulp+0x3c>
 8007d1a:	f1a2 0314 	sub.w	r3, r2, #20
 8007d1e:	2b1e      	cmp	r3, #30
 8007d20:	bfda      	itte	le
 8007d22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d26:	40da      	lsrle	r2, r3
 8007d28:	2201      	movgt	r2, #1
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	ec41 0b10 	vmov	d0, r0, r1
 8007d34:	b002      	add	sp, #8
 8007d36:	4770      	bx	lr
 8007d38:	7ff00000 	.word	0x7ff00000

08007d3c <__b2d>:
 8007d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d40:	6906      	ldr	r6, [r0, #16]
 8007d42:	f100 0814 	add.w	r8, r0, #20
 8007d46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d4a:	1f37      	subs	r7, r6, #4
 8007d4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7ff fd4b 	bl	80077ec <__hi0bits>
 8007d56:	f1c0 0320 	rsb	r3, r0, #32
 8007d5a:	280a      	cmp	r0, #10
 8007d5c:	600b      	str	r3, [r1, #0]
 8007d5e:	491b      	ldr	r1, [pc, #108]	@ (8007dcc <__b2d+0x90>)
 8007d60:	dc15      	bgt.n	8007d8e <__b2d+0x52>
 8007d62:	f1c0 0c0b 	rsb	ip, r0, #11
 8007d66:	fa22 f30c 	lsr.w	r3, r2, ip
 8007d6a:	45b8      	cmp	r8, r7
 8007d6c:	ea43 0501 	orr.w	r5, r3, r1
 8007d70:	bf34      	ite	cc
 8007d72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d76:	2300      	movcs	r3, #0
 8007d78:	3015      	adds	r0, #21
 8007d7a:	fa02 f000 	lsl.w	r0, r2, r0
 8007d7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d82:	4303      	orrs	r3, r0
 8007d84:	461c      	mov	r4, r3
 8007d86:	ec45 4b10 	vmov	d0, r4, r5
 8007d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8e:	45b8      	cmp	r8, r7
 8007d90:	bf3a      	itte	cc
 8007d92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d96:	f1a6 0708 	subcc.w	r7, r6, #8
 8007d9a:	2300      	movcs	r3, #0
 8007d9c:	380b      	subs	r0, #11
 8007d9e:	d012      	beq.n	8007dc6 <__b2d+0x8a>
 8007da0:	f1c0 0120 	rsb	r1, r0, #32
 8007da4:	fa23 f401 	lsr.w	r4, r3, r1
 8007da8:	4082      	lsls	r2, r0
 8007daa:	4322      	orrs	r2, r4
 8007dac:	4547      	cmp	r7, r8
 8007dae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007db2:	bf8c      	ite	hi
 8007db4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007db8:	2200      	movls	r2, #0
 8007dba:	4083      	lsls	r3, r0
 8007dbc:	40ca      	lsrs	r2, r1
 8007dbe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	e7de      	b.n	8007d84 <__b2d+0x48>
 8007dc6:	ea42 0501 	orr.w	r5, r2, r1
 8007dca:	e7db      	b.n	8007d84 <__b2d+0x48>
 8007dcc:	3ff00000 	.word	0x3ff00000

08007dd0 <__d2b>:
 8007dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	ec59 8b10 	vmov	r8, r9, d0
 8007ddc:	4616      	mov	r6, r2
 8007dde:	f7ff fc13 	bl	8007608 <_Balloc>
 8007de2:	4604      	mov	r4, r0
 8007de4:	b930      	cbnz	r0, 8007df4 <__d2b+0x24>
 8007de6:	4602      	mov	r2, r0
 8007de8:	4b23      	ldr	r3, [pc, #140]	@ (8007e78 <__d2b+0xa8>)
 8007dea:	4824      	ldr	r0, [pc, #144]	@ (8007e7c <__d2b+0xac>)
 8007dec:	f240 310f 	movw	r1, #783	@ 0x30f
 8007df0:	f001 fbf2 	bl	80095d8 <__assert_func>
 8007df4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dfc:	b10d      	cbz	r5, 8007e02 <__d2b+0x32>
 8007dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	f1b8 0300 	subs.w	r3, r8, #0
 8007e08:	d023      	beq.n	8007e52 <__d2b+0x82>
 8007e0a:	4668      	mov	r0, sp
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	f7ff fd0c 	bl	800782a <__lo0bits>
 8007e12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e16:	b1d0      	cbz	r0, 8007e4e <__d2b+0x7e>
 8007e18:	f1c0 0320 	rsb	r3, r0, #32
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	430b      	orrs	r3, r1
 8007e22:	40c2      	lsrs	r2, r0
 8007e24:	6163      	str	r3, [r4, #20]
 8007e26:	9201      	str	r2, [sp, #4]
 8007e28:	9b01      	ldr	r3, [sp, #4]
 8007e2a:	61a3      	str	r3, [r4, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bf0c      	ite	eq
 8007e30:	2201      	moveq	r2, #1
 8007e32:	2202      	movne	r2, #2
 8007e34:	6122      	str	r2, [r4, #16]
 8007e36:	b1a5      	cbz	r5, 8007e62 <__d2b+0x92>
 8007e38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e3c:	4405      	add	r5, r0
 8007e3e:	603d      	str	r5, [r7, #0]
 8007e40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	4620      	mov	r0, r4
 8007e48:	b003      	add	sp, #12
 8007e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	6161      	str	r1, [r4, #20]
 8007e50:	e7ea      	b.n	8007e28 <__d2b+0x58>
 8007e52:	a801      	add	r0, sp, #4
 8007e54:	f7ff fce9 	bl	800782a <__lo0bits>
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	6163      	str	r3, [r4, #20]
 8007e5c:	3020      	adds	r0, #32
 8007e5e:	2201      	movs	r2, #1
 8007e60:	e7e8      	b.n	8007e34 <__d2b+0x64>
 8007e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e6a:	6038      	str	r0, [r7, #0]
 8007e6c:	6918      	ldr	r0, [r3, #16]
 8007e6e:	f7ff fcbd 	bl	80077ec <__hi0bits>
 8007e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e76:	e7e5      	b.n	8007e44 <__d2b+0x74>
 8007e78:	08009f6d 	.word	0x08009f6d
 8007e7c:	08009f7e 	.word	0x08009f7e

08007e80 <__ratio>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	b085      	sub	sp, #20
 8007e86:	e9cd 1000 	strd	r1, r0, [sp]
 8007e8a:	a902      	add	r1, sp, #8
 8007e8c:	f7ff ff56 	bl	8007d3c <__b2d>
 8007e90:	9800      	ldr	r0, [sp, #0]
 8007e92:	a903      	add	r1, sp, #12
 8007e94:	ec55 4b10 	vmov	r4, r5, d0
 8007e98:	f7ff ff50 	bl	8007d3c <__b2d>
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	6919      	ldr	r1, [r3, #16]
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	1ac9      	subs	r1, r1, r3
 8007ea6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	ec5b ab10 	vmov	sl, fp, d0
 8007eb0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfce      	itee	gt
 8007eb8:	462a      	movgt	r2, r5
 8007eba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ebe:	465a      	movle	r2, fp
 8007ec0:	462f      	mov	r7, r5
 8007ec2:	46d9      	mov	r9, fp
 8007ec4:	bfcc      	ite	gt
 8007ec6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007eca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007ece:	464b      	mov	r3, r9
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	f7f8 fce1 	bl	800089c <__aeabi_ddiv>
 8007eda:	ec41 0b10 	vmov	d0, r0, r1
 8007ede:	b005      	add	sp, #20
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ee4 <__copybits>:
 8007ee4:	3901      	subs	r1, #1
 8007ee6:	b570      	push	{r4, r5, r6, lr}
 8007ee8:	1149      	asrs	r1, r1, #5
 8007eea:	6914      	ldr	r4, [r2, #16]
 8007eec:	3101      	adds	r1, #1
 8007eee:	f102 0314 	add.w	r3, r2, #20
 8007ef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007efa:	1f05      	subs	r5, r0, #4
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d30c      	bcc.n	8007f1a <__copybits+0x36>
 8007f00:	1aa3      	subs	r3, r4, r2
 8007f02:	3b11      	subs	r3, #17
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	3211      	adds	r2, #17
 8007f0a:	42a2      	cmp	r2, r4
 8007f0c:	bf88      	it	hi
 8007f0e:	2300      	movhi	r3, #0
 8007f10:	4418      	add	r0, r3
 8007f12:	2300      	movs	r3, #0
 8007f14:	4288      	cmp	r0, r1
 8007f16:	d305      	bcc.n	8007f24 <__copybits+0x40>
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f22:	e7eb      	b.n	8007efc <__copybits+0x18>
 8007f24:	f840 3b04 	str.w	r3, [r0], #4
 8007f28:	e7f4      	b.n	8007f14 <__copybits+0x30>

08007f2a <__any_on>:
 8007f2a:	f100 0214 	add.w	r2, r0, #20
 8007f2e:	6900      	ldr	r0, [r0, #16]
 8007f30:	114b      	asrs	r3, r1, #5
 8007f32:	4298      	cmp	r0, r3
 8007f34:	b510      	push	{r4, lr}
 8007f36:	db11      	blt.n	8007f5c <__any_on+0x32>
 8007f38:	dd0a      	ble.n	8007f50 <__any_on+0x26>
 8007f3a:	f011 011f 	ands.w	r1, r1, #31
 8007f3e:	d007      	beq.n	8007f50 <__any_on+0x26>
 8007f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f44:	fa24 f001 	lsr.w	r0, r4, r1
 8007f48:	fa00 f101 	lsl.w	r1, r0, r1
 8007f4c:	428c      	cmp	r4, r1
 8007f4e:	d10b      	bne.n	8007f68 <__any_on+0x3e>
 8007f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d803      	bhi.n	8007f60 <__any_on+0x36>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	bd10      	pop	{r4, pc}
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	e7f7      	b.n	8007f50 <__any_on+0x26>
 8007f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d0f5      	beq.n	8007f54 <__any_on+0x2a>
 8007f68:	2001      	movs	r0, #1
 8007f6a:	e7f6      	b.n	8007f5a <__any_on+0x30>

08007f6c <sulp>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
 8007f72:	ec45 4b10 	vmov	d0, r4, r5
 8007f76:	4616      	mov	r6, r2
 8007f78:	f7ff feba 	bl	8007cf0 <__ulp>
 8007f7c:	ec51 0b10 	vmov	r0, r1, d0
 8007f80:	b17e      	cbz	r6, 8007fa2 <sulp+0x36>
 8007f82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd09      	ble.n	8007fa2 <sulp+0x36>
 8007f8e:	051b      	lsls	r3, r3, #20
 8007f90:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f94:	2400      	movs	r4, #0
 8007f96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	f7f8 fb53 	bl	8000648 <__aeabi_dmul>
 8007fa2:	ec41 0b10 	vmov	d0, r0, r1
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}

08007fa8 <_strtod_l>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	b09f      	sub	sp, #124	@ 0x7c
 8007fae:	460c      	mov	r4, r1
 8007fb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007fb6:	9005      	str	r0, [sp, #20]
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	f04f 0b00 	mov.w	fp, #0
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fc4:	7811      	ldrb	r1, [r2, #0]
 8007fc6:	292b      	cmp	r1, #43	@ 0x2b
 8007fc8:	d04a      	beq.n	8008060 <_strtod_l+0xb8>
 8007fca:	d838      	bhi.n	800803e <_strtod_l+0x96>
 8007fcc:	290d      	cmp	r1, #13
 8007fce:	d832      	bhi.n	8008036 <_strtod_l+0x8e>
 8007fd0:	2908      	cmp	r1, #8
 8007fd2:	d832      	bhi.n	800803a <_strtod_l+0x92>
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d03b      	beq.n	8008050 <_strtod_l+0xa8>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007fdc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007fde:	782a      	ldrb	r2, [r5, #0]
 8007fe0:	2a30      	cmp	r2, #48	@ 0x30
 8007fe2:	f040 80b3 	bne.w	800814c <_strtod_l+0x1a4>
 8007fe6:	786a      	ldrb	r2, [r5, #1]
 8007fe8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fec:	2a58      	cmp	r2, #88	@ 0x58
 8007fee:	d16e      	bne.n	80080ce <_strtod_l+0x126>
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4a8e      	ldr	r2, [pc, #568]	@ (8008234 <_strtod_l+0x28c>)
 8007ffc:	9805      	ldr	r0, [sp, #20]
 8007ffe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008000:	a919      	add	r1, sp, #100	@ 0x64
 8008002:	f001 fb83 	bl	800970c <__gethex>
 8008006:	f010 060f 	ands.w	r6, r0, #15
 800800a:	4604      	mov	r4, r0
 800800c:	d005      	beq.n	800801a <_strtod_l+0x72>
 800800e:	2e06      	cmp	r6, #6
 8008010:	d128      	bne.n	8008064 <_strtod_l+0xbc>
 8008012:	3501      	adds	r5, #1
 8008014:	2300      	movs	r3, #0
 8008016:	9519      	str	r5, [sp, #100]	@ 0x64
 8008018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800801a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800801c:	2b00      	cmp	r3, #0
 800801e:	f040 858e 	bne.w	8008b3e <_strtod_l+0xb96>
 8008022:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008024:	b1cb      	cbz	r3, 800805a <_strtod_l+0xb2>
 8008026:	4652      	mov	r2, sl
 8008028:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800802c:	ec43 2b10 	vmov	d0, r2, r3
 8008030:	b01f      	add	sp, #124	@ 0x7c
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	2920      	cmp	r1, #32
 8008038:	d1ce      	bne.n	8007fd8 <_strtod_l+0x30>
 800803a:	3201      	adds	r2, #1
 800803c:	e7c1      	b.n	8007fc2 <_strtod_l+0x1a>
 800803e:	292d      	cmp	r1, #45	@ 0x2d
 8008040:	d1ca      	bne.n	8007fd8 <_strtod_l+0x30>
 8008042:	2101      	movs	r1, #1
 8008044:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008046:	1c51      	adds	r1, r2, #1
 8008048:	9119      	str	r1, [sp, #100]	@ 0x64
 800804a:	7852      	ldrb	r2, [r2, #1]
 800804c:	2a00      	cmp	r2, #0
 800804e:	d1c5      	bne.n	8007fdc <_strtod_l+0x34>
 8008050:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008052:	9419      	str	r4, [sp, #100]	@ 0x64
 8008054:	2b00      	cmp	r3, #0
 8008056:	f040 8570 	bne.w	8008b3a <_strtod_l+0xb92>
 800805a:	4652      	mov	r2, sl
 800805c:	465b      	mov	r3, fp
 800805e:	e7e5      	b.n	800802c <_strtod_l+0x84>
 8008060:	2100      	movs	r1, #0
 8008062:	e7ef      	b.n	8008044 <_strtod_l+0x9c>
 8008064:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008066:	b13a      	cbz	r2, 8008078 <_strtod_l+0xd0>
 8008068:	2135      	movs	r1, #53	@ 0x35
 800806a:	a81c      	add	r0, sp, #112	@ 0x70
 800806c:	f7ff ff3a 	bl	8007ee4 <__copybits>
 8008070:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008072:	9805      	ldr	r0, [sp, #20]
 8008074:	f7ff fb08 	bl	8007688 <_Bfree>
 8008078:	3e01      	subs	r6, #1
 800807a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800807c:	2e04      	cmp	r6, #4
 800807e:	d806      	bhi.n	800808e <_strtod_l+0xe6>
 8008080:	e8df f006 	tbb	[pc, r6]
 8008084:	201d0314 	.word	0x201d0314
 8008088:	14          	.byte	0x14
 8008089:	00          	.byte	0x00
 800808a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800808e:	05e1      	lsls	r1, r4, #23
 8008090:	bf48      	it	mi
 8008092:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008096:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800809a:	0d1b      	lsrs	r3, r3, #20
 800809c:	051b      	lsls	r3, r3, #20
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1bb      	bne.n	800801a <_strtod_l+0x72>
 80080a2:	f7fe fb31 	bl	8006708 <__errno>
 80080a6:	2322      	movs	r3, #34	@ 0x22
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	e7b6      	b.n	800801a <_strtod_l+0x72>
 80080ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80080b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80080b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080bc:	e7e7      	b.n	800808e <_strtod_l+0xe6>
 80080be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800823c <_strtod_l+0x294>
 80080c2:	e7e4      	b.n	800808e <_strtod_l+0xe6>
 80080c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80080c8:	f04f 3aff 	mov.w	sl, #4294967295
 80080cc:	e7df      	b.n	800808e <_strtod_l+0xe6>
 80080ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b30      	cmp	r3, #48	@ 0x30
 80080d8:	d0f9      	beq.n	80080ce <_strtod_l+0x126>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d09d      	beq.n	800801a <_strtod_l+0x72>
 80080de:	2301      	movs	r3, #1
 80080e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80080e6:	2300      	movs	r3, #0
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ec:	461f      	mov	r7, r3
 80080ee:	220a      	movs	r2, #10
 80080f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80080f2:	7805      	ldrb	r5, [r0, #0]
 80080f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80080f8:	b2d9      	uxtb	r1, r3
 80080fa:	2909      	cmp	r1, #9
 80080fc:	d928      	bls.n	8008150 <_strtod_l+0x1a8>
 80080fe:	494e      	ldr	r1, [pc, #312]	@ (8008238 <_strtod_l+0x290>)
 8008100:	2201      	movs	r2, #1
 8008102:	f001 fa0d 	bl	8009520 <strncmp>
 8008106:	2800      	cmp	r0, #0
 8008108:	d032      	beq.n	8008170 <_strtod_l+0x1c8>
 800810a:	2000      	movs	r0, #0
 800810c:	462a      	mov	r2, r5
 800810e:	4681      	mov	r9, r0
 8008110:	463d      	mov	r5, r7
 8008112:	4603      	mov	r3, r0
 8008114:	2a65      	cmp	r2, #101	@ 0x65
 8008116:	d001      	beq.n	800811c <_strtod_l+0x174>
 8008118:	2a45      	cmp	r2, #69	@ 0x45
 800811a:	d114      	bne.n	8008146 <_strtod_l+0x19e>
 800811c:	b91d      	cbnz	r5, 8008126 <_strtod_l+0x17e>
 800811e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008120:	4302      	orrs	r2, r0
 8008122:	d095      	beq.n	8008050 <_strtod_l+0xa8>
 8008124:	2500      	movs	r5, #0
 8008126:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008128:	1c62      	adds	r2, r4, #1
 800812a:	9219      	str	r2, [sp, #100]	@ 0x64
 800812c:	7862      	ldrb	r2, [r4, #1]
 800812e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008130:	d077      	beq.n	8008222 <_strtod_l+0x27a>
 8008132:	2a2d      	cmp	r2, #45	@ 0x2d
 8008134:	d07b      	beq.n	800822e <_strtod_l+0x286>
 8008136:	f04f 0c00 	mov.w	ip, #0
 800813a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800813e:	2909      	cmp	r1, #9
 8008140:	f240 8082 	bls.w	8008248 <_strtod_l+0x2a0>
 8008144:	9419      	str	r4, [sp, #100]	@ 0x64
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	e0a2      	b.n	8008292 <_strtod_l+0x2ea>
 800814c:	2300      	movs	r3, #0
 800814e:	e7c7      	b.n	80080e0 <_strtod_l+0x138>
 8008150:	2f08      	cmp	r7, #8
 8008152:	bfd5      	itete	le
 8008154:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008156:	9908      	ldrgt	r1, [sp, #32]
 8008158:	fb02 3301 	mlale	r3, r2, r1, r3
 800815c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008160:	f100 0001 	add.w	r0, r0, #1
 8008164:	bfd4      	ite	le
 8008166:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008168:	9308      	strgt	r3, [sp, #32]
 800816a:	3701      	adds	r7, #1
 800816c:	9019      	str	r0, [sp, #100]	@ 0x64
 800816e:	e7bf      	b.n	80080f0 <_strtod_l+0x148>
 8008170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	9219      	str	r2, [sp, #100]	@ 0x64
 8008176:	785a      	ldrb	r2, [r3, #1]
 8008178:	b37f      	cbz	r7, 80081da <_strtod_l+0x232>
 800817a:	4681      	mov	r9, r0
 800817c:	463d      	mov	r5, r7
 800817e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008182:	2b09      	cmp	r3, #9
 8008184:	d912      	bls.n	80081ac <_strtod_l+0x204>
 8008186:	2301      	movs	r3, #1
 8008188:	e7c4      	b.n	8008114 <_strtod_l+0x16c>
 800818a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008190:	785a      	ldrb	r2, [r3, #1]
 8008192:	3001      	adds	r0, #1
 8008194:	2a30      	cmp	r2, #48	@ 0x30
 8008196:	d0f8      	beq.n	800818a <_strtod_l+0x1e2>
 8008198:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800819c:	2b08      	cmp	r3, #8
 800819e:	f200 84d3 	bhi.w	8008b48 <_strtod_l+0xba0>
 80081a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80081a6:	4681      	mov	r9, r0
 80081a8:	2000      	movs	r0, #0
 80081aa:	4605      	mov	r5, r0
 80081ac:	3a30      	subs	r2, #48	@ 0x30
 80081ae:	f100 0301 	add.w	r3, r0, #1
 80081b2:	d02a      	beq.n	800820a <_strtod_l+0x262>
 80081b4:	4499      	add	r9, r3
 80081b6:	eb00 0c05 	add.w	ip, r0, r5
 80081ba:	462b      	mov	r3, r5
 80081bc:	210a      	movs	r1, #10
 80081be:	4563      	cmp	r3, ip
 80081c0:	d10d      	bne.n	80081de <_strtod_l+0x236>
 80081c2:	1c69      	adds	r1, r5, #1
 80081c4:	4401      	add	r1, r0
 80081c6:	4428      	add	r0, r5
 80081c8:	2808      	cmp	r0, #8
 80081ca:	dc16      	bgt.n	80081fa <_strtod_l+0x252>
 80081cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80081ce:	230a      	movs	r3, #10
 80081d0:	fb03 2300 	mla	r3, r3, r0, r2
 80081d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d6:	2300      	movs	r3, #0
 80081d8:	e018      	b.n	800820c <_strtod_l+0x264>
 80081da:	4638      	mov	r0, r7
 80081dc:	e7da      	b.n	8008194 <_strtod_l+0x1ec>
 80081de:	2b08      	cmp	r3, #8
 80081e0:	f103 0301 	add.w	r3, r3, #1
 80081e4:	dc03      	bgt.n	80081ee <_strtod_l+0x246>
 80081e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80081e8:	434e      	muls	r6, r1
 80081ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80081ec:	e7e7      	b.n	80081be <_strtod_l+0x216>
 80081ee:	2b10      	cmp	r3, #16
 80081f0:	bfde      	ittt	le
 80081f2:	9e08      	ldrle	r6, [sp, #32]
 80081f4:	434e      	mulle	r6, r1
 80081f6:	9608      	strle	r6, [sp, #32]
 80081f8:	e7e1      	b.n	80081be <_strtod_l+0x216>
 80081fa:	280f      	cmp	r0, #15
 80081fc:	dceb      	bgt.n	80081d6 <_strtod_l+0x22e>
 80081fe:	9808      	ldr	r0, [sp, #32]
 8008200:	230a      	movs	r3, #10
 8008202:	fb03 2300 	mla	r3, r3, r0, r2
 8008206:	9308      	str	r3, [sp, #32]
 8008208:	e7e5      	b.n	80081d6 <_strtod_l+0x22e>
 800820a:	4629      	mov	r1, r5
 800820c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800820e:	1c50      	adds	r0, r2, #1
 8008210:	9019      	str	r0, [sp, #100]	@ 0x64
 8008212:	7852      	ldrb	r2, [r2, #1]
 8008214:	4618      	mov	r0, r3
 8008216:	460d      	mov	r5, r1
 8008218:	e7b1      	b.n	800817e <_strtod_l+0x1d6>
 800821a:	f04f 0900 	mov.w	r9, #0
 800821e:	2301      	movs	r3, #1
 8008220:	e77d      	b.n	800811e <_strtod_l+0x176>
 8008222:	f04f 0c00 	mov.w	ip, #0
 8008226:	1ca2      	adds	r2, r4, #2
 8008228:	9219      	str	r2, [sp, #100]	@ 0x64
 800822a:	78a2      	ldrb	r2, [r4, #2]
 800822c:	e785      	b.n	800813a <_strtod_l+0x192>
 800822e:	f04f 0c01 	mov.w	ip, #1
 8008232:	e7f8      	b.n	8008226 <_strtod_l+0x27e>
 8008234:	0800a0f0 	.word	0x0800a0f0
 8008238:	0800a0d8 	.word	0x0800a0d8
 800823c:	7ff00000 	.word	0x7ff00000
 8008240:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008242:	1c51      	adds	r1, r2, #1
 8008244:	9119      	str	r1, [sp, #100]	@ 0x64
 8008246:	7852      	ldrb	r2, [r2, #1]
 8008248:	2a30      	cmp	r2, #48	@ 0x30
 800824a:	d0f9      	beq.n	8008240 <_strtod_l+0x298>
 800824c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008250:	2908      	cmp	r1, #8
 8008252:	f63f af78 	bhi.w	8008146 <_strtod_l+0x19e>
 8008256:	3a30      	subs	r2, #48	@ 0x30
 8008258:	920e      	str	r2, [sp, #56]	@ 0x38
 800825a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800825c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800825e:	f04f 080a 	mov.w	r8, #10
 8008262:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008264:	1c56      	adds	r6, r2, #1
 8008266:	9619      	str	r6, [sp, #100]	@ 0x64
 8008268:	7852      	ldrb	r2, [r2, #1]
 800826a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800826e:	f1be 0f09 	cmp.w	lr, #9
 8008272:	d939      	bls.n	80082e8 <_strtod_l+0x340>
 8008274:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008276:	1a76      	subs	r6, r6, r1
 8008278:	2e08      	cmp	r6, #8
 800827a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800827e:	dc03      	bgt.n	8008288 <_strtod_l+0x2e0>
 8008280:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008282:	4588      	cmp	r8, r1
 8008284:	bfa8      	it	ge
 8008286:	4688      	movge	r8, r1
 8008288:	f1bc 0f00 	cmp.w	ip, #0
 800828c:	d001      	beq.n	8008292 <_strtod_l+0x2ea>
 800828e:	f1c8 0800 	rsb	r8, r8, #0
 8008292:	2d00      	cmp	r5, #0
 8008294:	d14e      	bne.n	8008334 <_strtod_l+0x38c>
 8008296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008298:	4308      	orrs	r0, r1
 800829a:	f47f aebe 	bne.w	800801a <_strtod_l+0x72>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f47f aed6 	bne.w	8008050 <_strtod_l+0xa8>
 80082a4:	2a69      	cmp	r2, #105	@ 0x69
 80082a6:	d028      	beq.n	80082fa <_strtod_l+0x352>
 80082a8:	dc25      	bgt.n	80082f6 <_strtod_l+0x34e>
 80082aa:	2a49      	cmp	r2, #73	@ 0x49
 80082ac:	d025      	beq.n	80082fa <_strtod_l+0x352>
 80082ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80082b0:	f47f aece 	bne.w	8008050 <_strtod_l+0xa8>
 80082b4:	499b      	ldr	r1, [pc, #620]	@ (8008524 <_strtod_l+0x57c>)
 80082b6:	a819      	add	r0, sp, #100	@ 0x64
 80082b8:	f001 fc4a 	bl	8009b50 <__match>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f43f aec7 	beq.w	8008050 <_strtod_l+0xa8>
 80082c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b28      	cmp	r3, #40	@ 0x28
 80082c8:	d12e      	bne.n	8008328 <_strtod_l+0x380>
 80082ca:	4997      	ldr	r1, [pc, #604]	@ (8008528 <_strtod_l+0x580>)
 80082cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80082ce:	a819      	add	r0, sp, #100	@ 0x64
 80082d0:	f001 fc52 	bl	8009b78 <__hexnan>
 80082d4:	2805      	cmp	r0, #5
 80082d6:	d127      	bne.n	8008328 <_strtod_l+0x380>
 80082d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80082de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80082e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80082e6:	e698      	b.n	800801a <_strtod_l+0x72>
 80082e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082ea:	fb08 2101 	mla	r1, r8, r1, r2
 80082ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80082f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80082f4:	e7b5      	b.n	8008262 <_strtod_l+0x2ba>
 80082f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80082f8:	e7da      	b.n	80082b0 <_strtod_l+0x308>
 80082fa:	498c      	ldr	r1, [pc, #560]	@ (800852c <_strtod_l+0x584>)
 80082fc:	a819      	add	r0, sp, #100	@ 0x64
 80082fe:	f001 fc27 	bl	8009b50 <__match>
 8008302:	2800      	cmp	r0, #0
 8008304:	f43f aea4 	beq.w	8008050 <_strtod_l+0xa8>
 8008308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800830a:	4989      	ldr	r1, [pc, #548]	@ (8008530 <_strtod_l+0x588>)
 800830c:	3b01      	subs	r3, #1
 800830e:	a819      	add	r0, sp, #100	@ 0x64
 8008310:	9319      	str	r3, [sp, #100]	@ 0x64
 8008312:	f001 fc1d 	bl	8009b50 <__match>
 8008316:	b910      	cbnz	r0, 800831e <_strtod_l+0x376>
 8008318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800831a:	3301      	adds	r3, #1
 800831c:	9319      	str	r3, [sp, #100]	@ 0x64
 800831e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008540 <_strtod_l+0x598>
 8008322:	f04f 0a00 	mov.w	sl, #0
 8008326:	e678      	b.n	800801a <_strtod_l+0x72>
 8008328:	4882      	ldr	r0, [pc, #520]	@ (8008534 <_strtod_l+0x58c>)
 800832a:	f001 f94d 	bl	80095c8 <nan>
 800832e:	ec5b ab10 	vmov	sl, fp, d0
 8008332:	e672      	b.n	800801a <_strtod_l+0x72>
 8008334:	eba8 0309 	sub.w	r3, r8, r9
 8008338:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800833a:	9309      	str	r3, [sp, #36]	@ 0x24
 800833c:	2f00      	cmp	r7, #0
 800833e:	bf08      	it	eq
 8008340:	462f      	moveq	r7, r5
 8008342:	2d10      	cmp	r5, #16
 8008344:	462c      	mov	r4, r5
 8008346:	bfa8      	it	ge
 8008348:	2410      	movge	r4, #16
 800834a:	f7f8 f903 	bl	8000554 <__aeabi_ui2d>
 800834e:	2d09      	cmp	r5, #9
 8008350:	4682      	mov	sl, r0
 8008352:	468b      	mov	fp, r1
 8008354:	dc13      	bgt.n	800837e <_strtod_l+0x3d6>
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	f43f ae5e 	beq.w	800801a <_strtod_l+0x72>
 800835e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008360:	dd78      	ble.n	8008454 <_strtod_l+0x4ac>
 8008362:	2b16      	cmp	r3, #22
 8008364:	dc5f      	bgt.n	8008426 <_strtod_l+0x47e>
 8008366:	4974      	ldr	r1, [pc, #464]	@ (8008538 <_strtod_l+0x590>)
 8008368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800836c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008370:	4652      	mov	r2, sl
 8008372:	465b      	mov	r3, fp
 8008374:	f7f8 f968 	bl	8000648 <__aeabi_dmul>
 8008378:	4682      	mov	sl, r0
 800837a:	468b      	mov	fp, r1
 800837c:	e64d      	b.n	800801a <_strtod_l+0x72>
 800837e:	4b6e      	ldr	r3, [pc, #440]	@ (8008538 <_strtod_l+0x590>)
 8008380:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008384:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008388:	f7f8 f95e 	bl	8000648 <__aeabi_dmul>
 800838c:	4682      	mov	sl, r0
 800838e:	9808      	ldr	r0, [sp, #32]
 8008390:	468b      	mov	fp, r1
 8008392:	f7f8 f8df 	bl	8000554 <__aeabi_ui2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4650      	mov	r0, sl
 800839c:	4659      	mov	r1, fp
 800839e:	f7f7 ff9d 	bl	80002dc <__adddf3>
 80083a2:	2d0f      	cmp	r5, #15
 80083a4:	4682      	mov	sl, r0
 80083a6:	468b      	mov	fp, r1
 80083a8:	ddd5      	ble.n	8008356 <_strtod_l+0x3ae>
 80083aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ac:	1b2c      	subs	r4, r5, r4
 80083ae:	441c      	add	r4, r3
 80083b0:	2c00      	cmp	r4, #0
 80083b2:	f340 8096 	ble.w	80084e2 <_strtod_l+0x53a>
 80083b6:	f014 030f 	ands.w	r3, r4, #15
 80083ba:	d00a      	beq.n	80083d2 <_strtod_l+0x42a>
 80083bc:	495e      	ldr	r1, [pc, #376]	@ (8008538 <_strtod_l+0x590>)
 80083be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083c2:	4652      	mov	r2, sl
 80083c4:	465b      	mov	r3, fp
 80083c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ca:	f7f8 f93d 	bl	8000648 <__aeabi_dmul>
 80083ce:	4682      	mov	sl, r0
 80083d0:	468b      	mov	fp, r1
 80083d2:	f034 040f 	bics.w	r4, r4, #15
 80083d6:	d073      	beq.n	80084c0 <_strtod_l+0x518>
 80083d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80083dc:	dd48      	ble.n	8008470 <_strtod_l+0x4c8>
 80083de:	2400      	movs	r4, #0
 80083e0:	46a0      	mov	r8, r4
 80083e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80083e4:	46a1      	mov	r9, r4
 80083e6:	9a05      	ldr	r2, [sp, #20]
 80083e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008540 <_strtod_l+0x598>
 80083ec:	2322      	movs	r3, #34	@ 0x22
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f04f 0a00 	mov.w	sl, #0
 80083f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f43f ae0f 	beq.w	800801a <_strtod_l+0x72>
 80083fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083fe:	9805      	ldr	r0, [sp, #20]
 8008400:	f7ff f942 	bl	8007688 <_Bfree>
 8008404:	9805      	ldr	r0, [sp, #20]
 8008406:	4649      	mov	r1, r9
 8008408:	f7ff f93e 	bl	8007688 <_Bfree>
 800840c:	9805      	ldr	r0, [sp, #20]
 800840e:	4641      	mov	r1, r8
 8008410:	f7ff f93a 	bl	8007688 <_Bfree>
 8008414:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008416:	9805      	ldr	r0, [sp, #20]
 8008418:	f7ff f936 	bl	8007688 <_Bfree>
 800841c:	9805      	ldr	r0, [sp, #20]
 800841e:	4621      	mov	r1, r4
 8008420:	f7ff f932 	bl	8007688 <_Bfree>
 8008424:	e5f9      	b.n	800801a <_strtod_l+0x72>
 8008426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008428:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800842c:	4293      	cmp	r3, r2
 800842e:	dbbc      	blt.n	80083aa <_strtod_l+0x402>
 8008430:	4c41      	ldr	r4, [pc, #260]	@ (8008538 <_strtod_l+0x590>)
 8008432:	f1c5 050f 	rsb	r5, r5, #15
 8008436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008442:	f7f8 f901 	bl	8000648 <__aeabi_dmul>
 8008446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008448:	1b5d      	subs	r5, r3, r5
 800844a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800844e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008452:	e78f      	b.n	8008374 <_strtod_l+0x3cc>
 8008454:	3316      	adds	r3, #22
 8008456:	dba8      	blt.n	80083aa <_strtod_l+0x402>
 8008458:	4b37      	ldr	r3, [pc, #220]	@ (8008538 <_strtod_l+0x590>)
 800845a:	eba9 0808 	sub.w	r8, r9, r8
 800845e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008462:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008466:	4650      	mov	r0, sl
 8008468:	4659      	mov	r1, fp
 800846a:	f7f8 fa17 	bl	800089c <__aeabi_ddiv>
 800846e:	e783      	b.n	8008378 <_strtod_l+0x3d0>
 8008470:	4b32      	ldr	r3, [pc, #200]	@ (800853c <_strtod_l+0x594>)
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	1124      	asrs	r4, r4, #4
 8008478:	4650      	mov	r0, sl
 800847a:	4659      	mov	r1, fp
 800847c:	461e      	mov	r6, r3
 800847e:	2c01      	cmp	r4, #1
 8008480:	dc21      	bgt.n	80084c6 <_strtod_l+0x51e>
 8008482:	b10b      	cbz	r3, 8008488 <_strtod_l+0x4e0>
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	492c      	ldr	r1, [pc, #176]	@ (800853c <_strtod_l+0x594>)
 800848a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800848e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008492:	4652      	mov	r2, sl
 8008494:	465b      	mov	r3, fp
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f7f8 f8d5 	bl	8000648 <__aeabi_dmul>
 800849e:	4b28      	ldr	r3, [pc, #160]	@ (8008540 <_strtod_l+0x598>)
 80084a0:	460a      	mov	r2, r1
 80084a2:	400b      	ands	r3, r1
 80084a4:	4927      	ldr	r1, [pc, #156]	@ (8008544 <_strtod_l+0x59c>)
 80084a6:	428b      	cmp	r3, r1
 80084a8:	4682      	mov	sl, r0
 80084aa:	d898      	bhi.n	80083de <_strtod_l+0x436>
 80084ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf86      	itte	hi
 80084b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008548 <_strtod_l+0x5a0>
 80084b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80084bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80084c0:	2300      	movs	r3, #0
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	e07a      	b.n	80085bc <_strtod_l+0x614>
 80084c6:	07e2      	lsls	r2, r4, #31
 80084c8:	d505      	bpl.n	80084d6 <_strtod_l+0x52e>
 80084ca:	9b08      	ldr	r3, [sp, #32]
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f8 f8ba 	bl	8000648 <__aeabi_dmul>
 80084d4:	2301      	movs	r3, #1
 80084d6:	9a08      	ldr	r2, [sp, #32]
 80084d8:	3208      	adds	r2, #8
 80084da:	3601      	adds	r6, #1
 80084dc:	1064      	asrs	r4, r4, #1
 80084de:	9208      	str	r2, [sp, #32]
 80084e0:	e7cd      	b.n	800847e <_strtod_l+0x4d6>
 80084e2:	d0ed      	beq.n	80084c0 <_strtod_l+0x518>
 80084e4:	4264      	negs	r4, r4
 80084e6:	f014 020f 	ands.w	r2, r4, #15
 80084ea:	d00a      	beq.n	8008502 <_strtod_l+0x55a>
 80084ec:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <_strtod_l+0x590>)
 80084ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084f2:	4650      	mov	r0, sl
 80084f4:	4659      	mov	r1, fp
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f8 f9cf 	bl	800089c <__aeabi_ddiv>
 80084fe:	4682      	mov	sl, r0
 8008500:	468b      	mov	fp, r1
 8008502:	1124      	asrs	r4, r4, #4
 8008504:	d0dc      	beq.n	80084c0 <_strtod_l+0x518>
 8008506:	2c1f      	cmp	r4, #31
 8008508:	dd20      	ble.n	800854c <_strtod_l+0x5a4>
 800850a:	2400      	movs	r4, #0
 800850c:	46a0      	mov	r8, r4
 800850e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008510:	46a1      	mov	r9, r4
 8008512:	9a05      	ldr	r2, [sp, #20]
 8008514:	2322      	movs	r3, #34	@ 0x22
 8008516:	f04f 0a00 	mov.w	sl, #0
 800851a:	f04f 0b00 	mov.w	fp, #0
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e768      	b.n	80083f4 <_strtod_l+0x44c>
 8008522:	bf00      	nop
 8008524:	08009ec5 	.word	0x08009ec5
 8008528:	0800a0dc 	.word	0x0800a0dc
 800852c:	08009ebd 	.word	0x08009ebd
 8008530:	08009ef4 	.word	0x08009ef4
 8008534:	0800a285 	.word	0x0800a285
 8008538:	0800a010 	.word	0x0800a010
 800853c:	08009fe8 	.word	0x08009fe8
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	7ca00000 	.word	0x7ca00000
 8008548:	7fefffff 	.word	0x7fefffff
 800854c:	f014 0310 	ands.w	r3, r4, #16
 8008550:	bf18      	it	ne
 8008552:	236a      	movne	r3, #106	@ 0x6a
 8008554:	4ea9      	ldr	r6, [pc, #676]	@ (80087fc <_strtod_l+0x854>)
 8008556:	9308      	str	r3, [sp, #32]
 8008558:	4650      	mov	r0, sl
 800855a:	4659      	mov	r1, fp
 800855c:	2300      	movs	r3, #0
 800855e:	07e2      	lsls	r2, r4, #31
 8008560:	d504      	bpl.n	800856c <_strtod_l+0x5c4>
 8008562:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008566:	f7f8 f86f 	bl	8000648 <__aeabi_dmul>
 800856a:	2301      	movs	r3, #1
 800856c:	1064      	asrs	r4, r4, #1
 800856e:	f106 0608 	add.w	r6, r6, #8
 8008572:	d1f4      	bne.n	800855e <_strtod_l+0x5b6>
 8008574:	b10b      	cbz	r3, 800857a <_strtod_l+0x5d2>
 8008576:	4682      	mov	sl, r0
 8008578:	468b      	mov	fp, r1
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	b1b3      	cbz	r3, 80085ac <_strtod_l+0x604>
 800857e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008582:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008586:	2b00      	cmp	r3, #0
 8008588:	4659      	mov	r1, fp
 800858a:	dd0f      	ble.n	80085ac <_strtod_l+0x604>
 800858c:	2b1f      	cmp	r3, #31
 800858e:	dd55      	ble.n	800863c <_strtod_l+0x694>
 8008590:	2b34      	cmp	r3, #52	@ 0x34
 8008592:	bfde      	ittt	le
 8008594:	f04f 33ff 	movle.w	r3, #4294967295
 8008598:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800859c:	4093      	lslle	r3, r2
 800859e:	f04f 0a00 	mov.w	sl, #0
 80085a2:	bfcc      	ite	gt
 80085a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80085a8:	ea03 0b01 	andle.w	fp, r3, r1
 80085ac:	2200      	movs	r2, #0
 80085ae:	2300      	movs	r3, #0
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	f7f8 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d1a6      	bne.n	800850a <_strtod_l+0x562>
 80085bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80085c2:	9805      	ldr	r0, [sp, #20]
 80085c4:	462b      	mov	r3, r5
 80085c6:	463a      	mov	r2, r7
 80085c8:	f7ff f8c6 	bl	8007758 <__s2b>
 80085cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f af05 	beq.w	80083de <_strtod_l+0x436>
 80085d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	eba9 0308 	sub.w	r3, r9, r8
 80085dc:	bfa8      	it	ge
 80085de:	2300      	movge	r3, #0
 80085e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80085e2:	2400      	movs	r4, #0
 80085e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80085e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80085ea:	46a0      	mov	r8, r4
 80085ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ee:	9805      	ldr	r0, [sp, #20]
 80085f0:	6859      	ldr	r1, [r3, #4]
 80085f2:	f7ff f809 	bl	8007608 <_Balloc>
 80085f6:	4681      	mov	r9, r0
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f43f aef4 	beq.w	80083e6 <_strtod_l+0x43e>
 80085fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008600:	691a      	ldr	r2, [r3, #16]
 8008602:	3202      	adds	r2, #2
 8008604:	f103 010c 	add.w	r1, r3, #12
 8008608:	0092      	lsls	r2, r2, #2
 800860a:	300c      	adds	r0, #12
 800860c:	f000 ffcc 	bl	80095a8 <memcpy>
 8008610:	ec4b ab10 	vmov	d0, sl, fp
 8008614:	9805      	ldr	r0, [sp, #20]
 8008616:	aa1c      	add	r2, sp, #112	@ 0x70
 8008618:	a91b      	add	r1, sp, #108	@ 0x6c
 800861a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800861e:	f7ff fbd7 	bl	8007dd0 <__d2b>
 8008622:	901a      	str	r0, [sp, #104]	@ 0x68
 8008624:	2800      	cmp	r0, #0
 8008626:	f43f aede 	beq.w	80083e6 <_strtod_l+0x43e>
 800862a:	9805      	ldr	r0, [sp, #20]
 800862c:	2101      	movs	r1, #1
 800862e:	f7ff f929 	bl	8007884 <__i2b>
 8008632:	4680      	mov	r8, r0
 8008634:	b948      	cbnz	r0, 800864a <_strtod_l+0x6a2>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	e6d4      	b.n	80083e6 <_strtod_l+0x43e>
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	ea03 0a0a 	and.w	sl, r3, sl
 8008648:	e7b0      	b.n	80085ac <_strtod_l+0x604>
 800864a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800864c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800864e:	2d00      	cmp	r5, #0
 8008650:	bfab      	itete	ge
 8008652:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008654:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008656:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008658:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800865a:	bfac      	ite	ge
 800865c:	18ef      	addge	r7, r5, r3
 800865e:	1b5e      	sublt	r6, r3, r5
 8008660:	9b08      	ldr	r3, [sp, #32]
 8008662:	1aed      	subs	r5, r5, r3
 8008664:	4415      	add	r5, r2
 8008666:	4b66      	ldr	r3, [pc, #408]	@ (8008800 <_strtod_l+0x858>)
 8008668:	3d01      	subs	r5, #1
 800866a:	429d      	cmp	r5, r3
 800866c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008670:	da50      	bge.n	8008714 <_strtod_l+0x76c>
 8008672:	1b5b      	subs	r3, r3, r5
 8008674:	2b1f      	cmp	r3, #31
 8008676:	eba2 0203 	sub.w	r2, r2, r3
 800867a:	f04f 0101 	mov.w	r1, #1
 800867e:	dc3d      	bgt.n	80086fc <_strtod_l+0x754>
 8008680:	fa01 f303 	lsl.w	r3, r1, r3
 8008684:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008686:	2300      	movs	r3, #0
 8008688:	9310      	str	r3, [sp, #64]	@ 0x40
 800868a:	18bd      	adds	r5, r7, r2
 800868c:	9b08      	ldr	r3, [sp, #32]
 800868e:	42af      	cmp	r7, r5
 8008690:	4416      	add	r6, r2
 8008692:	441e      	add	r6, r3
 8008694:	463b      	mov	r3, r7
 8008696:	bfa8      	it	ge
 8008698:	462b      	movge	r3, r5
 800869a:	42b3      	cmp	r3, r6
 800869c:	bfa8      	it	ge
 800869e:	4633      	movge	r3, r6
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bfc2      	ittt	gt
 80086a4:	1aed      	subgt	r5, r5, r3
 80086a6:	1af6      	subgt	r6, r6, r3
 80086a8:	1aff      	subgt	r7, r7, r3
 80086aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd16      	ble.n	80086de <_strtod_l+0x736>
 80086b0:	4641      	mov	r1, r8
 80086b2:	9805      	ldr	r0, [sp, #20]
 80086b4:	461a      	mov	r2, r3
 80086b6:	f7ff f9a5 	bl	8007a04 <__pow5mult>
 80086ba:	4680      	mov	r8, r0
 80086bc:	2800      	cmp	r0, #0
 80086be:	d0ba      	beq.n	8008636 <_strtod_l+0x68e>
 80086c0:	4601      	mov	r1, r0
 80086c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	f7ff f8f3 	bl	80078b0 <__multiply>
 80086ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f ae8a 	beq.w	80083e6 <_strtod_l+0x43e>
 80086d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086d4:	9805      	ldr	r0, [sp, #20]
 80086d6:	f7fe ffd7 	bl	8007688 <_Bfree>
 80086da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80086de:	2d00      	cmp	r5, #0
 80086e0:	dc1d      	bgt.n	800871e <_strtod_l+0x776>
 80086e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd23      	ble.n	8008730 <_strtod_l+0x788>
 80086e8:	4649      	mov	r1, r9
 80086ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80086ec:	9805      	ldr	r0, [sp, #20]
 80086ee:	f7ff f989 	bl	8007a04 <__pow5mult>
 80086f2:	4681      	mov	r9, r0
 80086f4:	b9e0      	cbnz	r0, 8008730 <_strtod_l+0x788>
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	e674      	b.n	80083e6 <_strtod_l+0x43e>
 80086fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008700:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008704:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008708:	35e2      	adds	r5, #226	@ 0xe2
 800870a:	fa01 f305 	lsl.w	r3, r1, r5
 800870e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008710:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008712:	e7ba      	b.n	800868a <_strtod_l+0x6e2>
 8008714:	2300      	movs	r3, #0
 8008716:	9310      	str	r3, [sp, #64]	@ 0x40
 8008718:	2301      	movs	r3, #1
 800871a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800871c:	e7b5      	b.n	800868a <_strtod_l+0x6e2>
 800871e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008720:	9805      	ldr	r0, [sp, #20]
 8008722:	462a      	mov	r2, r5
 8008724:	f7ff f9c8 	bl	8007ab8 <__lshift>
 8008728:	901a      	str	r0, [sp, #104]	@ 0x68
 800872a:	2800      	cmp	r0, #0
 800872c:	d1d9      	bne.n	80086e2 <_strtod_l+0x73a>
 800872e:	e65a      	b.n	80083e6 <_strtod_l+0x43e>
 8008730:	2e00      	cmp	r6, #0
 8008732:	dd07      	ble.n	8008744 <_strtod_l+0x79c>
 8008734:	4649      	mov	r1, r9
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	4632      	mov	r2, r6
 800873a:	f7ff f9bd 	bl	8007ab8 <__lshift>
 800873e:	4681      	mov	r9, r0
 8008740:	2800      	cmp	r0, #0
 8008742:	d0d8      	beq.n	80086f6 <_strtod_l+0x74e>
 8008744:	2f00      	cmp	r7, #0
 8008746:	dd08      	ble.n	800875a <_strtod_l+0x7b2>
 8008748:	4641      	mov	r1, r8
 800874a:	9805      	ldr	r0, [sp, #20]
 800874c:	463a      	mov	r2, r7
 800874e:	f7ff f9b3 	bl	8007ab8 <__lshift>
 8008752:	4680      	mov	r8, r0
 8008754:	2800      	cmp	r0, #0
 8008756:	f43f ae46 	beq.w	80083e6 <_strtod_l+0x43e>
 800875a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800875c:	9805      	ldr	r0, [sp, #20]
 800875e:	464a      	mov	r2, r9
 8008760:	f7ff fa32 	bl	8007bc8 <__mdiff>
 8008764:	4604      	mov	r4, r0
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f ae3d 	beq.w	80083e6 <_strtod_l+0x43e>
 800876c:	68c3      	ldr	r3, [r0, #12]
 800876e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008770:	2300      	movs	r3, #0
 8008772:	60c3      	str	r3, [r0, #12]
 8008774:	4641      	mov	r1, r8
 8008776:	f7ff fa0b 	bl	8007b90 <__mcmp>
 800877a:	2800      	cmp	r0, #0
 800877c:	da46      	bge.n	800880c <_strtod_l+0x864>
 800877e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008780:	ea53 030a 	orrs.w	r3, r3, sl
 8008784:	d16c      	bne.n	8008860 <_strtod_l+0x8b8>
 8008786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800878a:	2b00      	cmp	r3, #0
 800878c:	d168      	bne.n	8008860 <_strtod_l+0x8b8>
 800878e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008792:	0d1b      	lsrs	r3, r3, #20
 8008794:	051b      	lsls	r3, r3, #20
 8008796:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800879a:	d961      	bls.n	8008860 <_strtod_l+0x8b8>
 800879c:	6963      	ldr	r3, [r4, #20]
 800879e:	b913      	cbnz	r3, 80087a6 <_strtod_l+0x7fe>
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	dd5c      	ble.n	8008860 <_strtod_l+0x8b8>
 80087a6:	4621      	mov	r1, r4
 80087a8:	2201      	movs	r2, #1
 80087aa:	9805      	ldr	r0, [sp, #20]
 80087ac:	f7ff f984 	bl	8007ab8 <__lshift>
 80087b0:	4641      	mov	r1, r8
 80087b2:	4604      	mov	r4, r0
 80087b4:	f7ff f9ec 	bl	8007b90 <__mcmp>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	dd51      	ble.n	8008860 <_strtod_l+0x8b8>
 80087bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087c0:	9a08      	ldr	r2, [sp, #32]
 80087c2:	0d1b      	lsrs	r3, r3, #20
 80087c4:	051b      	lsls	r3, r3, #20
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	d06b      	beq.n	80088a2 <_strtod_l+0x8fa>
 80087ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80087ce:	d868      	bhi.n	80088a2 <_strtod_l+0x8fa>
 80087d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80087d4:	f67f ae9d 	bls.w	8008512 <_strtod_l+0x56a>
 80087d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008804 <_strtod_l+0x85c>)
 80087da:	4650      	mov	r0, sl
 80087dc:	4659      	mov	r1, fp
 80087de:	2200      	movs	r2, #0
 80087e0:	f7f7 ff32 	bl	8000648 <__aeabi_dmul>
 80087e4:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <_strtod_l+0x860>)
 80087e6:	400b      	ands	r3, r1
 80087e8:	4682      	mov	sl, r0
 80087ea:	468b      	mov	fp, r1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f47f ae05 	bne.w	80083fc <_strtod_l+0x454>
 80087f2:	9a05      	ldr	r2, [sp, #20]
 80087f4:	2322      	movs	r3, #34	@ 0x22
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e600      	b.n	80083fc <_strtod_l+0x454>
 80087fa:	bf00      	nop
 80087fc:	0800a108 	.word	0x0800a108
 8008800:	fffffc02 	.word	0xfffffc02
 8008804:	39500000 	.word	0x39500000
 8008808:	7ff00000 	.word	0x7ff00000
 800880c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008810:	d165      	bne.n	80088de <_strtod_l+0x936>
 8008812:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008818:	b35a      	cbz	r2, 8008872 <_strtod_l+0x8ca>
 800881a:	4a9f      	ldr	r2, [pc, #636]	@ (8008a98 <_strtod_l+0xaf0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d12b      	bne.n	8008878 <_strtod_l+0x8d0>
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	4651      	mov	r1, sl
 8008824:	b303      	cbz	r3, 8008868 <_strtod_l+0x8c0>
 8008826:	4b9d      	ldr	r3, [pc, #628]	@ (8008a9c <_strtod_l+0xaf4>)
 8008828:	465a      	mov	r2, fp
 800882a:	4013      	ands	r3, r2
 800882c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	d81b      	bhi.n	800886e <_strtod_l+0x8c6>
 8008836:	0d1b      	lsrs	r3, r3, #20
 8008838:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800883c:	fa02 f303 	lsl.w	r3, r2, r3
 8008840:	4299      	cmp	r1, r3
 8008842:	d119      	bne.n	8008878 <_strtod_l+0x8d0>
 8008844:	4b96      	ldr	r3, [pc, #600]	@ (8008aa0 <_strtod_l+0xaf8>)
 8008846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008848:	429a      	cmp	r2, r3
 800884a:	d102      	bne.n	8008852 <_strtod_l+0x8aa>
 800884c:	3101      	adds	r1, #1
 800884e:	f43f adca 	beq.w	80083e6 <_strtod_l+0x43e>
 8008852:	4b92      	ldr	r3, [pc, #584]	@ (8008a9c <_strtod_l+0xaf4>)
 8008854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008856:	401a      	ands	r2, r3
 8008858:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800885c:	f04f 0a00 	mov.w	sl, #0
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1b8      	bne.n	80087d8 <_strtod_l+0x830>
 8008866:	e5c9      	b.n	80083fc <_strtod_l+0x454>
 8008868:	f04f 33ff 	mov.w	r3, #4294967295
 800886c:	e7e8      	b.n	8008840 <_strtod_l+0x898>
 800886e:	4613      	mov	r3, r2
 8008870:	e7e6      	b.n	8008840 <_strtod_l+0x898>
 8008872:	ea53 030a 	orrs.w	r3, r3, sl
 8008876:	d0a1      	beq.n	80087bc <_strtod_l+0x814>
 8008878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800887a:	b1db      	cbz	r3, 80088b4 <_strtod_l+0x90c>
 800887c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800887e:	4213      	tst	r3, r2
 8008880:	d0ee      	beq.n	8008860 <_strtod_l+0x8b8>
 8008882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	4650      	mov	r0, sl
 8008888:	4659      	mov	r1, fp
 800888a:	b1bb      	cbz	r3, 80088bc <_strtod_l+0x914>
 800888c:	f7ff fb6e 	bl	8007f6c <sulp>
 8008890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008894:	ec53 2b10 	vmov	r2, r3, d0
 8008898:	f7f7 fd20 	bl	80002dc <__adddf3>
 800889c:	4682      	mov	sl, r0
 800889e:	468b      	mov	fp, r1
 80088a0:	e7de      	b.n	8008860 <_strtod_l+0x8b8>
 80088a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80088a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088ae:	f04f 3aff 	mov.w	sl, #4294967295
 80088b2:	e7d5      	b.n	8008860 <_strtod_l+0x8b8>
 80088b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088b6:	ea13 0f0a 	tst.w	r3, sl
 80088ba:	e7e1      	b.n	8008880 <_strtod_l+0x8d8>
 80088bc:	f7ff fb56 	bl	8007f6c <sulp>
 80088c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088c4:	ec53 2b10 	vmov	r2, r3, d0
 80088c8:	f7f7 fd06 	bl	80002d8 <__aeabi_dsub>
 80088cc:	2200      	movs	r2, #0
 80088ce:	2300      	movs	r3, #0
 80088d0:	4682      	mov	sl, r0
 80088d2:	468b      	mov	fp, r1
 80088d4:	f7f8 f920 	bl	8000b18 <__aeabi_dcmpeq>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d0c1      	beq.n	8008860 <_strtod_l+0x8b8>
 80088dc:	e619      	b.n	8008512 <_strtod_l+0x56a>
 80088de:	4641      	mov	r1, r8
 80088e0:	4620      	mov	r0, r4
 80088e2:	f7ff facd 	bl	8007e80 <__ratio>
 80088e6:	ec57 6b10 	vmov	r6, r7, d0
 80088ea:	2200      	movs	r2, #0
 80088ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f924 	bl	8000b40 <__aeabi_dcmple>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d06f      	beq.n	80089dc <_strtod_l+0xa34>
 80088fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d17a      	bne.n	80089f8 <_strtod_l+0xa50>
 8008902:	f1ba 0f00 	cmp.w	sl, #0
 8008906:	d158      	bne.n	80089ba <_strtod_l+0xa12>
 8008908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800890e:	2b00      	cmp	r3, #0
 8008910:	d15a      	bne.n	80089c8 <_strtod_l+0xa20>
 8008912:	4b64      	ldr	r3, [pc, #400]	@ (8008aa4 <_strtod_l+0xafc>)
 8008914:	2200      	movs	r2, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f8 f907 	bl	8000b2c <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	d159      	bne.n	80089d6 <_strtod_l+0xa2e>
 8008922:	4630      	mov	r0, r6
 8008924:	4639      	mov	r1, r7
 8008926:	4b60      	ldr	r3, [pc, #384]	@ (8008aa8 <_strtod_l+0xb00>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe8d 	bl	8000648 <__aeabi_dmul>
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008936:	9606      	str	r6, [sp, #24]
 8008938:	9307      	str	r3, [sp, #28]
 800893a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800893e:	4d57      	ldr	r5, [pc, #348]	@ (8008a9c <_strtod_l+0xaf4>)
 8008940:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008946:	401d      	ands	r5, r3
 8008948:	4b58      	ldr	r3, [pc, #352]	@ (8008aac <_strtod_l+0xb04>)
 800894a:	429d      	cmp	r5, r3
 800894c:	f040 80b2 	bne.w	8008ab4 <_strtod_l+0xb0c>
 8008950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008952:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008956:	ec4b ab10 	vmov	d0, sl, fp
 800895a:	f7ff f9c9 	bl	8007cf0 <__ulp>
 800895e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008962:	ec51 0b10 	vmov	r0, r1, d0
 8008966:	f7f7 fe6f 	bl	8000648 <__aeabi_dmul>
 800896a:	4652      	mov	r2, sl
 800896c:	465b      	mov	r3, fp
 800896e:	f7f7 fcb5 	bl	80002dc <__adddf3>
 8008972:	460b      	mov	r3, r1
 8008974:	4949      	ldr	r1, [pc, #292]	@ (8008a9c <_strtod_l+0xaf4>)
 8008976:	4a4e      	ldr	r2, [pc, #312]	@ (8008ab0 <_strtod_l+0xb08>)
 8008978:	4019      	ands	r1, r3
 800897a:	4291      	cmp	r1, r2
 800897c:	4682      	mov	sl, r0
 800897e:	d942      	bls.n	8008a06 <_strtod_l+0xa5e>
 8008980:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008982:	4b47      	ldr	r3, [pc, #284]	@ (8008aa0 <_strtod_l+0xaf8>)
 8008984:	429a      	cmp	r2, r3
 8008986:	d103      	bne.n	8008990 <_strtod_l+0x9e8>
 8008988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800898a:	3301      	adds	r3, #1
 800898c:	f43f ad2b 	beq.w	80083e6 <_strtod_l+0x43e>
 8008990:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008aa0 <_strtod_l+0xaf8>
 8008994:	f04f 3aff 	mov.w	sl, #4294967295
 8008998:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800899a:	9805      	ldr	r0, [sp, #20]
 800899c:	f7fe fe74 	bl	8007688 <_Bfree>
 80089a0:	9805      	ldr	r0, [sp, #20]
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7fe fe70 	bl	8007688 <_Bfree>
 80089a8:	9805      	ldr	r0, [sp, #20]
 80089aa:	4641      	mov	r1, r8
 80089ac:	f7fe fe6c 	bl	8007688 <_Bfree>
 80089b0:	9805      	ldr	r0, [sp, #20]
 80089b2:	4621      	mov	r1, r4
 80089b4:	f7fe fe68 	bl	8007688 <_Bfree>
 80089b8:	e618      	b.n	80085ec <_strtod_l+0x644>
 80089ba:	f1ba 0f01 	cmp.w	sl, #1
 80089be:	d103      	bne.n	80089c8 <_strtod_l+0xa20>
 80089c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f43f ada5 	beq.w	8008512 <_strtod_l+0x56a>
 80089c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008a78 <_strtod_l+0xad0>
 80089cc:	4f35      	ldr	r7, [pc, #212]	@ (8008aa4 <_strtod_l+0xafc>)
 80089ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089d2:	2600      	movs	r6, #0
 80089d4:	e7b1      	b.n	800893a <_strtod_l+0x992>
 80089d6:	4f34      	ldr	r7, [pc, #208]	@ (8008aa8 <_strtod_l+0xb00>)
 80089d8:	2600      	movs	r6, #0
 80089da:	e7aa      	b.n	8008932 <_strtod_l+0x98a>
 80089dc:	4b32      	ldr	r3, [pc, #200]	@ (8008aa8 <_strtod_l+0xb00>)
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fe30 	bl	8000648 <__aeabi_dmul>
 80089e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ea:	4606      	mov	r6, r0
 80089ec:	460f      	mov	r7, r1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d09f      	beq.n	8008932 <_strtod_l+0x98a>
 80089f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80089f6:	e7a0      	b.n	800893a <_strtod_l+0x992>
 80089f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a80 <_strtod_l+0xad8>
 80089fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a00:	ec57 6b17 	vmov	r6, r7, d7
 8008a04:	e799      	b.n	800893a <_strtod_l+0x992>
 8008a06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1c1      	bne.n	8008998 <_strtod_l+0x9f0>
 8008a14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a18:	0d1b      	lsrs	r3, r3, #20
 8008a1a:	051b      	lsls	r3, r3, #20
 8008a1c:	429d      	cmp	r5, r3
 8008a1e:	d1bb      	bne.n	8008998 <_strtod_l+0x9f0>
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f8 f970 	bl	8000d08 <__aeabi_d2lz>
 8008a28:	f7f7 fde0 	bl	80005ec <__aeabi_l2d>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f7 fc50 	bl	80002d8 <__aeabi_dsub>
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a46:	ea46 060a 	orr.w	r6, r6, sl
 8008a4a:	431e      	orrs	r6, r3
 8008a4c:	d06f      	beq.n	8008b2e <_strtod_l+0xb86>
 8008a4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a88 <_strtod_l+0xae0>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f8 f86a 	bl	8000b2c <__aeabi_dcmplt>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f47f accf 	bne.w	80083fc <_strtod_l+0x454>
 8008a5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008a90 <_strtod_l+0xae8>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a68:	f7f8 f87e 	bl	8000b68 <__aeabi_dcmpgt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d093      	beq.n	8008998 <_strtod_l+0x9f0>
 8008a70:	e4c4      	b.n	80083fc <_strtod_l+0x454>
 8008a72:	bf00      	nop
 8008a74:	f3af 8000 	nop.w
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	bff00000 	.word	0xbff00000
 8008a80:	00000000 	.word	0x00000000
 8008a84:	3ff00000 	.word	0x3ff00000
 8008a88:	94a03595 	.word	0x94a03595
 8008a8c:	3fdfffff 	.word	0x3fdfffff
 8008a90:	35afe535 	.word	0x35afe535
 8008a94:	3fe00000 	.word	0x3fe00000
 8008a98:	000fffff 	.word	0x000fffff
 8008a9c:	7ff00000 	.word	0x7ff00000
 8008aa0:	7fefffff 	.word	0x7fefffff
 8008aa4:	3ff00000 	.word	0x3ff00000
 8008aa8:	3fe00000 	.word	0x3fe00000
 8008aac:	7fe00000 	.word	0x7fe00000
 8008ab0:	7c9fffff 	.word	0x7c9fffff
 8008ab4:	9b08      	ldr	r3, [sp, #32]
 8008ab6:	b323      	cbz	r3, 8008b02 <_strtod_l+0xb5a>
 8008ab8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008abc:	d821      	bhi.n	8008b02 <_strtod_l+0xb5a>
 8008abe:	a328      	add	r3, pc, #160	@ (adr r3, 8008b60 <_strtod_l+0xbb8>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f8 f83a 	bl	8000b40 <__aeabi_dcmple>
 8008acc:	b1a0      	cbz	r0, 8008af8 <_strtod_l+0xb50>
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7f8 f891 	bl	8000bf8 <__aeabi_d2uiz>
 8008ad6:	2801      	cmp	r0, #1
 8008ad8:	bf38      	it	cc
 8008ada:	2001      	movcc	r0, #1
 8008adc:	f7f7 fd3a 	bl	8000554 <__aeabi_ui2d>
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	b9fb      	cbnz	r3, 8008b28 <_strtod_l+0xb80>
 8008ae8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008aec:	9014      	str	r0, [sp, #80]	@ 0x50
 8008aee:	9315      	str	r3, [sp, #84]	@ 0x54
 8008af0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008af4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008af8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008afa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008afe:	1b5b      	subs	r3, r3, r5
 8008b00:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b0a:	f7ff f8f1 	bl	8007cf0 <__ulp>
 8008b0e:	4650      	mov	r0, sl
 8008b10:	ec53 2b10 	vmov	r2, r3, d0
 8008b14:	4659      	mov	r1, fp
 8008b16:	f7f7 fd97 	bl	8000648 <__aeabi_dmul>
 8008b1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b1e:	f7f7 fbdd 	bl	80002dc <__adddf3>
 8008b22:	4682      	mov	sl, r0
 8008b24:	468b      	mov	fp, r1
 8008b26:	e770      	b.n	8008a0a <_strtod_l+0xa62>
 8008b28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b2c:	e7e0      	b.n	8008af0 <_strtod_l+0xb48>
 8008b2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b68 <_strtod_l+0xbc0>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fffa 	bl	8000b2c <__aeabi_dcmplt>
 8008b38:	e798      	b.n	8008a6c <_strtod_l+0xac4>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	f7ff ba6d 	b.w	8008022 <_strtod_l+0x7a>
 8008b48:	2a65      	cmp	r2, #101	@ 0x65
 8008b4a:	f43f ab66 	beq.w	800821a <_strtod_l+0x272>
 8008b4e:	2a45      	cmp	r2, #69	@ 0x45
 8008b50:	f43f ab63 	beq.w	800821a <_strtod_l+0x272>
 8008b54:	2301      	movs	r3, #1
 8008b56:	f7ff bb9e 	b.w	8008296 <_strtod_l+0x2ee>
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w
 8008b60:	ffc00000 	.word	0xffc00000
 8008b64:	41dfffff 	.word	0x41dfffff
 8008b68:	94a03595 	.word	0x94a03595
 8008b6c:	3fcfffff 	.word	0x3fcfffff

08008b70 <_strtod_r>:
 8008b70:	4b01      	ldr	r3, [pc, #4]	@ (8008b78 <_strtod_r+0x8>)
 8008b72:	f7ff ba19 	b.w	8007fa8 <_strtod_l>
 8008b76:	bf00      	nop
 8008b78:	20000070 	.word	0x20000070

08008b7c <_strtol_l.constprop.0>:
 8008b7c:	2b24      	cmp	r3, #36	@ 0x24
 8008b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b82:	4686      	mov	lr, r0
 8008b84:	4690      	mov	r8, r2
 8008b86:	d801      	bhi.n	8008b8c <_strtol_l.constprop.0+0x10>
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <_strtol_l.constprop.0+0x1e>
 8008b8c:	f7fd fdbc 	bl	8006708 <__errno>
 8008b90:	2316      	movs	r3, #22
 8008b92:	6003      	str	r3, [r0, #0]
 8008b94:	2000      	movs	r0, #0
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	4834      	ldr	r0, [pc, #208]	@ (8008c6c <_strtol_l.constprop.0+0xf0>)
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ba4:	5d06      	ldrb	r6, [r0, r4]
 8008ba6:	f016 0608 	ands.w	r6, r6, #8
 8008baa:	d1f8      	bne.n	8008b9e <_strtol_l.constprop.0+0x22>
 8008bac:	2c2d      	cmp	r4, #45	@ 0x2d
 8008bae:	d12d      	bne.n	8008c0c <_strtol_l.constprop.0+0x90>
 8008bb0:	782c      	ldrb	r4, [r5, #0]
 8008bb2:	2601      	movs	r6, #1
 8008bb4:	1c95      	adds	r5, r2, #2
 8008bb6:	f033 0210 	bics.w	r2, r3, #16
 8008bba:	d109      	bne.n	8008bd0 <_strtol_l.constprop.0+0x54>
 8008bbc:	2c30      	cmp	r4, #48	@ 0x30
 8008bbe:	d12a      	bne.n	8008c16 <_strtol_l.constprop.0+0x9a>
 8008bc0:	782a      	ldrb	r2, [r5, #0]
 8008bc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bc6:	2a58      	cmp	r2, #88	@ 0x58
 8008bc8:	d125      	bne.n	8008c16 <_strtol_l.constprop.0+0x9a>
 8008bca:	786c      	ldrb	r4, [r5, #1]
 8008bcc:	2310      	movs	r3, #16
 8008bce:	3502      	adds	r5, #2
 8008bd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008bd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bd8:	2200      	movs	r2, #0
 8008bda:	fbbc f9f3 	udiv	r9, ip, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008be4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008be8:	2f09      	cmp	r7, #9
 8008bea:	d81b      	bhi.n	8008c24 <_strtol_l.constprop.0+0xa8>
 8008bec:	463c      	mov	r4, r7
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	dd27      	ble.n	8008c42 <_strtol_l.constprop.0+0xc6>
 8008bf2:	1c57      	adds	r7, r2, #1
 8008bf4:	d007      	beq.n	8008c06 <_strtol_l.constprop.0+0x8a>
 8008bf6:	4581      	cmp	r9, r0
 8008bf8:	d320      	bcc.n	8008c3c <_strtol_l.constprop.0+0xc0>
 8008bfa:	d101      	bne.n	8008c00 <_strtol_l.constprop.0+0x84>
 8008bfc:	45a2      	cmp	sl, r4
 8008bfe:	db1d      	blt.n	8008c3c <_strtol_l.constprop.0+0xc0>
 8008c00:	fb00 4003 	mla	r0, r0, r3, r4
 8008c04:	2201      	movs	r2, #1
 8008c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c0a:	e7eb      	b.n	8008be4 <_strtol_l.constprop.0+0x68>
 8008c0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c0e:	bf04      	itt	eq
 8008c10:	782c      	ldrbeq	r4, [r5, #0]
 8008c12:	1c95      	addeq	r5, r2, #2
 8008c14:	e7cf      	b.n	8008bb6 <_strtol_l.constprop.0+0x3a>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1da      	bne.n	8008bd0 <_strtol_l.constprop.0+0x54>
 8008c1a:	2c30      	cmp	r4, #48	@ 0x30
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2308      	moveq	r3, #8
 8008c20:	230a      	movne	r3, #10
 8008c22:	e7d5      	b.n	8008bd0 <_strtol_l.constprop.0+0x54>
 8008c24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c28:	2f19      	cmp	r7, #25
 8008c2a:	d801      	bhi.n	8008c30 <_strtol_l.constprop.0+0xb4>
 8008c2c:	3c37      	subs	r4, #55	@ 0x37
 8008c2e:	e7de      	b.n	8008bee <_strtol_l.constprop.0+0x72>
 8008c30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c34:	2f19      	cmp	r7, #25
 8008c36:	d804      	bhi.n	8008c42 <_strtol_l.constprop.0+0xc6>
 8008c38:	3c57      	subs	r4, #87	@ 0x57
 8008c3a:	e7d8      	b.n	8008bee <_strtol_l.constprop.0+0x72>
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	e7e1      	b.n	8008c06 <_strtol_l.constprop.0+0x8a>
 8008c42:	1c53      	adds	r3, r2, #1
 8008c44:	d108      	bne.n	8008c58 <_strtol_l.constprop.0+0xdc>
 8008c46:	2322      	movs	r3, #34	@ 0x22
 8008c48:	f8ce 3000 	str.w	r3, [lr]
 8008c4c:	4660      	mov	r0, ip
 8008c4e:	f1b8 0f00 	cmp.w	r8, #0
 8008c52:	d0a0      	beq.n	8008b96 <_strtol_l.constprop.0+0x1a>
 8008c54:	1e69      	subs	r1, r5, #1
 8008c56:	e006      	b.n	8008c66 <_strtol_l.constprop.0+0xea>
 8008c58:	b106      	cbz	r6, 8008c5c <_strtol_l.constprop.0+0xe0>
 8008c5a:	4240      	negs	r0, r0
 8008c5c:	f1b8 0f00 	cmp.w	r8, #0
 8008c60:	d099      	beq.n	8008b96 <_strtol_l.constprop.0+0x1a>
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d1f6      	bne.n	8008c54 <_strtol_l.constprop.0+0xd8>
 8008c66:	f8c8 1000 	str.w	r1, [r8]
 8008c6a:	e794      	b.n	8008b96 <_strtol_l.constprop.0+0x1a>
 8008c6c:	0800a131 	.word	0x0800a131

08008c70 <_strtol_r>:
 8008c70:	f7ff bf84 	b.w	8008b7c <_strtol_l.constprop.0>

08008c74 <__ssputs_r>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	688e      	ldr	r6, [r1, #8]
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	680b      	ldr	r3, [r1, #0]
 8008c80:	4682      	mov	sl, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	4690      	mov	r8, r2
 8008c86:	d82d      	bhi.n	8008ce4 <__ssputs_r+0x70>
 8008c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c90:	d026      	beq.n	8008ce0 <__ssputs_r+0x6c>
 8008c92:	6965      	ldr	r5, [r4, #20]
 8008c94:	6909      	ldr	r1, [r1, #16]
 8008c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c9a:	eba3 0901 	sub.w	r9, r3, r1
 8008c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ca2:	1c7b      	adds	r3, r7, #1
 8008ca4:	444b      	add	r3, r9
 8008ca6:	106d      	asrs	r5, r5, #1
 8008ca8:	429d      	cmp	r5, r3
 8008caa:	bf38      	it	cc
 8008cac:	461d      	movcc	r5, r3
 8008cae:	0553      	lsls	r3, r2, #21
 8008cb0:	d527      	bpl.n	8008d02 <__ssputs_r+0x8e>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7fe fc1c 	bl	80074f0 <_malloc_r>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	b360      	cbz	r0, 8008d16 <__ssputs_r+0xa2>
 8008cbc:	6921      	ldr	r1, [r4, #16]
 8008cbe:	464a      	mov	r2, r9
 8008cc0:	f000 fc72 	bl	80095a8 <memcpy>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	6126      	str	r6, [r4, #16]
 8008cd2:	6165      	str	r5, [r4, #20]
 8008cd4:	444e      	add	r6, r9
 8008cd6:	eba5 0509 	sub.w	r5, r5, r9
 8008cda:	6026      	str	r6, [r4, #0]
 8008cdc:	60a5      	str	r5, [r4, #8]
 8008cde:	463e      	mov	r6, r7
 8008ce0:	42be      	cmp	r6, r7
 8008ce2:	d900      	bls.n	8008ce6 <__ssputs_r+0x72>
 8008ce4:	463e      	mov	r6, r7
 8008ce6:	6820      	ldr	r0, [r4, #0]
 8008ce8:	4632      	mov	r2, r6
 8008cea:	4641      	mov	r1, r8
 8008cec:	f000 fbfe 	bl	80094ec <memmove>
 8008cf0:	68a3      	ldr	r3, [r4, #8]
 8008cf2:	1b9b      	subs	r3, r3, r6
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	4433      	add	r3, r6
 8008cfa:	6023      	str	r3, [r4, #0]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	462a      	mov	r2, r5
 8008d04:	f000 ffe5 	bl	8009cd2 <_realloc_r>
 8008d08:	4606      	mov	r6, r0
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d1e0      	bne.n	8008cd0 <__ssputs_r+0x5c>
 8008d0e:	6921      	ldr	r1, [r4, #16]
 8008d10:	4650      	mov	r0, sl
 8008d12:	f7fe fb79 	bl	8007408 <_free_r>
 8008d16:	230c      	movs	r3, #12
 8008d18:	f8ca 3000 	str.w	r3, [sl]
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e7e9      	b.n	8008cfe <__ssputs_r+0x8a>
	...

08008d2c <_svfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	4698      	mov	r8, r3
 8008d32:	898b      	ldrh	r3, [r1, #12]
 8008d34:	061b      	lsls	r3, r3, #24
 8008d36:	b09d      	sub	sp, #116	@ 0x74
 8008d38:	4607      	mov	r7, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	d510      	bpl.n	8008d62 <_svfiprintf_r+0x36>
 8008d40:	690b      	ldr	r3, [r1, #16]
 8008d42:	b973      	cbnz	r3, 8008d62 <_svfiprintf_r+0x36>
 8008d44:	2140      	movs	r1, #64	@ 0x40
 8008d46:	f7fe fbd3 	bl	80074f0 <_malloc_r>
 8008d4a:	6028      	str	r0, [r5, #0]
 8008d4c:	6128      	str	r0, [r5, #16]
 8008d4e:	b930      	cbnz	r0, 8008d5e <_svfiprintf_r+0x32>
 8008d50:	230c      	movs	r3, #12
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b01d      	add	sp, #116	@ 0x74
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	2340      	movs	r3, #64	@ 0x40
 8008d60:	616b      	str	r3, [r5, #20]
 8008d62:	2300      	movs	r3, #0
 8008d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d66:	2320      	movs	r3, #32
 8008d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d70:	2330      	movs	r3, #48	@ 0x30
 8008d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f10 <_svfiprintf_r+0x1e4>
 8008d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d7a:	f04f 0901 	mov.w	r9, #1
 8008d7e:	4623      	mov	r3, r4
 8008d80:	469a      	mov	sl, r3
 8008d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d86:	b10a      	cbz	r2, 8008d8c <_svfiprintf_r+0x60>
 8008d88:	2a25      	cmp	r2, #37	@ 0x25
 8008d8a:	d1f9      	bne.n	8008d80 <_svfiprintf_r+0x54>
 8008d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d90:	d00b      	beq.n	8008daa <_svfiprintf_r+0x7e>
 8008d92:	465b      	mov	r3, fp
 8008d94:	4622      	mov	r2, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ff6b 	bl	8008c74 <__ssputs_r>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f000 80a7 	beq.w	8008ef2 <_svfiprintf_r+0x1c6>
 8008da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da6:	445a      	add	r2, fp
 8008da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 809f 	beq.w	8008ef2 <_svfiprintf_r+0x1c6>
 8008db4:	2300      	movs	r3, #0
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbe:	f10a 0a01 	add.w	sl, sl, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	9307      	str	r3, [sp, #28]
 8008dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dcc:	4654      	mov	r4, sl
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	484e      	ldr	r0, [pc, #312]	@ (8008f10 <_svfiprintf_r+0x1e4>)
 8008dd6:	f7f7 fa23 	bl	8000220 <memchr>
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	b9d8      	cbnz	r0, 8008e16 <_svfiprintf_r+0xea>
 8008dde:	06d0      	lsls	r0, r2, #27
 8008de0:	bf44      	itt	mi
 8008de2:	2320      	movmi	r3, #32
 8008de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de8:	0711      	lsls	r1, r2, #28
 8008dea:	bf44      	itt	mi
 8008dec:	232b      	movmi	r3, #43	@ 0x2b
 8008dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df8:	d015      	beq.n	8008e26 <_svfiprintf_r+0xfa>
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	4654      	mov	r4, sl
 8008dfe:	2000      	movs	r0, #0
 8008e00:	f04f 0c0a 	mov.w	ip, #10
 8008e04:	4621      	mov	r1, r4
 8008e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e0a:	3b30      	subs	r3, #48	@ 0x30
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d94b      	bls.n	8008ea8 <_svfiprintf_r+0x17c>
 8008e10:	b1b0      	cbz	r0, 8008e40 <_svfiprintf_r+0x114>
 8008e12:	9207      	str	r2, [sp, #28]
 8008e14:	e014      	b.n	8008e40 <_svfiprintf_r+0x114>
 8008e16:	eba0 0308 	sub.w	r3, r0, r8
 8008e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	46a2      	mov	sl, r4
 8008e24:	e7d2      	b.n	8008dcc <_svfiprintf_r+0xa0>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d19      	adds	r1, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9103      	str	r1, [sp, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfbb      	ittet	lt
 8008e32:	425b      	neglt	r3, r3
 8008e34:	f042 0202 	orrlt.w	r2, r2, #2
 8008e38:	9307      	strge	r3, [sp, #28]
 8008e3a:	9307      	strlt	r3, [sp, #28]
 8008e3c:	bfb8      	it	lt
 8008e3e:	9204      	strlt	r2, [sp, #16]
 8008e40:	7823      	ldrb	r3, [r4, #0]
 8008e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e44:	d10a      	bne.n	8008e5c <_svfiprintf_r+0x130>
 8008e46:	7863      	ldrb	r3, [r4, #1]
 8008e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e4a:	d132      	bne.n	8008eb2 <_svfiprintf_r+0x186>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d1a      	adds	r2, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9203      	str	r2, [sp, #12]
 8008e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e58:	3402      	adds	r4, #2
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f20 <_svfiprintf_r+0x1f4>
 8008e60:	7821      	ldrb	r1, [r4, #0]
 8008e62:	2203      	movs	r2, #3
 8008e64:	4650      	mov	r0, sl
 8008e66:	f7f7 f9db 	bl	8000220 <memchr>
 8008e6a:	b138      	cbz	r0, 8008e7c <_svfiprintf_r+0x150>
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	eba0 000a 	sub.w	r0, r0, sl
 8008e72:	2240      	movs	r2, #64	@ 0x40
 8008e74:	4082      	lsls	r2, r0
 8008e76:	4313      	orrs	r3, r2
 8008e78:	3401      	adds	r4, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e80:	4824      	ldr	r0, [pc, #144]	@ (8008f14 <_svfiprintf_r+0x1e8>)
 8008e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e86:	2206      	movs	r2, #6
 8008e88:	f7f7 f9ca 	bl	8000220 <memchr>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d036      	beq.n	8008efe <_svfiprintf_r+0x1d2>
 8008e90:	4b21      	ldr	r3, [pc, #132]	@ (8008f18 <_svfiprintf_r+0x1ec>)
 8008e92:	bb1b      	cbnz	r3, 8008edc <_svfiprintf_r+0x1b0>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	3307      	adds	r3, #7
 8008e98:	f023 0307 	bic.w	r3, r3, #7
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea2:	4433      	add	r3, r6
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	e76a      	b.n	8008d7e <_svfiprintf_r+0x52>
 8008ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eac:	460c      	mov	r4, r1
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e7a8      	b.n	8008e04 <_svfiprintf_r+0xd8>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	3401      	adds	r4, #1
 8008eb6:	9305      	str	r3, [sp, #20]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f04f 0c0a 	mov.w	ip, #10
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec4:	3a30      	subs	r2, #48	@ 0x30
 8008ec6:	2a09      	cmp	r2, #9
 8008ec8:	d903      	bls.n	8008ed2 <_svfiprintf_r+0x1a6>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c6      	beq.n	8008e5c <_svfiprintf_r+0x130>
 8008ece:	9105      	str	r1, [sp, #20]
 8008ed0:	e7c4      	b.n	8008e5c <_svfiprintf_r+0x130>
 8008ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e7f0      	b.n	8008ebe <_svfiprintf_r+0x192>
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f1c <_svfiprintf_r+0x1f0>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f7fc fbfc 	bl	80056e4 <_printf_float>
 8008eec:	1c42      	adds	r2, r0, #1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	d1d6      	bne.n	8008ea0 <_svfiprintf_r+0x174>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	065b      	lsls	r3, r3, #25
 8008ef6:	f53f af2d 	bmi.w	8008d54 <_svfiprintf_r+0x28>
 8008efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008efc:	e72c      	b.n	8008d58 <_svfiprintf_r+0x2c>
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	462a      	mov	r2, r5
 8008f04:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <_svfiprintf_r+0x1f0>)
 8008f06:	a904      	add	r1, sp, #16
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7fc fe83 	bl	8005c14 <_printf_i>
 8008f0e:	e7ed      	b.n	8008eec <_svfiprintf_r+0x1c0>
 8008f10:	0800a231 	.word	0x0800a231
 8008f14:	0800a23b 	.word	0x0800a23b
 8008f18:	080056e5 	.word	0x080056e5
 8008f1c:	08008c75 	.word	0x08008c75
 8008f20:	0800a237 	.word	0x0800a237

08008f24 <__sfputc_r>:
 8008f24:	6893      	ldr	r3, [r2, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	b410      	push	{r4}
 8008f2c:	6093      	str	r3, [r2, #8]
 8008f2e:	da08      	bge.n	8008f42 <__sfputc_r+0x1e>
 8008f30:	6994      	ldr	r4, [r2, #24]
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	db01      	blt.n	8008f3a <__sfputc_r+0x16>
 8008f36:	290a      	cmp	r1, #10
 8008f38:	d103      	bne.n	8008f42 <__sfputc_r+0x1e>
 8008f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3e:	f000 ba41 	b.w	80093c4 <__swbuf_r>
 8008f42:	6813      	ldr	r3, [r2, #0]
 8008f44:	1c58      	adds	r0, r3, #1
 8008f46:	6010      	str	r0, [r2, #0]
 8008f48:	7019      	strb	r1, [r3, #0]
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <__sfputs_r>:
 8008f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	18d5      	adds	r5, r2, r3
 8008f5c:	42ac      	cmp	r4, r5
 8008f5e:	d101      	bne.n	8008f64 <__sfputs_r+0x12>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e007      	b.n	8008f74 <__sfputs_r+0x22>
 8008f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ffda 	bl	8008f24 <__sfputc_r>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d1f3      	bne.n	8008f5c <__sfputs_r+0xa>
 8008f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f78 <_vfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b09d      	sub	sp, #116	@ 0x74
 8008f80:	4614      	mov	r4, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	4606      	mov	r6, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_vfiprintf_r+0x18>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x18>
 8008f8c:	f7fd fa02 	bl	8006394 <__sinit>
 8008f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7fd fbde 	bl	800675e <__retarget_lock_acquire_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	071b      	lsls	r3, r3, #28
 8008fa6:	d501      	bpl.n	8008fac <_vfiprintf_r+0x34>
 8008fa8:	692b      	ldr	r3, [r5, #16]
 8008faa:	b99b      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x5c>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 fa46 	bl	8009440 <__swsetup_r>
 8008fb4:	b170      	cbz	r0, 8008fd4 <_vfiprintf_r+0x5c>
 8008fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb8:	07dc      	lsls	r4, r3, #31
 8008fba:	d504      	bpl.n	8008fc6 <_vfiprintf_r+0x4e>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	@ 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4f7      	bmi.n	8008fbc <_vfiprintf_r+0x44>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7fd fbc7 	bl	8006760 <__retarget_lock_release_recursive>
 8008fd2:	e7f3      	b.n	8008fbc <_vfiprintf_r+0x44>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe2:	2330      	movs	r3, #48	@ 0x30
 8008fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009194 <_vfiprintf_r+0x21c>
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0x86>
 8008ffa:	2a25      	cmp	r2, #37	@ 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x7a>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xa4>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa1 	bl	8008f52 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80a7 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	@ 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 809f 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800903c:	931a      	str	r3, [sp, #104]	@ 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4853      	ldr	r0, [pc, #332]	@ (8009194 <_vfiprintf_r+0x21c>)
 8009048:	f7f7 f8ea 	bl	8000220 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x110>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	@ 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	@ 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x120>
 800906c:	9a07      	ldr	r2, [sp, #28]
 800906e:	4654      	mov	r4, sl
 8009070:	2000      	movs	r0, #0
 8009072:	f04f 0c0a 	mov.w	ip, #10
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	@ 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94b      	bls.n	800911a <_vfiprintf_r+0x1a2>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x13a>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x13a>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	46a2      	mov	sl, r4
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xc6>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b6:	d10a      	bne.n	80090ce <_vfiprintf_r+0x156>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80090bc:	d132      	bne.n	8009124 <_vfiprintf_r+0x1ac>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ca:	3402      	adds	r4, #2
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a4 <_vfiprintf_r+0x22c>
 80090d2:	7821      	ldrb	r1, [r4, #0]
 80090d4:	2203      	movs	r2, #3
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7f7 f8a2 	bl	8000220 <memchr>
 80090dc:	b138      	cbz	r0, 80090ee <_vfiprintf_r+0x176>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	eba0 000a 	sub.w	r0, r0, sl
 80090e4:	2240      	movs	r2, #64	@ 0x40
 80090e6:	4082      	lsls	r2, r0
 80090e8:	4313      	orrs	r3, r2
 80090ea:	3401      	adds	r4, #1
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4829      	ldr	r0, [pc, #164]	@ (8009198 <_vfiprintf_r+0x220>)
 80090f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f8:	2206      	movs	r2, #6
 80090fa:	f7f7 f891 	bl	8000220 <memchr>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d03f      	beq.n	8009182 <_vfiprintf_r+0x20a>
 8009102:	4b26      	ldr	r3, [pc, #152]	@ (800919c <_vfiprintf_r+0x224>)
 8009104:	bb1b      	cbnz	r3, 800914e <_vfiprintf_r+0x1d6>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3307      	adds	r3, #7
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	3308      	adds	r3, #8
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	443b      	add	r3, r7
 8009116:	9309      	str	r3, [sp, #36]	@ 0x24
 8009118:	e76a      	b.n	8008ff0 <_vfiprintf_r+0x78>
 800911a:	fb0c 3202 	mla	r2, ip, r2, r3
 800911e:	460c      	mov	r4, r1
 8009120:	2001      	movs	r0, #1
 8009122:	e7a8      	b.n	8009076 <_vfiprintf_r+0xfe>
 8009124:	2300      	movs	r3, #0
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4620      	mov	r0, r4
 8009132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009136:	3a30      	subs	r2, #48	@ 0x30
 8009138:	2a09      	cmp	r2, #9
 800913a:	d903      	bls.n	8009144 <_vfiprintf_r+0x1cc>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <_vfiprintf_r+0x156>
 8009140:	9105      	str	r1, [sp, #20]
 8009142:	e7c4      	b.n	80090ce <_vfiprintf_r+0x156>
 8009144:	fb0c 2101 	mla	r1, ip, r1, r2
 8009148:	4604      	mov	r4, r0
 800914a:	2301      	movs	r3, #1
 800914c:	e7f0      	b.n	8009130 <_vfiprintf_r+0x1b8>
 800914e:	ab03      	add	r3, sp, #12
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	462a      	mov	r2, r5
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <_vfiprintf_r+0x228>)
 8009156:	a904      	add	r1, sp, #16
 8009158:	4630      	mov	r0, r6
 800915a:	f7fc fac3 	bl	80056e4 <_printf_float>
 800915e:	4607      	mov	r7, r0
 8009160:	1c78      	adds	r0, r7, #1
 8009162:	d1d6      	bne.n	8009112 <_vfiprintf_r+0x19a>
 8009164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d405      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d402      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 8009170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009172:	f7fd faf5 	bl	8006760 <__retarget_lock_release_recursive>
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	065b      	lsls	r3, r3, #25
 800917a:	f53f af1f 	bmi.w	8008fbc <_vfiprintf_r+0x44>
 800917e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009180:	e71e      	b.n	8008fc0 <_vfiprintf_r+0x48>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <_vfiprintf_r+0x228>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4630      	mov	r0, r6
 800918e:	f7fc fd41 	bl	8005c14 <_printf_i>
 8009192:	e7e4      	b.n	800915e <_vfiprintf_r+0x1e6>
 8009194:	0800a231 	.word	0x0800a231
 8009198:	0800a23b 	.word	0x0800a23b
 800919c:	080056e5 	.word	0x080056e5
 80091a0:	08008f53 	.word	0x08008f53
 80091a4:	0800a237 	.word	0x0800a237

080091a8 <__sflush_r>:
 80091a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b0:	0716      	lsls	r6, r2, #28
 80091b2:	4605      	mov	r5, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	d454      	bmi.n	8009262 <__sflush_r+0xba>
 80091b8:	684b      	ldr	r3, [r1, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dc02      	bgt.n	80091c4 <__sflush_r+0x1c>
 80091be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd48      	ble.n	8009256 <__sflush_r+0xae>
 80091c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d045      	beq.n	8009256 <__sflush_r+0xae>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091d0:	682f      	ldr	r7, [r5, #0]
 80091d2:	6a21      	ldr	r1, [r4, #32]
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	d030      	beq.n	800923a <__sflush_r+0x92>
 80091d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	0759      	lsls	r1, r3, #29
 80091de:	d505      	bpl.n	80091ec <__sflush_r+0x44>
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091e6:	b10b      	cbz	r3, 80091ec <__sflush_r+0x44>
 80091e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091f0:	6a21      	ldr	r1, [r4, #32]
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b0      	blx	r6
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	d106      	bne.n	800920a <__sflush_r+0x62>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	291d      	cmp	r1, #29
 8009200:	d82b      	bhi.n	800925a <__sflush_r+0xb2>
 8009202:	4a2a      	ldr	r2, [pc, #168]	@ (80092ac <__sflush_r+0x104>)
 8009204:	410a      	asrs	r2, r1
 8009206:	07d6      	lsls	r6, r2, #31
 8009208:	d427      	bmi.n	800925a <__sflush_r+0xb2>
 800920a:	2200      	movs	r2, #0
 800920c:	6062      	str	r2, [r4, #4]
 800920e:	04d9      	lsls	r1, r3, #19
 8009210:	6922      	ldr	r2, [r4, #16]
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	d504      	bpl.n	8009220 <__sflush_r+0x78>
 8009216:	1c42      	adds	r2, r0, #1
 8009218:	d101      	bne.n	800921e <__sflush_r+0x76>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b903      	cbnz	r3, 8009220 <__sflush_r+0x78>
 800921e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009222:	602f      	str	r7, [r5, #0]
 8009224:	b1b9      	cbz	r1, 8009256 <__sflush_r+0xae>
 8009226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800922a:	4299      	cmp	r1, r3
 800922c:	d002      	beq.n	8009234 <__sflush_r+0x8c>
 800922e:	4628      	mov	r0, r5
 8009230:	f7fe f8ea 	bl	8007408 <_free_r>
 8009234:	2300      	movs	r3, #0
 8009236:	6363      	str	r3, [r4, #52]	@ 0x34
 8009238:	e00d      	b.n	8009256 <__sflush_r+0xae>
 800923a:	2301      	movs	r3, #1
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	4602      	mov	r2, r0
 8009242:	1c50      	adds	r0, r2, #1
 8009244:	d1c9      	bne.n	80091da <__sflush_r+0x32>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c6      	beq.n	80091da <__sflush_r+0x32>
 800924c:	2b1d      	cmp	r3, #29
 800924e:	d001      	beq.n	8009254 <__sflush_r+0xac>
 8009250:	2b16      	cmp	r3, #22
 8009252:	d11e      	bne.n	8009292 <__sflush_r+0xea>
 8009254:	602f      	str	r7, [r5, #0]
 8009256:	2000      	movs	r0, #0
 8009258:	e022      	b.n	80092a0 <__sflush_r+0xf8>
 800925a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925e:	b21b      	sxth	r3, r3
 8009260:	e01b      	b.n	800929a <__sflush_r+0xf2>
 8009262:	690f      	ldr	r7, [r1, #16]
 8009264:	2f00      	cmp	r7, #0
 8009266:	d0f6      	beq.n	8009256 <__sflush_r+0xae>
 8009268:	0793      	lsls	r3, r2, #30
 800926a:	680e      	ldr	r6, [r1, #0]
 800926c:	bf08      	it	eq
 800926e:	694b      	ldreq	r3, [r1, #20]
 8009270:	600f      	str	r7, [r1, #0]
 8009272:	bf18      	it	ne
 8009274:	2300      	movne	r3, #0
 8009276:	eba6 0807 	sub.w	r8, r6, r7
 800927a:	608b      	str	r3, [r1, #8]
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	dde9      	ble.n	8009256 <__sflush_r+0xae>
 8009282:	6a21      	ldr	r1, [r4, #32]
 8009284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009286:	4643      	mov	r3, r8
 8009288:	463a      	mov	r2, r7
 800928a:	4628      	mov	r0, r5
 800928c:	47b0      	blx	r6
 800928e:	2800      	cmp	r0, #0
 8009290:	dc08      	bgt.n	80092a4 <__sflush_r+0xfc>
 8009292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	4407      	add	r7, r0
 80092a6:	eba8 0800 	sub.w	r8, r8, r0
 80092aa:	e7e7      	b.n	800927c <__sflush_r+0xd4>
 80092ac:	dfbffffe 	.word	0xdfbffffe

080092b0 <_fflush_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b913      	cbnz	r3, 80092c0 <_fflush_r+0x10>
 80092ba:	2500      	movs	r5, #0
 80092bc:	4628      	mov	r0, r5
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	b118      	cbz	r0, 80092ca <_fflush_r+0x1a>
 80092c2:	6a03      	ldr	r3, [r0, #32]
 80092c4:	b90b      	cbnz	r3, 80092ca <_fflush_r+0x1a>
 80092c6:	f7fd f865 	bl	8006394 <__sinit>
 80092ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f3      	beq.n	80092ba <_fflush_r+0xa>
 80092d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092d4:	07d0      	lsls	r0, r2, #31
 80092d6:	d404      	bmi.n	80092e2 <_fflush_r+0x32>
 80092d8:	0599      	lsls	r1, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_fflush_r+0x32>
 80092dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092de:	f7fd fa3e 	bl	800675e <__retarget_lock_acquire_recursive>
 80092e2:	4628      	mov	r0, r5
 80092e4:	4621      	mov	r1, r4
 80092e6:	f7ff ff5f 	bl	80091a8 <__sflush_r>
 80092ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ec:	07da      	lsls	r2, r3, #31
 80092ee:	4605      	mov	r5, r0
 80092f0:	d4e4      	bmi.n	80092bc <_fflush_r+0xc>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	059b      	lsls	r3, r3, #22
 80092f6:	d4e1      	bmi.n	80092bc <_fflush_r+0xc>
 80092f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fa:	f7fd fa31 	bl	8006760 <__retarget_lock_release_recursive>
 80092fe:	e7dd      	b.n	80092bc <_fflush_r+0xc>

08009300 <__swhatbuf_r>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	460c      	mov	r4, r1
 8009304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009308:	2900      	cmp	r1, #0
 800930a:	b096      	sub	sp, #88	@ 0x58
 800930c:	4615      	mov	r5, r2
 800930e:	461e      	mov	r6, r3
 8009310:	da0d      	bge.n	800932e <__swhatbuf_r+0x2e>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009318:	f04f 0100 	mov.w	r1, #0
 800931c:	bf14      	ite	ne
 800931e:	2340      	movne	r3, #64	@ 0x40
 8009320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009324:	2000      	movs	r0, #0
 8009326:	6031      	str	r1, [r6, #0]
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	b016      	add	sp, #88	@ 0x58
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	466a      	mov	r2, sp
 8009330:	f000 f908 	bl	8009544 <_fstat_r>
 8009334:	2800      	cmp	r0, #0
 8009336:	dbec      	blt.n	8009312 <__swhatbuf_r+0x12>
 8009338:	9901      	ldr	r1, [sp, #4]
 800933a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800933e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009342:	4259      	negs	r1, r3
 8009344:	4159      	adcs	r1, r3
 8009346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800934a:	e7eb      	b.n	8009324 <__swhatbuf_r+0x24>

0800934c <__smakebuf_r>:
 800934c:	898b      	ldrh	r3, [r1, #12]
 800934e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009350:	079d      	lsls	r5, r3, #30
 8009352:	4606      	mov	r6, r0
 8009354:	460c      	mov	r4, r1
 8009356:	d507      	bpl.n	8009368 <__smakebuf_r+0x1c>
 8009358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	2301      	movs	r3, #1
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	b003      	add	sp, #12
 8009366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009368:	ab01      	add	r3, sp, #4
 800936a:	466a      	mov	r2, sp
 800936c:	f7ff ffc8 	bl	8009300 <__swhatbuf_r>
 8009370:	9f00      	ldr	r7, [sp, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	4639      	mov	r1, r7
 8009376:	4630      	mov	r0, r6
 8009378:	f7fe f8ba 	bl	80074f0 <_malloc_r>
 800937c:	b948      	cbnz	r0, 8009392 <__smakebuf_r+0x46>
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	059a      	lsls	r2, r3, #22
 8009384:	d4ee      	bmi.n	8009364 <__smakebuf_r+0x18>
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	f043 0302 	orr.w	r3, r3, #2
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	e7e2      	b.n	8009358 <__smakebuf_r+0xc>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	6020      	str	r0, [r4, #0]
 8009396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093a2:	b15b      	cbz	r3, 80093bc <__smakebuf_r+0x70>
 80093a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f8dd 	bl	8009568 <_isatty_r>
 80093ae:	b128      	cbz	r0, 80093bc <__smakebuf_r+0x70>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f023 0303 	bic.w	r3, r3, #3
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	431d      	orrs	r5, r3
 80093c0:	81a5      	strh	r5, [r4, #12]
 80093c2:	e7cf      	b.n	8009364 <__smakebuf_r+0x18>

080093c4 <__swbuf_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	460e      	mov	r6, r1
 80093c8:	4614      	mov	r4, r2
 80093ca:	4605      	mov	r5, r0
 80093cc:	b118      	cbz	r0, 80093d6 <__swbuf_r+0x12>
 80093ce:	6a03      	ldr	r3, [r0, #32]
 80093d0:	b90b      	cbnz	r3, 80093d6 <__swbuf_r+0x12>
 80093d2:	f7fc ffdf 	bl	8006394 <__sinit>
 80093d6:	69a3      	ldr	r3, [r4, #24]
 80093d8:	60a3      	str	r3, [r4, #8]
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	071a      	lsls	r2, r3, #28
 80093de:	d501      	bpl.n	80093e4 <__swbuf_r+0x20>
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	b943      	cbnz	r3, 80093f6 <__swbuf_r+0x32>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f82a 	bl	8009440 <__swsetup_r>
 80093ec:	b118      	cbz	r0, 80093f6 <__swbuf_r+0x32>
 80093ee:	f04f 37ff 	mov.w	r7, #4294967295
 80093f2:	4638      	mov	r0, r7
 80093f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	1a98      	subs	r0, r3, r2
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	b2f6      	uxtb	r6, r6
 8009400:	4283      	cmp	r3, r0
 8009402:	4637      	mov	r7, r6
 8009404:	dc05      	bgt.n	8009412 <__swbuf_r+0x4e>
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f7ff ff51 	bl	80092b0 <_fflush_r>
 800940e:	2800      	cmp	r0, #0
 8009410:	d1ed      	bne.n	80093ee <__swbuf_r+0x2a>
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	3b01      	subs	r3, #1
 8009416:	60a3      	str	r3, [r4, #8]
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	6022      	str	r2, [r4, #0]
 800941e:	701e      	strb	r6, [r3, #0]
 8009420:	6962      	ldr	r2, [r4, #20]
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	429a      	cmp	r2, r3
 8009426:	d004      	beq.n	8009432 <__swbuf_r+0x6e>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	07db      	lsls	r3, r3, #31
 800942c:	d5e1      	bpl.n	80093f2 <__swbuf_r+0x2e>
 800942e:	2e0a      	cmp	r6, #10
 8009430:	d1df      	bne.n	80093f2 <__swbuf_r+0x2e>
 8009432:	4621      	mov	r1, r4
 8009434:	4628      	mov	r0, r5
 8009436:	f7ff ff3b 	bl	80092b0 <_fflush_r>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0d9      	beq.n	80093f2 <__swbuf_r+0x2e>
 800943e:	e7d6      	b.n	80093ee <__swbuf_r+0x2a>

08009440 <__swsetup_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4b29      	ldr	r3, [pc, #164]	@ (80094e8 <__swsetup_r+0xa8>)
 8009444:	4605      	mov	r5, r0
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	460c      	mov	r4, r1
 800944a:	b118      	cbz	r0, 8009454 <__swsetup_r+0x14>
 800944c:	6a03      	ldr	r3, [r0, #32]
 800944e:	b90b      	cbnz	r3, 8009454 <__swsetup_r+0x14>
 8009450:	f7fc ffa0 	bl	8006394 <__sinit>
 8009454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009458:	0719      	lsls	r1, r3, #28
 800945a:	d422      	bmi.n	80094a2 <__swsetup_r+0x62>
 800945c:	06da      	lsls	r2, r3, #27
 800945e:	d407      	bmi.n	8009470 <__swsetup_r+0x30>
 8009460:	2209      	movs	r2, #9
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009468:	81a3      	strh	r3, [r4, #12]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	e033      	b.n	80094d8 <__swsetup_r+0x98>
 8009470:	0758      	lsls	r0, r3, #29
 8009472:	d512      	bpl.n	800949a <__swsetup_r+0x5a>
 8009474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009476:	b141      	cbz	r1, 800948a <__swsetup_r+0x4a>
 8009478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800947c:	4299      	cmp	r1, r3
 800947e:	d002      	beq.n	8009486 <__swsetup_r+0x46>
 8009480:	4628      	mov	r0, r5
 8009482:	f7fd ffc1 	bl	8007408 <_free_r>
 8009486:	2300      	movs	r3, #0
 8009488:	6363      	str	r3, [r4, #52]	@ 0x34
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	2300      	movs	r3, #0
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	f043 0308 	orr.w	r3, r3, #8
 80094a0:	81a3      	strh	r3, [r4, #12]
 80094a2:	6923      	ldr	r3, [r4, #16]
 80094a4:	b94b      	cbnz	r3, 80094ba <__swsetup_r+0x7a>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b0:	d003      	beq.n	80094ba <__swsetup_r+0x7a>
 80094b2:	4621      	mov	r1, r4
 80094b4:	4628      	mov	r0, r5
 80094b6:	f7ff ff49 	bl	800934c <__smakebuf_r>
 80094ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094be:	f013 0201 	ands.w	r2, r3, #1
 80094c2:	d00a      	beq.n	80094da <__swsetup_r+0x9a>
 80094c4:	2200      	movs	r2, #0
 80094c6:	60a2      	str	r2, [r4, #8]
 80094c8:	6962      	ldr	r2, [r4, #20]
 80094ca:	4252      	negs	r2, r2
 80094cc:	61a2      	str	r2, [r4, #24]
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	b942      	cbnz	r2, 80094e4 <__swsetup_r+0xa4>
 80094d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094d6:	d1c5      	bne.n	8009464 <__swsetup_r+0x24>
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	0799      	lsls	r1, r3, #30
 80094dc:	bf58      	it	pl
 80094de:	6962      	ldrpl	r2, [r4, #20]
 80094e0:	60a2      	str	r2, [r4, #8]
 80094e2:	e7f4      	b.n	80094ce <__swsetup_r+0x8e>
 80094e4:	2000      	movs	r0, #0
 80094e6:	e7f7      	b.n	80094d8 <__swsetup_r+0x98>
 80094e8:	20000020 	.word	0x20000020

080094ec <memmove>:
 80094ec:	4288      	cmp	r0, r1
 80094ee:	b510      	push	{r4, lr}
 80094f0:	eb01 0402 	add.w	r4, r1, r2
 80094f4:	d902      	bls.n	80094fc <memmove+0x10>
 80094f6:	4284      	cmp	r4, r0
 80094f8:	4623      	mov	r3, r4
 80094fa:	d807      	bhi.n	800950c <memmove+0x20>
 80094fc:	1e43      	subs	r3, r0, #1
 80094fe:	42a1      	cmp	r1, r4
 8009500:	d008      	beq.n	8009514 <memmove+0x28>
 8009502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800950a:	e7f8      	b.n	80094fe <memmove+0x12>
 800950c:	4402      	add	r2, r0
 800950e:	4601      	mov	r1, r0
 8009510:	428a      	cmp	r2, r1
 8009512:	d100      	bne.n	8009516 <memmove+0x2a>
 8009514:	bd10      	pop	{r4, pc}
 8009516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800951a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800951e:	e7f7      	b.n	8009510 <memmove+0x24>

08009520 <strncmp>:
 8009520:	b510      	push	{r4, lr}
 8009522:	b16a      	cbz	r2, 8009540 <strncmp+0x20>
 8009524:	3901      	subs	r1, #1
 8009526:	1884      	adds	r4, r0, r2
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009530:	429a      	cmp	r2, r3
 8009532:	d103      	bne.n	800953c <strncmp+0x1c>
 8009534:	42a0      	cmp	r0, r4
 8009536:	d001      	beq.n	800953c <strncmp+0x1c>
 8009538:	2a00      	cmp	r2, #0
 800953a:	d1f5      	bne.n	8009528 <strncmp+0x8>
 800953c:	1ad0      	subs	r0, r2, r3
 800953e:	bd10      	pop	{r4, pc}
 8009540:	4610      	mov	r0, r2
 8009542:	e7fc      	b.n	800953e <strncmp+0x1e>

08009544 <_fstat_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	@ (8009564 <_fstat_r+0x20>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	4611      	mov	r1, r2
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	f7f8 fc13 	bl	8001d7c <_fstat>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d102      	bne.n	8009560 <_fstat_r+0x1c>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	b103      	cbz	r3, 8009560 <_fstat_r+0x1c>
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	bf00      	nop
 8009564:	200004e0 	.word	0x200004e0

08009568 <_isatty_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d06      	ldr	r5, [pc, #24]	@ (8009584 <_isatty_r+0x1c>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	f7f8 fc12 	bl	8001d9c <_isatty>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_isatty_r+0x1a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_isatty_r+0x1a>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200004e0 	.word	0x200004e0

08009588 <_sbrk_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	@ (80095a4 <_sbrk_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f8 fc1a 	bl	8001dcc <_sbrk>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_sbrk_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_sbrk_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	200004e0 	.word	0x200004e0

080095a8 <memcpy>:
 80095a8:	440a      	add	r2, r1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b0:	d100      	bne.n	80095b4 <memcpy+0xc>
 80095b2:	4770      	bx	lr
 80095b4:	b510      	push	{r4, lr}
 80095b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095be:	4291      	cmp	r1, r2
 80095c0:	d1f9      	bne.n	80095b6 <memcpy+0xe>
 80095c2:	bd10      	pop	{r4, pc}
 80095c4:	0000      	movs	r0, r0
	...

080095c8 <nan>:
 80095c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80095d0 <nan+0x8>
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	00000000 	.word	0x00000000
 80095d4:	7ff80000 	.word	0x7ff80000

080095d8 <__assert_func>:
 80095d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095da:	4614      	mov	r4, r2
 80095dc:	461a      	mov	r2, r3
 80095de:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <__assert_func+0x2c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4605      	mov	r5, r0
 80095e4:	68d8      	ldr	r0, [r3, #12]
 80095e6:	b954      	cbnz	r4, 80095fe <__assert_func+0x26>
 80095e8:	4b07      	ldr	r3, [pc, #28]	@ (8009608 <__assert_func+0x30>)
 80095ea:	461c      	mov	r4, r3
 80095ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095f0:	9100      	str	r1, [sp, #0]
 80095f2:	462b      	mov	r3, r5
 80095f4:	4905      	ldr	r1, [pc, #20]	@ (800960c <__assert_func+0x34>)
 80095f6:	f000 fba7 	bl	8009d48 <fiprintf>
 80095fa:	f000 fbb7 	bl	8009d6c <abort>
 80095fe:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <__assert_func+0x38>)
 8009600:	e7f4      	b.n	80095ec <__assert_func+0x14>
 8009602:	bf00      	nop
 8009604:	20000020 	.word	0x20000020
 8009608:	0800a285 	.word	0x0800a285
 800960c:	0800a257 	.word	0x0800a257
 8009610:	0800a24a 	.word	0x0800a24a

08009614 <_calloc_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	fba1 5402 	umull	r5, r4, r1, r2
 800961a:	b93c      	cbnz	r4, 800962c <_calloc_r+0x18>
 800961c:	4629      	mov	r1, r5
 800961e:	f7fd ff67 	bl	80074f0 <_malloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	b928      	cbnz	r0, 8009632 <_calloc_r+0x1e>
 8009626:	2600      	movs	r6, #0
 8009628:	4630      	mov	r0, r6
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	220c      	movs	r2, #12
 800962e:	6002      	str	r2, [r0, #0]
 8009630:	e7f9      	b.n	8009626 <_calloc_r+0x12>
 8009632:	462a      	mov	r2, r5
 8009634:	4621      	mov	r1, r4
 8009636:	f7fd f814 	bl	8006662 <memset>
 800963a:	e7f5      	b.n	8009628 <_calloc_r+0x14>

0800963c <rshift>:
 800963c:	6903      	ldr	r3, [r0, #16]
 800963e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009646:	ea4f 1261 	mov.w	r2, r1, asr #5
 800964a:	f100 0414 	add.w	r4, r0, #20
 800964e:	dd45      	ble.n	80096dc <rshift+0xa0>
 8009650:	f011 011f 	ands.w	r1, r1, #31
 8009654:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009658:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800965c:	d10c      	bne.n	8009678 <rshift+0x3c>
 800965e:	f100 0710 	add.w	r7, r0, #16
 8009662:	4629      	mov	r1, r5
 8009664:	42b1      	cmp	r1, r6
 8009666:	d334      	bcc.n	80096d2 <rshift+0x96>
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	1eea      	subs	r2, r5, #3
 800966e:	4296      	cmp	r6, r2
 8009670:	bf38      	it	cc
 8009672:	2300      	movcc	r3, #0
 8009674:	4423      	add	r3, r4
 8009676:	e015      	b.n	80096a4 <rshift+0x68>
 8009678:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800967c:	f1c1 0820 	rsb	r8, r1, #32
 8009680:	40cf      	lsrs	r7, r1
 8009682:	f105 0e04 	add.w	lr, r5, #4
 8009686:	46a1      	mov	r9, r4
 8009688:	4576      	cmp	r6, lr
 800968a:	46f4      	mov	ip, lr
 800968c:	d815      	bhi.n	80096ba <rshift+0x7e>
 800968e:	1a9a      	subs	r2, r3, r2
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	3a04      	subs	r2, #4
 8009694:	3501      	adds	r5, #1
 8009696:	42ae      	cmp	r6, r5
 8009698:	bf38      	it	cc
 800969a:	2200      	movcc	r2, #0
 800969c:	18a3      	adds	r3, r4, r2
 800969e:	50a7      	str	r7, [r4, r2]
 80096a0:	b107      	cbz	r7, 80096a4 <rshift+0x68>
 80096a2:	3304      	adds	r3, #4
 80096a4:	1b1a      	subs	r2, r3, r4
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096ac:	bf08      	it	eq
 80096ae:	2300      	moveq	r3, #0
 80096b0:	6102      	str	r2, [r0, #16]
 80096b2:	bf08      	it	eq
 80096b4:	6143      	streq	r3, [r0, #20]
 80096b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ba:	f8dc c000 	ldr.w	ip, [ip]
 80096be:	fa0c fc08 	lsl.w	ip, ip, r8
 80096c2:	ea4c 0707 	orr.w	r7, ip, r7
 80096c6:	f849 7b04 	str.w	r7, [r9], #4
 80096ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096ce:	40cf      	lsrs	r7, r1
 80096d0:	e7da      	b.n	8009688 <rshift+0x4c>
 80096d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80096d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80096da:	e7c3      	b.n	8009664 <rshift+0x28>
 80096dc:	4623      	mov	r3, r4
 80096de:	e7e1      	b.n	80096a4 <rshift+0x68>

080096e0 <__hexdig_fun>:
 80096e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d802      	bhi.n	80096ee <__hexdig_fun+0xe>
 80096e8:	3820      	subs	r0, #32
 80096ea:	b2c0      	uxtb	r0, r0
 80096ec:	4770      	bx	lr
 80096ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d801      	bhi.n	80096fa <__hexdig_fun+0x1a>
 80096f6:	3847      	subs	r0, #71	@ 0x47
 80096f8:	e7f7      	b.n	80096ea <__hexdig_fun+0xa>
 80096fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d801      	bhi.n	8009706 <__hexdig_fun+0x26>
 8009702:	3827      	subs	r0, #39	@ 0x27
 8009704:	e7f1      	b.n	80096ea <__hexdig_fun+0xa>
 8009706:	2000      	movs	r0, #0
 8009708:	4770      	bx	lr
	...

0800970c <__gethex>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	b085      	sub	sp, #20
 8009712:	468a      	mov	sl, r1
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	680b      	ldr	r3, [r1, #0]
 8009718:	9001      	str	r0, [sp, #4]
 800971a:	4690      	mov	r8, r2
 800971c:	1c9c      	adds	r4, r3, #2
 800971e:	46a1      	mov	r9, r4
 8009720:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009724:	2830      	cmp	r0, #48	@ 0x30
 8009726:	d0fa      	beq.n	800971e <__gethex+0x12>
 8009728:	eba9 0303 	sub.w	r3, r9, r3
 800972c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009730:	f7ff ffd6 	bl	80096e0 <__hexdig_fun>
 8009734:	4605      	mov	r5, r0
 8009736:	2800      	cmp	r0, #0
 8009738:	d168      	bne.n	800980c <__gethex+0x100>
 800973a:	49a0      	ldr	r1, [pc, #640]	@ (80099bc <__gethex+0x2b0>)
 800973c:	2201      	movs	r2, #1
 800973e:	4648      	mov	r0, r9
 8009740:	f7ff feee 	bl	8009520 <strncmp>
 8009744:	4607      	mov	r7, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	d167      	bne.n	800981a <__gethex+0x10e>
 800974a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800974e:	4626      	mov	r6, r4
 8009750:	f7ff ffc6 	bl	80096e0 <__hexdig_fun>
 8009754:	2800      	cmp	r0, #0
 8009756:	d062      	beq.n	800981e <__gethex+0x112>
 8009758:	4623      	mov	r3, r4
 800975a:	7818      	ldrb	r0, [r3, #0]
 800975c:	2830      	cmp	r0, #48	@ 0x30
 800975e:	4699      	mov	r9, r3
 8009760:	f103 0301 	add.w	r3, r3, #1
 8009764:	d0f9      	beq.n	800975a <__gethex+0x4e>
 8009766:	f7ff ffbb 	bl	80096e0 <__hexdig_fun>
 800976a:	fab0 f580 	clz	r5, r0
 800976e:	096d      	lsrs	r5, r5, #5
 8009770:	f04f 0b01 	mov.w	fp, #1
 8009774:	464a      	mov	r2, r9
 8009776:	4616      	mov	r6, r2
 8009778:	3201      	adds	r2, #1
 800977a:	7830      	ldrb	r0, [r6, #0]
 800977c:	f7ff ffb0 	bl	80096e0 <__hexdig_fun>
 8009780:	2800      	cmp	r0, #0
 8009782:	d1f8      	bne.n	8009776 <__gethex+0x6a>
 8009784:	498d      	ldr	r1, [pc, #564]	@ (80099bc <__gethex+0x2b0>)
 8009786:	2201      	movs	r2, #1
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fec9 	bl	8009520 <strncmp>
 800978e:	2800      	cmp	r0, #0
 8009790:	d13f      	bne.n	8009812 <__gethex+0x106>
 8009792:	b944      	cbnz	r4, 80097a6 <__gethex+0x9a>
 8009794:	1c74      	adds	r4, r6, #1
 8009796:	4622      	mov	r2, r4
 8009798:	4616      	mov	r6, r2
 800979a:	3201      	adds	r2, #1
 800979c:	7830      	ldrb	r0, [r6, #0]
 800979e:	f7ff ff9f 	bl	80096e0 <__hexdig_fun>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1f8      	bne.n	8009798 <__gethex+0x8c>
 80097a6:	1ba4      	subs	r4, r4, r6
 80097a8:	00a7      	lsls	r7, r4, #2
 80097aa:	7833      	ldrb	r3, [r6, #0]
 80097ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097b0:	2b50      	cmp	r3, #80	@ 0x50
 80097b2:	d13e      	bne.n	8009832 <__gethex+0x126>
 80097b4:	7873      	ldrb	r3, [r6, #1]
 80097b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80097b8:	d033      	beq.n	8009822 <__gethex+0x116>
 80097ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80097bc:	d034      	beq.n	8009828 <__gethex+0x11c>
 80097be:	1c71      	adds	r1, r6, #1
 80097c0:	2400      	movs	r4, #0
 80097c2:	7808      	ldrb	r0, [r1, #0]
 80097c4:	f7ff ff8c 	bl	80096e0 <__hexdig_fun>
 80097c8:	1e43      	subs	r3, r0, #1
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b18      	cmp	r3, #24
 80097ce:	d830      	bhi.n	8009832 <__gethex+0x126>
 80097d0:	f1a0 0210 	sub.w	r2, r0, #16
 80097d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097d8:	f7ff ff82 	bl	80096e0 <__hexdig_fun>
 80097dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80097e0:	fa5f fc8c 	uxtb.w	ip, ip
 80097e4:	f1bc 0f18 	cmp.w	ip, #24
 80097e8:	f04f 030a 	mov.w	r3, #10
 80097ec:	d91e      	bls.n	800982c <__gethex+0x120>
 80097ee:	b104      	cbz	r4, 80097f2 <__gethex+0xe6>
 80097f0:	4252      	negs	r2, r2
 80097f2:	4417      	add	r7, r2
 80097f4:	f8ca 1000 	str.w	r1, [sl]
 80097f8:	b1ed      	cbz	r5, 8009836 <__gethex+0x12a>
 80097fa:	f1bb 0f00 	cmp.w	fp, #0
 80097fe:	bf0c      	ite	eq
 8009800:	2506      	moveq	r5, #6
 8009802:	2500      	movne	r5, #0
 8009804:	4628      	mov	r0, r5
 8009806:	b005      	add	sp, #20
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	2500      	movs	r5, #0
 800980e:	462c      	mov	r4, r5
 8009810:	e7b0      	b.n	8009774 <__gethex+0x68>
 8009812:	2c00      	cmp	r4, #0
 8009814:	d1c7      	bne.n	80097a6 <__gethex+0x9a>
 8009816:	4627      	mov	r7, r4
 8009818:	e7c7      	b.n	80097aa <__gethex+0x9e>
 800981a:	464e      	mov	r6, r9
 800981c:	462f      	mov	r7, r5
 800981e:	2501      	movs	r5, #1
 8009820:	e7c3      	b.n	80097aa <__gethex+0x9e>
 8009822:	2400      	movs	r4, #0
 8009824:	1cb1      	adds	r1, r6, #2
 8009826:	e7cc      	b.n	80097c2 <__gethex+0xb6>
 8009828:	2401      	movs	r4, #1
 800982a:	e7fb      	b.n	8009824 <__gethex+0x118>
 800982c:	fb03 0002 	mla	r0, r3, r2, r0
 8009830:	e7ce      	b.n	80097d0 <__gethex+0xc4>
 8009832:	4631      	mov	r1, r6
 8009834:	e7de      	b.n	80097f4 <__gethex+0xe8>
 8009836:	eba6 0309 	sub.w	r3, r6, r9
 800983a:	3b01      	subs	r3, #1
 800983c:	4629      	mov	r1, r5
 800983e:	2b07      	cmp	r3, #7
 8009840:	dc0a      	bgt.n	8009858 <__gethex+0x14c>
 8009842:	9801      	ldr	r0, [sp, #4]
 8009844:	f7fd fee0 	bl	8007608 <_Balloc>
 8009848:	4604      	mov	r4, r0
 800984a:	b940      	cbnz	r0, 800985e <__gethex+0x152>
 800984c:	4b5c      	ldr	r3, [pc, #368]	@ (80099c0 <__gethex+0x2b4>)
 800984e:	4602      	mov	r2, r0
 8009850:	21e4      	movs	r1, #228	@ 0xe4
 8009852:	485c      	ldr	r0, [pc, #368]	@ (80099c4 <__gethex+0x2b8>)
 8009854:	f7ff fec0 	bl	80095d8 <__assert_func>
 8009858:	3101      	adds	r1, #1
 800985a:	105b      	asrs	r3, r3, #1
 800985c:	e7ef      	b.n	800983e <__gethex+0x132>
 800985e:	f100 0a14 	add.w	sl, r0, #20
 8009862:	2300      	movs	r3, #0
 8009864:	4655      	mov	r5, sl
 8009866:	469b      	mov	fp, r3
 8009868:	45b1      	cmp	r9, r6
 800986a:	d337      	bcc.n	80098dc <__gethex+0x1d0>
 800986c:	f845 bb04 	str.w	fp, [r5], #4
 8009870:	eba5 050a 	sub.w	r5, r5, sl
 8009874:	10ad      	asrs	r5, r5, #2
 8009876:	6125      	str	r5, [r4, #16]
 8009878:	4658      	mov	r0, fp
 800987a:	f7fd ffb7 	bl	80077ec <__hi0bits>
 800987e:	016d      	lsls	r5, r5, #5
 8009880:	f8d8 6000 	ldr.w	r6, [r8]
 8009884:	1a2d      	subs	r5, r5, r0
 8009886:	42b5      	cmp	r5, r6
 8009888:	dd54      	ble.n	8009934 <__gethex+0x228>
 800988a:	1bad      	subs	r5, r5, r6
 800988c:	4629      	mov	r1, r5
 800988e:	4620      	mov	r0, r4
 8009890:	f7fe fb4b 	bl	8007f2a <__any_on>
 8009894:	4681      	mov	r9, r0
 8009896:	b178      	cbz	r0, 80098b8 <__gethex+0x1ac>
 8009898:	1e6b      	subs	r3, r5, #1
 800989a:	1159      	asrs	r1, r3, #5
 800989c:	f003 021f 	and.w	r2, r3, #31
 80098a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098a4:	f04f 0901 	mov.w	r9, #1
 80098a8:	fa09 f202 	lsl.w	r2, r9, r2
 80098ac:	420a      	tst	r2, r1
 80098ae:	d003      	beq.n	80098b8 <__gethex+0x1ac>
 80098b0:	454b      	cmp	r3, r9
 80098b2:	dc36      	bgt.n	8009922 <__gethex+0x216>
 80098b4:	f04f 0902 	mov.w	r9, #2
 80098b8:	4629      	mov	r1, r5
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff febe 	bl	800963c <rshift>
 80098c0:	442f      	add	r7, r5
 80098c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098c6:	42bb      	cmp	r3, r7
 80098c8:	da42      	bge.n	8009950 <__gethex+0x244>
 80098ca:	9801      	ldr	r0, [sp, #4]
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7fd fedb 	bl	8007688 <_Bfree>
 80098d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098d4:	2300      	movs	r3, #0
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	25a3      	movs	r5, #163	@ 0xa3
 80098da:	e793      	b.n	8009804 <__gethex+0xf8>
 80098dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80098e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80098e2:	d012      	beq.n	800990a <__gethex+0x1fe>
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d104      	bne.n	80098f2 <__gethex+0x1e6>
 80098e8:	f845 bb04 	str.w	fp, [r5], #4
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	465b      	mov	r3, fp
 80098f2:	7830      	ldrb	r0, [r6, #0]
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	f7ff fef3 	bl	80096e0 <__hexdig_fun>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	f000 000f 	and.w	r0, r0, #15
 8009900:	4098      	lsls	r0, r3
 8009902:	ea4b 0b00 	orr.w	fp, fp, r0
 8009906:	3304      	adds	r3, #4
 8009908:	e7ae      	b.n	8009868 <__gethex+0x15c>
 800990a:	45b1      	cmp	r9, r6
 800990c:	d8ea      	bhi.n	80098e4 <__gethex+0x1d8>
 800990e:	492b      	ldr	r1, [pc, #172]	@ (80099bc <__gethex+0x2b0>)
 8009910:	9303      	str	r3, [sp, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff fe03 	bl	8009520 <strncmp>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	2800      	cmp	r0, #0
 800991e:	d1e1      	bne.n	80098e4 <__gethex+0x1d8>
 8009920:	e7a2      	b.n	8009868 <__gethex+0x15c>
 8009922:	1ea9      	subs	r1, r5, #2
 8009924:	4620      	mov	r0, r4
 8009926:	f7fe fb00 	bl	8007f2a <__any_on>
 800992a:	2800      	cmp	r0, #0
 800992c:	d0c2      	beq.n	80098b4 <__gethex+0x1a8>
 800992e:	f04f 0903 	mov.w	r9, #3
 8009932:	e7c1      	b.n	80098b8 <__gethex+0x1ac>
 8009934:	da09      	bge.n	800994a <__gethex+0x23e>
 8009936:	1b75      	subs	r5, r6, r5
 8009938:	4621      	mov	r1, r4
 800993a:	9801      	ldr	r0, [sp, #4]
 800993c:	462a      	mov	r2, r5
 800993e:	f7fe f8bb 	bl	8007ab8 <__lshift>
 8009942:	1b7f      	subs	r7, r7, r5
 8009944:	4604      	mov	r4, r0
 8009946:	f100 0a14 	add.w	sl, r0, #20
 800994a:	f04f 0900 	mov.w	r9, #0
 800994e:	e7b8      	b.n	80098c2 <__gethex+0x1b6>
 8009950:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009954:	42bd      	cmp	r5, r7
 8009956:	dd6f      	ble.n	8009a38 <__gethex+0x32c>
 8009958:	1bed      	subs	r5, r5, r7
 800995a:	42ae      	cmp	r6, r5
 800995c:	dc34      	bgt.n	80099c8 <__gethex+0x2bc>
 800995e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d022      	beq.n	80099ac <__gethex+0x2a0>
 8009966:	2b03      	cmp	r3, #3
 8009968:	d024      	beq.n	80099b4 <__gethex+0x2a8>
 800996a:	2b01      	cmp	r3, #1
 800996c:	d115      	bne.n	800999a <__gethex+0x28e>
 800996e:	42ae      	cmp	r6, r5
 8009970:	d113      	bne.n	800999a <__gethex+0x28e>
 8009972:	2e01      	cmp	r6, #1
 8009974:	d10b      	bne.n	800998e <__gethex+0x282>
 8009976:	9a02      	ldr	r2, [sp, #8]
 8009978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	2301      	movs	r3, #1
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	f8ca 3000 	str.w	r3, [sl]
 8009986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009988:	2562      	movs	r5, #98	@ 0x62
 800998a:	601c      	str	r4, [r3, #0]
 800998c:	e73a      	b.n	8009804 <__gethex+0xf8>
 800998e:	1e71      	subs	r1, r6, #1
 8009990:	4620      	mov	r0, r4
 8009992:	f7fe faca 	bl	8007f2a <__any_on>
 8009996:	2800      	cmp	r0, #0
 8009998:	d1ed      	bne.n	8009976 <__gethex+0x26a>
 800999a:	9801      	ldr	r0, [sp, #4]
 800999c:	4621      	mov	r1, r4
 800999e:	f7fd fe73 	bl	8007688 <_Bfree>
 80099a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a4:	2300      	movs	r3, #0
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	2550      	movs	r5, #80	@ 0x50
 80099aa:	e72b      	b.n	8009804 <__gethex+0xf8>
 80099ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f3      	bne.n	800999a <__gethex+0x28e>
 80099b2:	e7e0      	b.n	8009976 <__gethex+0x26a>
 80099b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1dd      	bne.n	8009976 <__gethex+0x26a>
 80099ba:	e7ee      	b.n	800999a <__gethex+0x28e>
 80099bc:	0800a0d8 	.word	0x0800a0d8
 80099c0:	08009f6d 	.word	0x08009f6d
 80099c4:	0800a286 	.word	0x0800a286
 80099c8:	1e6f      	subs	r7, r5, #1
 80099ca:	f1b9 0f00 	cmp.w	r9, #0
 80099ce:	d130      	bne.n	8009a32 <__gethex+0x326>
 80099d0:	b127      	cbz	r7, 80099dc <__gethex+0x2d0>
 80099d2:	4639      	mov	r1, r7
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7fe faa8 	bl	8007f2a <__any_on>
 80099da:	4681      	mov	r9, r0
 80099dc:	117a      	asrs	r2, r7, #5
 80099de:	2301      	movs	r3, #1
 80099e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099e4:	f007 071f 	and.w	r7, r7, #31
 80099e8:	40bb      	lsls	r3, r7
 80099ea:	4213      	tst	r3, r2
 80099ec:	4629      	mov	r1, r5
 80099ee:	4620      	mov	r0, r4
 80099f0:	bf18      	it	ne
 80099f2:	f049 0902 	orrne.w	r9, r9, #2
 80099f6:	f7ff fe21 	bl	800963c <rshift>
 80099fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80099fe:	1b76      	subs	r6, r6, r5
 8009a00:	2502      	movs	r5, #2
 8009a02:	f1b9 0f00 	cmp.w	r9, #0
 8009a06:	d047      	beq.n	8009a98 <__gethex+0x38c>
 8009a08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d015      	beq.n	8009a3c <__gethex+0x330>
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d017      	beq.n	8009a44 <__gethex+0x338>
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d109      	bne.n	8009a2c <__gethex+0x320>
 8009a18:	f019 0f02 	tst.w	r9, #2
 8009a1c:	d006      	beq.n	8009a2c <__gethex+0x320>
 8009a1e:	f8da 3000 	ldr.w	r3, [sl]
 8009a22:	ea49 0903 	orr.w	r9, r9, r3
 8009a26:	f019 0f01 	tst.w	r9, #1
 8009a2a:	d10e      	bne.n	8009a4a <__gethex+0x33e>
 8009a2c:	f045 0510 	orr.w	r5, r5, #16
 8009a30:	e032      	b.n	8009a98 <__gethex+0x38c>
 8009a32:	f04f 0901 	mov.w	r9, #1
 8009a36:	e7d1      	b.n	80099dc <__gethex+0x2d0>
 8009a38:	2501      	movs	r5, #1
 8009a3a:	e7e2      	b.n	8009a02 <__gethex+0x2f6>
 8009a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a3e:	f1c3 0301 	rsb	r3, r3, #1
 8009a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <__gethex+0x320>
 8009a4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a4e:	f104 0314 	add.w	r3, r4, #20
 8009a52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a5a:	f04f 0c00 	mov.w	ip, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a68:	d01b      	beq.n	8009aa2 <__gethex+0x396>
 8009a6a:	3201      	adds	r2, #1
 8009a6c:	6002      	str	r2, [r0, #0]
 8009a6e:	2d02      	cmp	r5, #2
 8009a70:	f104 0314 	add.w	r3, r4, #20
 8009a74:	d13c      	bne.n	8009af0 <__gethex+0x3e4>
 8009a76:	f8d8 2000 	ldr.w	r2, [r8]
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	42b2      	cmp	r2, r6
 8009a7e:	d109      	bne.n	8009a94 <__gethex+0x388>
 8009a80:	1171      	asrs	r1, r6, #5
 8009a82:	2201      	movs	r2, #1
 8009a84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a88:	f006 061f 	and.w	r6, r6, #31
 8009a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a90:	421e      	tst	r6, r3
 8009a92:	d13a      	bne.n	8009b0a <__gethex+0x3fe>
 8009a94:	f045 0520 	orr.w	r5, r5, #32
 8009a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9a:	601c      	str	r4, [r3, #0]
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	601f      	str	r7, [r3, #0]
 8009aa0:	e6b0      	b.n	8009804 <__gethex+0xf8>
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009aa8:	d8d9      	bhi.n	8009a5e <__gethex+0x352>
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	459b      	cmp	fp, r3
 8009aae:	db17      	blt.n	8009ae0 <__gethex+0x3d4>
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	9801      	ldr	r0, [sp, #4]
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	f7fd fda7 	bl	8007608 <_Balloc>
 8009aba:	4681      	mov	r9, r0
 8009abc:	b918      	cbnz	r0, 8009ac6 <__gethex+0x3ba>
 8009abe:	4b1a      	ldr	r3, [pc, #104]	@ (8009b28 <__gethex+0x41c>)
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	2184      	movs	r1, #132	@ 0x84
 8009ac4:	e6c5      	b.n	8009852 <__gethex+0x146>
 8009ac6:	6922      	ldr	r2, [r4, #16]
 8009ac8:	3202      	adds	r2, #2
 8009aca:	f104 010c 	add.w	r1, r4, #12
 8009ace:	0092      	lsls	r2, r2, #2
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	f7ff fd69 	bl	80095a8 <memcpy>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	f7fd fdd5 	bl	8007688 <_Bfree>
 8009ade:	464c      	mov	r4, r9
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ae8:	6122      	str	r2, [r4, #16]
 8009aea:	2201      	movs	r2, #1
 8009aec:	615a      	str	r2, [r3, #20]
 8009aee:	e7be      	b.n	8009a6e <__gethex+0x362>
 8009af0:	6922      	ldr	r2, [r4, #16]
 8009af2:	455a      	cmp	r2, fp
 8009af4:	dd0b      	ble.n	8009b0e <__gethex+0x402>
 8009af6:	2101      	movs	r1, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7ff fd9f 	bl	800963c <rshift>
 8009afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b02:	3701      	adds	r7, #1
 8009b04:	42bb      	cmp	r3, r7
 8009b06:	f6ff aee0 	blt.w	80098ca <__gethex+0x1be>
 8009b0a:	2501      	movs	r5, #1
 8009b0c:	e7c2      	b.n	8009a94 <__gethex+0x388>
 8009b0e:	f016 061f 	ands.w	r6, r6, #31
 8009b12:	d0fa      	beq.n	8009b0a <__gethex+0x3fe>
 8009b14:	4453      	add	r3, sl
 8009b16:	f1c6 0620 	rsb	r6, r6, #32
 8009b1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b1e:	f7fd fe65 	bl	80077ec <__hi0bits>
 8009b22:	42b0      	cmp	r0, r6
 8009b24:	dbe7      	blt.n	8009af6 <__gethex+0x3ea>
 8009b26:	e7f0      	b.n	8009b0a <__gethex+0x3fe>
 8009b28:	08009f6d 	.word	0x08009f6d

08009b2c <L_shift>:
 8009b2c:	f1c2 0208 	rsb	r2, r2, #8
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	f1c2 0620 	rsb	r6, r2, #32
 8009b38:	6843      	ldr	r3, [r0, #4]
 8009b3a:	6804      	ldr	r4, [r0, #0]
 8009b3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b40:	432c      	orrs	r4, r5
 8009b42:	40d3      	lsrs	r3, r2
 8009b44:	6004      	str	r4, [r0, #0]
 8009b46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b4a:	4288      	cmp	r0, r1
 8009b4c:	d3f4      	bcc.n	8009b38 <L_shift+0xc>
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}

08009b50 <__match>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	6803      	ldr	r3, [r0, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5a:	b914      	cbnz	r4, 8009b62 <__match+0x12>
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	bd30      	pop	{r4, r5, pc}
 8009b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b6a:	2d19      	cmp	r5, #25
 8009b6c:	bf98      	it	ls
 8009b6e:	3220      	addls	r2, #32
 8009b70:	42a2      	cmp	r2, r4
 8009b72:	d0f0      	beq.n	8009b56 <__match+0x6>
 8009b74:	2000      	movs	r0, #0
 8009b76:	e7f3      	b.n	8009b60 <__match+0x10>

08009b78 <__hexnan>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	680b      	ldr	r3, [r1, #0]
 8009b7e:	6801      	ldr	r1, [r0, #0]
 8009b80:	115e      	asrs	r6, r3, #5
 8009b82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b86:	f013 031f 	ands.w	r3, r3, #31
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	bf18      	it	ne
 8009b8e:	3604      	addne	r6, #4
 8009b90:	2500      	movs	r5, #0
 8009b92:	1f37      	subs	r7, r6, #4
 8009b94:	4682      	mov	sl, r0
 8009b96:	4690      	mov	r8, r2
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b9e:	46b9      	mov	r9, r7
 8009ba0:	463c      	mov	r4, r7
 8009ba2:	9502      	str	r5, [sp, #8]
 8009ba4:	46ab      	mov	fp, r5
 8009ba6:	784a      	ldrb	r2, [r1, #1]
 8009ba8:	1c4b      	adds	r3, r1, #1
 8009baa:	9303      	str	r3, [sp, #12]
 8009bac:	b342      	cbz	r2, 8009c00 <__hexnan+0x88>
 8009bae:	4610      	mov	r0, r2
 8009bb0:	9105      	str	r1, [sp, #20]
 8009bb2:	9204      	str	r2, [sp, #16]
 8009bb4:	f7ff fd94 	bl	80096e0 <__hexdig_fun>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d151      	bne.n	8009c60 <__hexnan+0xe8>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	9905      	ldr	r1, [sp, #20]
 8009bc0:	2a20      	cmp	r2, #32
 8009bc2:	d818      	bhi.n	8009bf6 <__hexnan+0x7e>
 8009bc4:	9b02      	ldr	r3, [sp, #8]
 8009bc6:	459b      	cmp	fp, r3
 8009bc8:	dd13      	ble.n	8009bf2 <__hexnan+0x7a>
 8009bca:	454c      	cmp	r4, r9
 8009bcc:	d206      	bcs.n	8009bdc <__hexnan+0x64>
 8009bce:	2d07      	cmp	r5, #7
 8009bd0:	dc04      	bgt.n	8009bdc <__hexnan+0x64>
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff ffa8 	bl	8009b2c <L_shift>
 8009bdc:	4544      	cmp	r4, r8
 8009bde:	d952      	bls.n	8009c86 <__hexnan+0x10e>
 8009be0:	2300      	movs	r3, #0
 8009be2:	f1a4 0904 	sub.w	r9, r4, #4
 8009be6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bea:	f8cd b008 	str.w	fp, [sp, #8]
 8009bee:	464c      	mov	r4, r9
 8009bf0:	461d      	mov	r5, r3
 8009bf2:	9903      	ldr	r1, [sp, #12]
 8009bf4:	e7d7      	b.n	8009ba6 <__hexnan+0x2e>
 8009bf6:	2a29      	cmp	r2, #41	@ 0x29
 8009bf8:	d157      	bne.n	8009caa <__hexnan+0x132>
 8009bfa:	3102      	adds	r1, #2
 8009bfc:	f8ca 1000 	str.w	r1, [sl]
 8009c00:	f1bb 0f00 	cmp.w	fp, #0
 8009c04:	d051      	beq.n	8009caa <__hexnan+0x132>
 8009c06:	454c      	cmp	r4, r9
 8009c08:	d206      	bcs.n	8009c18 <__hexnan+0xa0>
 8009c0a:	2d07      	cmp	r5, #7
 8009c0c:	dc04      	bgt.n	8009c18 <__hexnan+0xa0>
 8009c0e:	462a      	mov	r2, r5
 8009c10:	4649      	mov	r1, r9
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff ff8a 	bl	8009b2c <L_shift>
 8009c18:	4544      	cmp	r4, r8
 8009c1a:	d936      	bls.n	8009c8a <__hexnan+0x112>
 8009c1c:	f1a8 0204 	sub.w	r2, r8, #4
 8009c20:	4623      	mov	r3, r4
 8009c22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c26:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c2a:	429f      	cmp	r7, r3
 8009c2c:	d2f9      	bcs.n	8009c22 <__hexnan+0xaa>
 8009c2e:	1b3b      	subs	r3, r7, r4
 8009c30:	f023 0303 	bic.w	r3, r3, #3
 8009c34:	3304      	adds	r3, #4
 8009c36:	3401      	adds	r4, #1
 8009c38:	3e03      	subs	r6, #3
 8009c3a:	42b4      	cmp	r4, r6
 8009c3c:	bf88      	it	hi
 8009c3e:	2304      	movhi	r3, #4
 8009c40:	4443      	add	r3, r8
 8009c42:	2200      	movs	r2, #0
 8009c44:	f843 2b04 	str.w	r2, [r3], #4
 8009c48:	429f      	cmp	r7, r3
 8009c4a:	d2fb      	bcs.n	8009c44 <__hexnan+0xcc>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	b91b      	cbnz	r3, 8009c58 <__hexnan+0xe0>
 8009c50:	4547      	cmp	r7, r8
 8009c52:	d128      	bne.n	8009ca6 <__hexnan+0x12e>
 8009c54:	2301      	movs	r3, #1
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	2005      	movs	r0, #5
 8009c5a:	b007      	add	sp, #28
 8009c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c60:	3501      	adds	r5, #1
 8009c62:	2d08      	cmp	r5, #8
 8009c64:	f10b 0b01 	add.w	fp, fp, #1
 8009c68:	dd06      	ble.n	8009c78 <__hexnan+0x100>
 8009c6a:	4544      	cmp	r4, r8
 8009c6c:	d9c1      	bls.n	8009bf2 <__hexnan+0x7a>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c74:	2501      	movs	r5, #1
 8009c76:	3c04      	subs	r4, #4
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	f000 000f 	and.w	r0, r0, #15
 8009c7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c82:	6020      	str	r0, [r4, #0]
 8009c84:	e7b5      	b.n	8009bf2 <__hexnan+0x7a>
 8009c86:	2508      	movs	r5, #8
 8009c88:	e7b3      	b.n	8009bf2 <__hexnan+0x7a>
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0dd      	beq.n	8009c4c <__hexnan+0xd4>
 8009c90:	f1c3 0320 	rsb	r3, r3, #32
 8009c94:	f04f 32ff 	mov.w	r2, #4294967295
 8009c98:	40da      	lsrs	r2, r3
 8009c9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ca4:	e7d2      	b.n	8009c4c <__hexnan+0xd4>
 8009ca6:	3f04      	subs	r7, #4
 8009ca8:	e7d0      	b.n	8009c4c <__hexnan+0xd4>
 8009caa:	2004      	movs	r0, #4
 8009cac:	e7d5      	b.n	8009c5a <__hexnan+0xe2>

08009cae <__ascii_mbtowc>:
 8009cae:	b082      	sub	sp, #8
 8009cb0:	b901      	cbnz	r1, 8009cb4 <__ascii_mbtowc+0x6>
 8009cb2:	a901      	add	r1, sp, #4
 8009cb4:	b142      	cbz	r2, 8009cc8 <__ascii_mbtowc+0x1a>
 8009cb6:	b14b      	cbz	r3, 8009ccc <__ascii_mbtowc+0x1e>
 8009cb8:	7813      	ldrb	r3, [r2, #0]
 8009cba:	600b      	str	r3, [r1, #0]
 8009cbc:	7812      	ldrb	r2, [r2, #0]
 8009cbe:	1e10      	subs	r0, r2, #0
 8009cc0:	bf18      	it	ne
 8009cc2:	2001      	movne	r0, #1
 8009cc4:	b002      	add	sp, #8
 8009cc6:	4770      	bx	lr
 8009cc8:	4610      	mov	r0, r2
 8009cca:	e7fb      	b.n	8009cc4 <__ascii_mbtowc+0x16>
 8009ccc:	f06f 0001 	mvn.w	r0, #1
 8009cd0:	e7f8      	b.n	8009cc4 <__ascii_mbtowc+0x16>

08009cd2 <_realloc_r>:
 8009cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	4615      	mov	r5, r2
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b921      	cbnz	r1, 8009ce8 <_realloc_r+0x16>
 8009cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	f7fd bc04 	b.w	80074f0 <_malloc_r>
 8009ce8:	b92a      	cbnz	r2, 8009cf6 <_realloc_r+0x24>
 8009cea:	f7fd fb8d 	bl	8007408 <_free_r>
 8009cee:	2400      	movs	r4, #0
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf6:	f000 f840 	bl	8009d7a <_malloc_usable_size_r>
 8009cfa:	4285      	cmp	r5, r0
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	d802      	bhi.n	8009d06 <_realloc_r+0x34>
 8009d00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d04:	d8f4      	bhi.n	8009cf0 <_realloc_r+0x1e>
 8009d06:	4629      	mov	r1, r5
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f7fd fbf1 	bl	80074f0 <_malloc_r>
 8009d0e:	4607      	mov	r7, r0
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d0ec      	beq.n	8009cee <_realloc_r+0x1c>
 8009d14:	42b5      	cmp	r5, r6
 8009d16:	462a      	mov	r2, r5
 8009d18:	4621      	mov	r1, r4
 8009d1a:	bf28      	it	cs
 8009d1c:	4632      	movcs	r2, r6
 8009d1e:	f7ff fc43 	bl	80095a8 <memcpy>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4640      	mov	r0, r8
 8009d26:	f7fd fb6f 	bl	8007408 <_free_r>
 8009d2a:	463c      	mov	r4, r7
 8009d2c:	e7e0      	b.n	8009cf0 <_realloc_r+0x1e>

08009d2e <__ascii_wctomb>:
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	b141      	cbz	r1, 8009d46 <__ascii_wctomb+0x18>
 8009d34:	2aff      	cmp	r2, #255	@ 0xff
 8009d36:	d904      	bls.n	8009d42 <__ascii_wctomb+0x14>
 8009d38:	228a      	movs	r2, #138	@ 0x8a
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	4770      	bx	lr
 8009d42:	700a      	strb	r2, [r1, #0]
 8009d44:	2001      	movs	r0, #1
 8009d46:	4770      	bx	lr

08009d48 <fiprintf>:
 8009d48:	b40e      	push	{r1, r2, r3}
 8009d4a:	b503      	push	{r0, r1, lr}
 8009d4c:	4601      	mov	r1, r0
 8009d4e:	ab03      	add	r3, sp, #12
 8009d50:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <fiprintf+0x20>)
 8009d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d56:	6800      	ldr	r0, [r0, #0]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f7ff f90d 	bl	8008f78 <_vfiprintf_r>
 8009d5e:	b002      	add	sp, #8
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	b003      	add	sp, #12
 8009d66:	4770      	bx	lr
 8009d68:	20000020 	.word	0x20000020

08009d6c <abort>:
 8009d6c:	b508      	push	{r3, lr}
 8009d6e:	2006      	movs	r0, #6
 8009d70:	f000 f834 	bl	8009ddc <raise>
 8009d74:	2001      	movs	r0, #1
 8009d76:	f7f7 ffcd 	bl	8001d14 <_exit>

08009d7a <_malloc_usable_size_r>:
 8009d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d7e:	1f18      	subs	r0, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfbc      	itt	lt
 8009d84:	580b      	ldrlt	r3, [r1, r0]
 8009d86:	18c0      	addlt	r0, r0, r3
 8009d88:	4770      	bx	lr

08009d8a <_raise_r>:
 8009d8a:	291f      	cmp	r1, #31
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4605      	mov	r5, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	d904      	bls.n	8009d9e <_raise_r+0x14>
 8009d94:	2316      	movs	r3, #22
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009da0:	b112      	cbz	r2, 8009da8 <_raise_r+0x1e>
 8009da2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da6:	b94b      	cbnz	r3, 8009dbc <_raise_r+0x32>
 8009da8:	4628      	mov	r0, r5
 8009daa:	f000 f831 	bl	8009e10 <_getpid_r>
 8009dae:	4622      	mov	r2, r4
 8009db0:	4601      	mov	r1, r0
 8009db2:	4628      	mov	r0, r5
 8009db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db8:	f000 b818 	b.w	8009dec <_kill_r>
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d00a      	beq.n	8009dd6 <_raise_r+0x4c>
 8009dc0:	1c59      	adds	r1, r3, #1
 8009dc2:	d103      	bne.n	8009dcc <_raise_r+0x42>
 8009dc4:	2316      	movs	r3, #22
 8009dc6:	6003      	str	r3, [r0, #0]
 8009dc8:	2001      	movs	r0, #1
 8009dca:	e7e7      	b.n	8009d9c <_raise_r+0x12>
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4798      	blx	r3
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e7e0      	b.n	8009d9c <_raise_r+0x12>
	...

08009ddc <raise>:
 8009ddc:	4b02      	ldr	r3, [pc, #8]	@ (8009de8 <raise+0xc>)
 8009dde:	4601      	mov	r1, r0
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f7ff bfd2 	b.w	8009d8a <_raise_r>
 8009de6:	bf00      	nop
 8009de8:	20000020 	.word	0x20000020

08009dec <_kill_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	@ (8009e0c <_kill_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 ff7b 	bl	8001cf4 <_kill>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_kill_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_kill_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	200004e0 	.word	0x200004e0

08009e10 <_getpid_r>:
 8009e10:	f7f7 bf68 	b.w	8001ce4 <_getpid>

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
