
gimbalver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be98  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800c078  0800c078  0000d078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c540  0800c540  0000d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c548  0800c548  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c54c  0800c54c  0000d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800c550  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200001e0  0800c730  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800c730  0000e6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001799f  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea0  00000000  00000000  00025baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00028a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107e  00000000  00000000  00029f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002037f  00000000  00000000  0002afce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019531  00000000  00000000  0004b34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8e7  00000000  00000000  0006487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00131165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb8  00000000  00000000  001311ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001381a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c060 	.word	0x0800c060

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800c060 	.word	0x0800c060

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <I2cInitialize>:
//
static bool initialized = false;



static void I2cInitialize(){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	if(!initialized){
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <I2cInitialize+0x24>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <I2cInitialize+0x18>
		initialized = true;
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <I2cInitialize+0x24>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001fd 	.word	0x200001fd

0800105c <I2cWriteByte>:

static void I2cWriteByte(uint8_t add, uint8_t reg, uint8_t data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b29a      	uxth	r2, r3
 800107a:	2364      	movs	r3, #100	@ 0x64
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2301      	movs	r3, #1
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	1d7b      	adds	r3, r7, #5
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <I2cWriteByte+0x3c>)
 800108a:	f001 fe43 	bl	8002d14 <HAL_I2C_Mem_Write>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000200 	.word	0x20000200

0800109c <I2cReadByte>:

static uint8_t I2cReadByte(uint8_t add, uint8_t reg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b299      	uxth	r1, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030f 	add.w	r3, r7, #15
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <I2cReadByte+0x3c>)
 80010ca:	f001 ff37 	bl	8002f3c <HAL_I2C_Mem_Read>
	return data;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000200 	.word	0x20000200

080010dc <I2cReadBytes>:

static void I2cReadBytes(uint8_t add, uint8_t reg, uint8_t *data, uint8_t count)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	460b      	mov	r3, r1
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, data, count, 100);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b299      	uxth	r1, r3
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	b29b      	uxth	r3, r3
 8001102:	2064      	movs	r0, #100	@ 0x64
 8001104:	9002      	str	r0, [sp, #8]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <I2cReadBytes+0x40>)
 8001110:	f001 ff14 	bl	8002f3c <HAL_I2C_Mem_Read>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000200 	.word	0x20000200

08001120 <DelayMs>:

static void DelayMs(uint32_t t){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <BNO055_Initialize_Fusion>:

//------------------- Write Yourself To Here-------------

bool BNO055_Initialize_Fusion(){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	I2cInitialize();
 800113a:	f7ff ff7b 	bl	8001034 <I2cInitialize>

	BNO055_ADRESS = BNO055_ADRESS_0;
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001140:	2228      	movs	r2, #40	@ 0x28
 8001142:	701a      	strb	r2, [r3, #0]

	uint8_t id = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	71fb      	strb	r3, [r7, #7]
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffa4 	bl	800109c <I2cReadByte>
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4619      	mov	r1, r3
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 800115e:	f008 f81f 	bl	80091a0 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff97 	bl	800109c <I2cReadByte>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	482a      	ldr	r0, [pc, #168]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001178:	f008 f812 	bl	80091a0 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff8a 	bl	800109c <I2cReadByte>
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4619      	mov	r1, r3
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001192:	f008 f805 	bl	80091a0 <iprintf>
//			printf("%x\r\n",id);
//			printf("false");
//			return false;
//		}
//	}
	if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7d 	bl	800109c <I2cReadByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80011a6:	d01d      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
		BNO055_ADRESS = BNO055_ADRESS_1;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011aa:	2229      	movs	r2, #41	@ 0x29
 80011ac:	701a      	strb	r2, [r3, #0]
		if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff71 	bl	800109c <I2cReadByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80011be:	d011      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
			id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff68 	bl	800109c <I2cReadByte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
			printf("%x\r\n",id);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <BNO055_Initialize_Fusion+0xf0>)
 80011d6:	f007 ffe3 	bl	80091a0 <iprintf>
			printf("false");
 80011da:	4813      	ldr	r0, [pc, #76]	@ (8001228 <BNO055_Initialize_Fusion+0xf4>)
 80011dc:	f007 ffe0 	bl	80091a0 <iprintf>
			return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e016      	b.n	8001212 <BNO055_Initialize_Fusion+0xde>
		}
	}


	I2cWriteByte(BNO055_ADRESS,BNO055_PWR_MODE,0);
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	213e      	movs	r1, #62	@ 0x3e
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff35 	bl	800105c <I2cWriteByte>
	BNO055_SetUnit();
 80011f2:	f000 f81d 	bl	8001230 <BNO055_SetUnit>
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_NDOF);
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	220c      	movs	r2, #12
 80011fc:	213d      	movs	r1, #61	@ 0x3d
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff2c 	bl	800105c <I2cWriteByte>
	DelayMs(20);
 8001204:	2014      	movs	r0, #20
 8001206:	f7ff ff8b 	bl	8001120 <DelayMs>
	printf("Initialize");
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <BNO055_Initialize_Fusion+0xf8>)
 800120c:	f007 ffc8 	bl	80091a0 <iprintf>
	return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001fc 	.word	0x200001fc
 8001220:	0800c078 	.word	0x0800c078
 8001224:	0800c080 	.word	0x0800c080
 8001228:	0800c088 	.word	0x0800c088
 800122c:	0800c090 	.word	0x0800c090

08001230 <BNO055_SetUnit>:
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_AMG);
	DelayMs(20);
	return true;
}

void BNO055_SetUnit(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t unit =  BNO055_UNIT_SEL_ACC | BNO055_UNIT_SEL_GYR | BNO055_UNIT_SEL_ANGL | BNO055_UNIT_SEL_Tmp | BNO055_UNIT_SEL_Fus;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
	I2cWriteByte(BNO055_ADRESS,BNO055_UNIT_SEL,unit);
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <BNO055_SetUnit+0x20>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	213b      	movs	r1, #59	@ 0x3b
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff0a 	bl	800105c <I2cWriteByte>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001fc 	.word	0x200001fc

08001254 <BNO055_ReadGyr>:
	*x = (float)_x / 16;
	*y = (float)_y / 16;
	*z = (float)_z / 16;
}

void BNO055_ReadGyr(float* x,float* y,float* z){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	uint8_t data[6]={};
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	2300      	movs	r3, #0
 8001266:	833b      	strh	r3, [r7, #24]

	I2cReadBytes(BNO055_ADRESS,BNO055_GYR_DATA_X_LSB,data,6);
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <BNO055_ReadGyr+0xa4>)
 800126a:	7818      	ldrb	r0, [r3, #0]
 800126c:	f107 0214 	add.w	r2, r7, #20
 8001270:	2306      	movs	r3, #6
 8001272:	2114      	movs	r1, #20
 8001274:	f7ff ff32 	bl	80010dc <I2cReadBytes>
	//printf("%d,%d\r\n",data[0],data[1]);

	int16_t _x,_y,_z;
	_x = data[1] << 8 | data[0];
 8001278:	7d7b      	ldrb	r3, [r7, #21]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	83fb      	strh	r3, [r7, #30]
	_y = data[3] << 8 | data[2];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	83bb      	strh	r3, [r7, #28]
	_z = data[5] << 8 | data[4];
 8001294:	7e7b      	ldrb	r3, [r7, #25]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	837b      	strh	r3, [r7, #26]

#if BNO055_UNIT_SEL_GYR == BNO055_UNIT_SEL_GYR_Dps
	*x = (float)_x / 16;
 80012a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)_y / 16;
 80012bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)_z / 16;
 80012d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a00 	vstr	s15, [r3]
	*x = (float)_x / 900;
	*y = (float)_y / 900;
	*z = (float)_z / 900;
#endif
	//printf("%f , %f , %f\r\n",x,y,z);
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001fc 	.word	0x200001fc

080012fc <A4988_Initialize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void A4988_Initialize(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MDEN_GPIO_Port,MDEN_Pin,GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f001 fc4f 	bl	8002bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS1_GPIO_Port,MDMS1_Pin,GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f001 fc48 	bl	8002bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS2_GPIO_Port,MDMS2_Pin,GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <A4988_Initialize+0x38>)
 8001322:	f001 fc43 	bl	8002bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS3_GPIO_Port,MDMS3_Pin,GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <A4988_Initialize+0x38>)
 800132c:	f001 fc3e 	bl	8002bac <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	48000400 	.word	0x48000400

08001338 <A4988_STEP>:

void A4988_STEP(uint16_t interval){
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
	if(stopState == 0){
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <A4988_STEP+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d05e      	beq.n	800140a <A4988_STEP+0xd2>
		return ;
	}
	if(stepState == 0){
 800134c:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <A4988_STEP+0xec>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d120      	bne.n	8001396 <A4988_STEP+0x5e>
		if(stepInterval != interval - 1){
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <A4988_STEP+0xf0>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	3b01      	subs	r3, #1
 800135e:	429a      	cmp	r2, r3
 8001360:	d00e      	beq.n	8001380 <A4988_STEP+0x48>
			stepInterval = interval - 1;
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <A4988_STEP+0xf0>)
 800136a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim7, stepInterval);
 800136c:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <A4988_STEP+0xf0>)
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <A4988_STEP+0xf4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001376:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <A4988_STEP+0xf0>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <A4988_STEP+0xf4>)
 800137e:	60da      	str	r2, [r3, #12]
		}
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f001 fc0f 	bl	8002bac <HAL_GPIO_WritePin>
		stepState = 1;
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <A4988_STEP+0xec>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e03a      	b.n	800140c <A4988_STEP+0xd4>
	}else{
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800139c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a0:	f001 fc04 	bl	8002bac <HAL_GPIO_WritePin>
		stepState = 0;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <A4988_STEP+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
		mangle += onepulse_motorangle*mdir/ms;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <A4988_STEP+0xf8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8f2 	bl	8000598 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <A4988_STEP+0xfc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8d9 	bl	8000574 <__aeabi_i2d>
 80013c2:	a315      	add	r3, pc, #84	@ (adr r3, 8001418 <A4988_STEP+0xe0>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f93e 	bl	8000648 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <A4988_STEP+0x100>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8cb 	bl	8000574 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4640      	mov	r0, r8
 80013e4:	4649      	mov	r1, r9
 80013e6:	f7ff fa59 	bl	800089c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe ff73 	bl	80002dc <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fc1b 	bl	8000c38 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <A4988_STEP+0xf8>)
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e000      	b.n	800140c <A4988_STEP+0xd4>
		return ;
 800140a:	bf00      	nop
		//printf("onepulse");
	}

}
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	cccccccd 	.word	0xcccccccd
 800141c:	3feccccc 	.word	0x3feccccc
 8001420:	200004f0 	.word	0x200004f0
 8001424:	200004dc 	.word	0x200004dc
 8001428:	200004e0 	.word	0x200004e0
 800142c:	200002ec 	.word	0x200002ec
 8001430:	200004e4 	.word	0x200004e4
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
 800143c:	00000000 	.word	0x00000000

08001440 <HAL_TIM_PeriodElapsedCallback>:
    HAL_GPIO_WritePin(MDMS2_GPIO_Port, MDMS2_Pin, (MS & 0b010) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MDMS3_GPIO_Port, MDMS3_Pin, (MS & 0b100) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a9a      	ldr	r2, [pc, #616]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d160      	bne.n	8001514 <HAL_TIM_PeriodElapsedCallback+0xd4>
        BNO055_ReadGyr(&Gyr_x, &Gyr_y, &Gyr_z);
 8001452:	4a9a      	ldr	r2, [pc, #616]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001454:	499a      	ldr	r1, [pc, #616]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001456:	489b      	ldr	r0, [pc, #620]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001458:	f7ff fefc 	bl	8001254 <BNO055_ReadGyr>
        //printf("%f , %f , %f\r\n",Gyr_x,Gyr_y,Gyr_z); // @suppress("Float formatting support")
        if(Gyr_z == now_z){
 800145c:	4b97      	ldr	r3, [pc, #604]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800145e:	ed93 7a00 	vldr	s14, [r3]
 8001462:	4b99      	ldr	r3, [pc, #612]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb4 7a67 	vcmp.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d105      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x3e>
        	bnoemergency++;
 8001472:	4b96      	ldr	r3, [pc, #600]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a94      	ldr	r2, [pc, #592]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x44>
        }else{
        	bnoemergency = 0;
 800147e:	4b93      	ldr	r3, [pc, #588]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
        }
        if(bnoemergency == 10){
 8001484:	4b91      	ldr	r3, [pc, #580]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	d10b      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x64>
        	HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
 800148c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001490:	2204      	movs	r2, #4
 8001492:	498f      	ldr	r1, [pc, #572]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001494:	488f      	ldr	r0, [pc, #572]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001496:	f003 ff1b 	bl	80052d0 <HAL_UART_Transmit>
        	HAL_NVIC_SystemReset();
 800149a:	f001 f928 	bl	80026ee <HAL_NVIC_SystemReset>
        	bnoemergency = 0;
 800149e:	4b8b      	ldr	r3, [pc, #556]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
        }
        pre_z = now_z;
 80014a4:	4b88      	ldr	r3, [pc, #544]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a8b      	ldr	r2, [pc, #556]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80014aa:	6013      	str	r3, [r2, #0]
        now_z = Gyr_z;
 80014ac:	4b83      	ldr	r3, [pc, #524]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a85      	ldr	r2, [pc, #532]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80014b2:	6013      	str	r3, [r2, #0]
        tangle += (now_z + Gyr_z) * 0.01 * 0.5;
 80014b4:	4b89      	ldr	r3, [pc, #548]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f86d 	bl	8000598 <__aeabi_f2d>
 80014be:	4680      	mov	r8, r0
 80014c0:	4689      	mov	r9, r1
 80014c2:	4b81      	ldr	r3, [pc, #516]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f85f 	bl	8000598 <__aeabi_f2d>
 80014da:	a373      	add	r3, pc, #460	@ (adr r3, 80016a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8b2 	bl	8000648 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b7b      	ldr	r3, [pc, #492]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014f2:	f7ff f8a9 	bl	8000648 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4640      	mov	r0, r8
 80014fc:	4649      	mov	r1, r9
 80014fe:	f7fe feed 	bl	80002dc <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	4a72      	ldr	r2, [pc, #456]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001512:	6013      	str	r3, [r2, #0]
        //printf("%f\r\n",tangle);
	}
    if(htim == &htim6){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a73      	ldr	r2, [pc, #460]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	f040 80b7 	bne.w	800168c <HAL_TIM_PeriodElapsedCallback+0x24c>
        float diffangle = tangle - mangle;
 800151e:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	edc7 7a03 	vstr	s15, [r7, #12]
        if((diffangle < (onepulse_motorangle/ms)*5) && (diffangle > -(onepulse_motorangle/ms)*5) ){
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff f830 	bl	8000598 <__aeabi_f2d>
 8001538:	4680      	mov	r8, r0
 800153a:	4689      	mov	r9, r1
 800153c:	4b6b      	ldr	r3, [pc, #428]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f817 	bl	8000574 <__aeabi_i2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	a159      	add	r1, pc, #356	@ (adr r1, 80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800154c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001550:	f7ff f9a4 	bl	800089c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001562:	f7ff f871 	bl	8000648 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4640      	mov	r0, r8
 800156c:	4649      	mov	r1, r9
 800156e:	f7ff fadd 	bl	8000b2c <__aeabi_dcmplt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d028      	beq.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff f80d 	bl	8000598 <__aeabi_f2d>
 800157e:	4680      	mov	r8, r0
 8001580:	4689      	mov	r9, r1
 8001582:	4b5a      	ldr	r3, [pc, #360]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff4 	bl	8000574 <__aeabi_i2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	a147      	add	r1, pc, #284	@ (adr r1, 80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001596:	f7ff f981 	bl	800089c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4614      	mov	r4, r2
 80015a0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b51      	ldr	r3, [pc, #324]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7ff f84b 	bl	8000648 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4640      	mov	r0, r8
 80015b8:	4649      	mov	r1, r9
 80015ba:	f7ff fad5 	bl	8000b68 <__aeabi_dcmpgt>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x18a>
        	diffangle = 0;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
        }
        int pulse = diffangle / (onepulse_motorangle / ms);
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffcb 	bl	8000574 <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	a133      	add	r1, pc, #204	@ (adr r1, 80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e8:	f7ff f958 	bl	800089c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff f952 	bl	800089c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fad2 	bl	8000ba8 <__aeabi_d2iz>
 8001604:	4603      	mov	r3, r0
 8001606:	60bb      	str	r3, [r7, #8]
        //printf("%f\r\n",diffangle);

        if (pulse < 0) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	da0d      	bge.n	800162a <HAL_TIM_PeriodElapsedCallback+0x1ea>
            mdir = -1;
 800160e:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2180      	movs	r1, #128	@ 0x80
 800161a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161e:	f001 fac5 	bl	8002bac <HAL_GPIO_WritePin>
            pulse = -pulse;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	425b      	negs	r3, r3
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	e00b      	b.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x202>
        } else if (pulse > 0) {
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd08      	ble.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x202>
            mdir = 1;
 8001630:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f001 fab5 	bl	8002bac <HAL_GPIO_WritePin>
        }

        if (pulse > 0) {
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	dd0a      	ble.n	800165e <HAL_TIM_PeriodElapsedCallback+0x21e>
            mInterval = 100 / pulse;
 8001648:	2264      	movs	r2, #100	@ 0x64
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001654:	801a      	strh	r2, [r3, #0]
            stopState = 1;
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e005      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0x22a>
        } else {
            mInterval = 100; // ゼロ除算防止
 800165e:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001660:	2264      	movs	r2, #100	@ 0x64
 8001662:	801a      	strh	r2, [r3, #0]
            stopState = 0;
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
        }
        if(mInterval < 34){
 800166a:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2b21      	cmp	r3, #33	@ 0x21
 8001670:	d802      	bhi.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x238>
        	mInterval = 34;
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001674:	2222      	movs	r2, #34	@ 0x22
 8001676:	801a      	strh	r2, [r3, #0]
        }


        if (tim7init == 0) {
 8001678:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_TIM_PeriodElapsedCallback+0x24c>
            HAL_TIM_Base_Start_IT(&htim7);
 8001680:	4820      	ldr	r0, [pc, #128]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001682:	f003 f8f9 	bl	8004878 <HAL_TIM_Base_Start_IT>
            tim7init = 1;
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
        }
        //printf("%f,%f\r\n",tangle,mangle);
    }

    if(htim == &htim7){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d104      	bne.n	800169e <HAL_TIM_PeriodElapsedCallback+0x25e>
    	//printf("tim7");
        A4988_STEP(mInterval);
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe4d 	bl	8001338 <A4988_STEP>
    }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3f847ae1 	.word	0x3f847ae1
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	3feccccc 	.word	0x3feccccc
 80016b8:	20000254 	.word	0x20000254
 80016bc:	200004cc 	.word	0x200004cc
 80016c0:	200004c8 	.word	0x200004c8
 80016c4:	200004c4 	.word	0x200004c4
 80016c8:	200004d4 	.word	0x200004d4
 80016cc:	200004d8 	.word	0x200004d8
 80016d0:	0800c0cc 	.word	0x0800c0cc
 80016d4:	20000338 	.word	0x20000338
 80016d8:	200004d0 	.word	0x200004d0
 80016dc:	200004e8 	.word	0x200004e8
 80016e0:	3fe00000 	.word	0x3fe00000
 80016e4:	200002a0 	.word	0x200002a0
 80016e8:	200004e4 	.word	0x200004e4
 80016ec:	20000004 	.word	0x20000004
 80016f0:	40140000 	.word	0x40140000
 80016f4:	20000000 	.word	0x20000000
 80016f8:	200004e2 	.word	0x200004e2
 80016fc:	200004f0 	.word	0x200004f0
 8001700:	200004ec 	.word	0x200004ec
 8001704:	200002ec 	.word	0x200002ec

08001708 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	//printf("receive\r\n");
	//printf("%d\r\n",buffer[0]);

	if(buffer[0] == 13){
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b0d      	cmp	r3, #13
 8001716:	d14a      	bne.n	80017ae <HAL_UART_RxCpltCallback+0xa6>
		//printf("ok\r\n");
		if(data[0] == 97){
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b61      	cmp	r3, #97	@ 0x61
 800171e:	d131      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x7c>
			for(int i=0;i<datapos-1;i++){
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e00b      	b.n	800173e <HAL_UART_RxCpltCallback+0x36>
				num_char[i] = data[i+1];
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	4a2c      	ldr	r2, [pc, #176]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 800172c:	5cd1      	ldrb	r1, [r2, r3]
 800172e:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	460a      	mov	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<datapos-1;i++){
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbed      	blt.n	8001726 <HAL_UART_RxCpltCallback+0x1e>
			}
			num_char[datapos-1] = '\0';
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 8001752:	2100      	movs	r1, #0
 8001754:	54d1      	strb	r1, [r2, r3]
			cangle = strtof(num_char, NULL);
 8001756:	2100      	movs	r1, #0
 8001758:	4821      	ldr	r0, [pc, #132]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 800175a:	f006 fd8f 	bl	800827c <strtof>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_UART_RxCpltCallback+0xe0>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
			mangle = cangle;
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_UART_RxCpltCallback+0xe0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <HAL_UART_RxCpltCallback+0xe4>)
 800176e:	6013      	str	r3, [r2, #0]
			printf("%f\r\n",cangle);
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_UART_RxCpltCallback+0xe0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	481c      	ldr	r0, [pc, #112]	@ (80017f0 <HAL_UART_RxCpltCallback+0xe8>)
 8001780:	f007 fd0e 	bl	80091a0 <iprintf>
		}
		for(int i =0;i < datapos;i++){
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e007      	b.n	800179a <HAL_UART_RxCpltCallback+0x92>
			//printf("%d\r\n",data[i]);
			//printf("i:%d,data:%d\r\n",i,data[i]);

			data[i] = 0;
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4413      	add	r3, r2
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
		for(int i =0;i < datapos;i++){
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf2      	blt.n	800178a <HAL_UART_RxCpltCallback+0x82>
		}
		datapos = -1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e00a      	b.n	80017c4 <HAL_UART_RxCpltCallback+0xbc>
	}else{
		data[datapos] = buffer[0];
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 80017b4:	7811      	ldrb	r1, [r2, #0]
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 80017b8:	54d1      	strb	r1, [r2, r3]
		//printf("%d\r\n",data[datapos]);
		datapos++;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 80017c2:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	4904      	ldr	r1, [pc, #16]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 80017c8:	480a      	ldr	r0, [pc, #40]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 80017ca:	f003 fe0f 	bl	80053ec <HAL_UART_Receive_IT>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200004f4 	.word	0x200004f4
 80017dc:	20000514 	.word	0x20000514
 80017e0:	20000538 	.word	0x20000538
 80017e4:	20000534 	.word	0x20000534
 80017e8:	20000558 	.word	0x20000558
 80017ec:	200004e4 	.word	0x200004e4
 80017f0:	0800c09c 	.word	0x0800c09c
 80017f4:	20000338 	.word	0x20000338

080017f8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	printf("uart_error\r\n");
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <HAL_UART_ErrorCallback+0x2c>)
 8001802:	f007 fd35 	bl	8009270 <puts>
	HAL_UART_Abort(huart);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f003 fe3c 	bl	8005484 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, buffer, size);
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_UART_ErrorCallback+0x30>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4905      	ldr	r1, [pc, #20]	@ (800182c <HAL_UART_ErrorCallback+0x34>)
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HAL_UART_ErrorCallback+0x38>)
 8001818:	f003 fde8 	bl	80053ec <HAL_UART_Receive_IT>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0800c0a4 	.word	0x0800c0a4
 8001828:	20000008 	.word	0x20000008
 800182c:	200004f4 	.word	0x200004f4
 8001830:	20000338 	.word	0x20000338

08001834 <_write>:


int _write(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	b29a      	uxth	r2, r3
 8001844:	230a      	movs	r3, #10
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <_write+0x24>)
 800184a:	f003 fd41 	bl	80052d0 <HAL_UART_Transmit>
  return len;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200003cc 	.word	0x200003cc

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <main+0xb4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f007 fd09 	bl	8009280 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f000 fd92 	bl	8002396 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 f863 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f000 fa47 	bl	8001d08 <MX_GPIO_Init>
  MX_I2C1_Init();
 800187a:	f000 f8ab 	bl	80019d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800187e:	f000 f9f7 	bl	8001c70 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001882:	f000 f96b 	bl	8001b5c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001886:	f000 f933 	bl	8001af0 <MX_TIM6_Init>
  MX_TIM4_Init();
 800188a:	f000 f8e3 	bl	8001a54 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800188e:	f000 f9a3 	bl	8001bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(BNO055_Initialize_Fusion() == false){
 8001892:	f7ff fc4f 	bl	8001134 <BNO055_Initialize_Fusion>
 8001896:	4603      	mov	r3, r0
 8001898:	f083 0301 	eor.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <main+0x4e>
    	  printf("false");
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <main+0xb8>)
 80018a4:	f007 fc7c 	bl	80091a0 <iprintf>
 80018a8:	e002      	b.n	80018b0 <main+0x54>
      }else{
    	  printf("Ok");
 80018aa:	481b      	ldr	r0, [pc, #108]	@ (8001918 <main+0xbc>)
 80018ac:	f007 fc78 	bl	80091a0 <iprintf>
      }
  HAL_TIM_Base_Start_IT(&htim6);
 80018b0:	481a      	ldr	r0, [pc, #104]	@ (800191c <main+0xc0>)
 80018b2:	f002 ffe1 	bl	8004878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80018b6:	481a      	ldr	r0, [pc, #104]	@ (8001920 <main+0xc4>)
 80018b8:	f002 ffde 	bl	8004878 <HAL_TIM_Base_Start_IT>
  A4988_Initialize();
 80018bc:	f7ff fd1e 	bl	80012fc <A4988_Initialize>
  HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
 80018c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c4:	2204      	movs	r2, #4
 80018c6:	4917      	ldr	r1, [pc, #92]	@ (8001924 <main+0xc8>)
 80018c8:	4817      	ldr	r0, [pc, #92]	@ (8001928 <main+0xcc>)
 80018ca:	f003 fd01 	bl	80052d0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	4916      	ldr	r1, [pc, #88]	@ (800192c <main+0xd0>)
 80018d2:	4815      	ldr	r0, [pc, #84]	@ (8001928 <main+0xcc>)
 80018d4:	f003 fd8a 	bl	80053ec <HAL_UART_Receive_IT>
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
//	  //HAL_GPIO_TogglePin(MDDIR_GPIO_Port, MDDIR_Pin);
//	  HAL_Delay(200);
//	  printf("HEllo\r\n");
	  sprintf(angle_buffer, "a%f\r\n", tangle);
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <main+0xd4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe5b 	bl	8000598 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4913      	ldr	r1, [pc, #76]	@ (8001934 <main+0xd8>)
 80018e8:	4813      	ldr	r0, [pc, #76]	@ (8001938 <main+0xdc>)
 80018ea:	f007 fd85 	bl	80093f8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)angle_buffer, strlen(angle_buffer), 0xFFFF);
 80018ee:	4812      	ldr	r0, [pc, #72]	@ (8001938 <main+0xdc>)
 80018f0:	f7fe fce6 	bl	80002c0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018fc:	490e      	ldr	r1, [pc, #56]	@ (8001938 <main+0xdc>)
 80018fe:	480a      	ldr	r0, [pc, #40]	@ (8001928 <main+0xcc>)
 8001900:	f003 fce6 	bl	80052d0 <HAL_UART_Transmit>
//		  printf("reset\r\n");
//		  HAL_NVIC_SystemReset();
//	  }else{
//		  state++;
//	  }
	  HAL_Delay(100);
 8001904:	2064      	movs	r0, #100	@ 0x64
 8001906:	f000 fdb7 	bl	8002478 <HAL_Delay>
	  sprintf(angle_buffer, "a%f\r\n", tangle);
 800190a:	bf00      	nop
 800190c:	e7e4      	b.n	80018d8 <main+0x7c>
 800190e:	bf00      	nop
 8001910:	20000190 	.word	0x20000190
 8001914:	0800c0b0 	.word	0x0800c0b0
 8001918:	0800c0b8 	.word	0x0800c0b8
 800191c:	200002a0 	.word	0x200002a0
 8001920:	20000254 	.word	0x20000254
 8001924:	0800c0cc 	.word	0x0800c0cc
 8001928:	20000338 	.word	0x20000338
 800192c:	200004f4 	.word	0x200004f4
 8001930:	200004e8 	.word	0x200004e8
 8001934:	0800c0bc 	.word	0x0800c0bc
 8001938:	20000460 	.word	0x20000460

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	@ 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2238      	movs	r2, #56	@ 0x38
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f007 fe4c 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001962:	f001 ff5f 	bl	8003824 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001970:	2340      	movs	r3, #64	@ 0x40
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001974:	2302      	movs	r3, #2
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001978:	2302      	movs	r3, #2
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800197c:	2301      	movs	r3, #1
 800197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001980:	230a      	movs	r3, #10
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fff9 	bl	800398c <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80019a0:	f000 fa08 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2303      	movs	r3, #3
 80019aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 faf7 	bl	8003fb0 <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019c8:	f000 f9f4 	bl	8001db4 <Error_Handler>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3750      	adds	r7, #80	@ 0x50
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <MX_I2C1_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <MX_I2C1_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a10:	f001 f8e4 	bl	8002bdc <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a1a:	f000 f9cb 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a22:	f001 fe67 	bl	80036f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 f9c2 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a34:	f001 fea9 	bl	800378a <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 f9b9 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000200 	.word	0x20000200
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	10d19ce4 	.word	0x10d19ce4

08001a54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <MX_TIM4_Init+0x98>)
 8001a76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a7a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a88:	2263      	movs	r2, #99	@ 0x63
 8001a8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a98:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001a9a:	f002 fe95 	bl	80047c8 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001aa4:	f000 f986 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001ab6:	f003 f899 	bl	8004bec <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 f978 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_TIM4_Init+0x94>)
 8001ad2:	f003 fae5 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001adc:	f000 f96a 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000254 	.word	0x20000254
 8001aec:	40000800 	.word	0x40000800

08001af0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <MX_TIM6_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b08:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b16:	2209      	movs	r2, #9
 8001b18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b22:	f002 fe51 	bl	80047c8 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b2c:	f000 f942 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_TIM6_Init+0x64>)
 8001b3e:	f003 faaf 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f000 f934 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002a0 	.word	0x200002a0
 8001b58:	40001000 	.word	0x40001000

08001b5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */


  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <MX_TIM7_Init+0x74>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b74:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b8e:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001b90:	f002 fe1a 	bl	80047c8 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001b9a:	f000 f90b 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001bac:	f003 fa78 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001bb6:	f000 f8fd 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  htim7.Init.Period = stepInterval;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_TIM7_Init+0x78>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <MX_TIM7_Init+0x70>)
 8001bc2:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200002ec 	.word	0x200002ec
 8001bd0:	40001400 	.word	0x40001400
 8001bd4:	200004e0 	.word	0x200004e0

08001bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bde:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <MX_USART1_UART_Init+0x94>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001be4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c20:	4811      	ldr	r0, [pc, #68]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c22:	f003 fb05 	bl	8005230 <HAL_UART_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c2c:	f000 f8c2 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c34:	f005 fc4f 	bl	80074d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3e:	f000 f8b9 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c46:	f005 fc84 	bl	8007552 <HAL_UARTEx_SetRxFifoThreshold>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c50:	f000 f8b0 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_USART1_UART_Init+0x90>)
 8001c56:	f005 fc05 	bl	8007464 <HAL_UARTEx_DisableFifoMode>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f000 f8a8 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000338 	.word	0x20000338
 8001c6c:	40013800 	.word	0x40013800

08001c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <MX_USART2_UART_Init+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb8:	4811      	ldr	r0, [pc, #68]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cba:	f003 fab9 	bl	8005230 <HAL_UART_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001cc4:	f000 f876 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001ccc:	f005 fc03 	bl	80074d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cd6:	f000 f86d 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cde:	f005 fc38 	bl	8007552 <HAL_UARTEx_SetRxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f000 f864 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cee:	f005 fbb9 	bl	8007464 <HAL_UARTEx_DisableFifoMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001cf8:	f000 f85c 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200003cc 	.word	0x200003cc
 8001d04:	40004400 	.word	0x40004400

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	4a22      	ldr	r2, [pc, #136]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_GPIO_Init+0xa4>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 51cc 	mov.w	r1, #6528	@ 0x1980
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f000 ff28 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDMS3_Pin|MDMS2_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2141      	movs	r1, #65	@ 0x41
 8001d60:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <MX_GPIO_Init+0xa8>)
 8001d62:	f000 ff23 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDDIR_Pin MDMS1_Pin MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin;
 8001d66:	f44f 53cc 	mov.w	r3, #6528	@ 0x1980
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d82:	f000 fd91 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDMS3_Pin MDMS2_Pin */
  GPIO_InitStruct.Pin = MDMS3_Pin|MDMS2_Pin;
 8001d86:	2341      	movs	r3, #65	@ 0x41
 8001d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_GPIO_Init+0xa8>)
 8001d9e:	f000 fd83 	bl	80028a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\r\n");
 8001dbc:	4801      	ldr	r0, [pc, #4]	@ (8001dc4 <Error_Handler+0x10>)
 8001dbe:	f007 fa57 	bl	8009270 <puts>
 8001dc2:	e7fb      	b.n	8001dbc <Error_Handler+0x8>
 8001dc4:	0800c0c4 	.word	0x0800c0c4

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_MspInit+0x44>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e0c <HAL_MspInit+0x44>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dda:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_MspInit+0x44>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_MspInit+0x44>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <HAL_MspInit+0x44>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_MspInit+0x44>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dfe:	f001 fdb5 	bl	800396c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b09c      	sub	sp, #112	@ 0x70
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 0318 	add.w	r3, r7, #24
 8001e2c:	2244      	movs	r2, #68	@ 0x44
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f007 fbd9 	bl	80095e8 <memset>
  if(hi2c->Instance==I2C1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <HAL_I2C_MspInit+0xe0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d153      	bne.n	8001ee8 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e40:	2340      	movs	r3, #64	@ 0x40
 8001e42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 facb 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e58:	f7ff ffac 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e92:	2312      	movs	r3, #18
 8001e94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eac:	f000 fcfc 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <HAL_I2C_MspInit+0xe8>)
 8001ecc:	f000 fcec 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_I2C_MspInit+0xe4>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ee8:	bf00      	nop
 8001eea:	3770      	adds	r7, #112	@ 0x70
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400

08001efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d114      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f0e:	4b27      	ldr	r3, [pc, #156]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f12:	4a26      	ldr	r2, [pc, #152]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201e      	movs	r0, #30
 8001f2c:	f000 fbb7 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f30:	201e      	movs	r0, #30
 8001f32:	f000 fbce 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f36:	e032      	b.n	8001f9e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <HAL_TIM_Base_MspInit+0xb4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d114      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f42:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4e:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	2036      	movs	r0, #54	@ 0x36
 8001f60:	f000 fb9d 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f64:	2036      	movs	r0, #54	@ 0x36
 8001f66:	f000 fbb4 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8001f6a:	e018      	b.n	8001f9e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <HAL_TIM_Base_MspInit+0xb8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d113      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_TIM_Base_MspInit+0xb0>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	2037      	movs	r0, #55	@ 0x37
 8001f94:	f000 fb83 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f98:	2037      	movs	r0, #55	@ 0x37
 8001f9a:	f000 fb9a 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40001000 	.word	0x40001000
 8001fb4:	40001400 	.word	0x40001400

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b09c      	sub	sp, #112	@ 0x70
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2244      	movs	r2, #68	@ 0x44
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fb05 	bl	80095e8 <memset>
  if(huart->Instance==USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a46      	ldr	r2, [pc, #280]	@ (80020fc <HAL_UART_MspInit+0x144>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d140      	bne.n	800206a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 f9f7 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff fed8 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	4b3e      	ldr	r3, [pc, #248]	@ (8002100 <HAL_UART_MspInit+0x148>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002008:	4a3d      	ldr	r2, [pc, #244]	@ (8002100 <HAL_UART_MspInit+0x148>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002010:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_UART_MspInit+0x148>)
 8002012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b38      	ldr	r3, [pc, #224]	@ (8002100 <HAL_UART_MspInit+0x148>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002020:	4a37      	ldr	r2, [pc, #220]	@ (8002100 <HAL_UART_MspInit+0x148>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002028:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <HAL_UART_MspInit+0x148>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002034:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002046:	2307      	movs	r3, #7
 8002048:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f000 fc28 	bl	80028a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2025      	movs	r0, #37	@ 0x25
 800205e:	f000 fb1e 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002062:	2025      	movs	r0, #37	@ 0x25
 8002064:	f000 fb35 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002068:	e043      	b.n	80020f2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <HAL_UART_MspInit+0x14c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d13e      	bne.n	80020f2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	4618      	mov	r0, r3
 8002082:	f002 f9b1 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800208c:	f7ff fe92 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_UART_MspInit+0x148>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	4a1a      	ldr	r2, [pc, #104]	@ (8002100 <HAL_UART_MspInit+0x148>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209a:	6593      	str	r3, [r2, #88]	@ 0x58
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_UART_MspInit+0x148>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_UART_MspInit+0x148>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <HAL_UART_MspInit+0x148>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_UART_MspInit+0x148>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c0:	230c      	movs	r3, #12
 80020c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020de:	f000 fbe3 	bl	80028a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2026      	movs	r0, #38	@ 0x26
 80020e8:	f000 fad9 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ec:	2026      	movs	r0, #38	@ 0x26
 80020ee:	f000 faf0 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3770      	adds	r7, #112	@ 0x70
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40013800 	.word	0x40013800
 8002100:	40021000 	.word	0x40021000
 8002104:	40004400 	.word	0x40004400

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <NMI_Handler+0x4>

08002110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <MemManage_Handler+0x4>

08002120 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <UsageFault_Handler+0x4>

08002130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215e:	f000 f96d 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <TIM4_IRQHandler+0x10>)
 800216e:	f002 fbed 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000254 	.word	0x20000254

0800217c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002180:	4802      	ldr	r0, [pc, #8]	@ (800218c <USART1_IRQHandler+0x10>)
 8002182:	f003 fa8d 	bl	80056a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000338 	.word	0x20000338

08002190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <USART2_IRQHandler+0x10>)
 8002196:	f003 fa83 	bl	80056a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003cc 	.word	0x200003cc

080021a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a8:	4802      	ldr	r0, [pc, #8]	@ (80021b4 <TIM6_DAC_IRQHandler+0x10>)
 80021aa:	f002 fbcf 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200002a0 	.word	0x200002a0

080021b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <TIM7_IRQHandler+0x10>)
 80021be:	f002 fbc5 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002ec 	.word	0x200002ec

080021cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_kill>:

int _kill(int pid, int sig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021e6:	f007 fa63 	bl	80096b0 <__errno>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2216      	movs	r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
  return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_exit>:

void _exit (int status)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffe7 	bl	80021dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800220e:	bf00      	nop
 8002210:	e7fd      	b.n	800220e <_exit+0x12>

08002212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e00a      	b.n	800223a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002224:	f3af 8000 	nop.w
 8002228:	4601      	mov	r1, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	60ba      	str	r2, [r7, #8]
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbf0      	blt.n	8002224 <_read+0x12>
  }

  return len;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_close>:
  }
  return len;
}

int _close(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002274:	605a      	str	r2, [r3, #4]
  return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_isatty>:

int _isatty(int file)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f007 f9e4 	bl	80096b0 <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20008000 	.word	0x20008000
 8002314:	00000400 	.word	0x00000400
 8002318:	2000055c 	.word	0x2000055c
 800231c:	200006b0 	.word	0x200006b0

08002320 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002344:	480d      	ldr	r0, [pc, #52]	@ (800237c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002346:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002348:	f7ff ffea 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <LoopForever+0xe>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	@ (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002372:	f007 f9a3 	bl	80096bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002376:	f7ff fa71 	bl	800185c <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   r0, =_estack
 800237c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002388:	0800c550 	.word	0x0800c550
  ldr r2, =_sbss
 800238c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002390:	200006b0 	.word	0x200006b0

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>

08002396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f971 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fd06 	bl	8001dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]

}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_InitTick+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d022      	beq.n	8002422 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_InitTick+0x6c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_InitTick+0x68>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f980 	bl	80026f6 <HAL_SYSTICK_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d809      	bhi.n	8002416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	f000 f948 	bl	800269e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <HAL_InitTick+0x70>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e007      	b.n	8002426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e004      	b.n	8002426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000014 	.word	0x20000014
 8002434:	2000000c 	.word	0x2000000c
 8002438:	20000010 	.word	0x20000010

0800243c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_IncTick+0x1c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_IncTick+0x20>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4a03      	ldr	r2, [pc, #12]	@ (8002458 <HAL_IncTick+0x1c>)
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000560 	.word	0x20000560
 800245c:	20000014 	.word	0x20000014

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000560 	.word	0x20000560

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d004      	beq.n	800249c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_Delay+0x40>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249c:	bf00      	nop
 800249e:	f7ff ffdf 	bl	8002460 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d8f7      	bhi.n	800249e <HAL_Delay+0x26>
  {
  }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000014 	.word	0x20000014

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	@ (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	@ (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	@ (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	@ 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	@ 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800261c:	f3bf 8f4f 	dsb	sy
}
 8002620:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <__NVIC_SystemReset+0x24>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800262a:	4904      	ldr	r1, [pc, #16]	@ (800263c <__NVIC_SystemReset+0x24>)
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_SystemReset+0x28>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002632:	f3bf 8f4f 	dsb	sy
}
 8002636:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <__NVIC_SystemReset+0x20>
 800263c:	e000ed00 	.word	0xe000ed00
 8002640:	05fa0004 	.word	0x05fa0004

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ff78 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff13 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff2a 	bl	8002504 <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff7a 	bl	80025b0 <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff49 	bl	800255c <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff1d 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80026f2:	f7ff ff91 	bl	8002618 <__NVIC_SystemReset>

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa0 	bl	8002644 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d005      	beq.n	8002732 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2204      	movs	r2, #4
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e037      	b.n	80027a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 020e 	bic.w	r2, r2, #14
 8002740:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002750:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800277e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00c      	beq.n	80027a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002796:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d00d      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2204      	movs	r2, #4
 80027dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e047      	b.n	8002884 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 020e 	bic.w	r2, r2, #14
 8002802:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002840:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002858:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002862:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
    }
  }
  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028b6:	e15a      	b.n	8002b6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 814c 	beq.w	8002b68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d005      	beq.n	80028e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d130      	bne.n	800294a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800291e:	2201      	movs	r2, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 0201 	and.w	r2, r3, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d017      	beq.n	8002986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d123      	bne.n	80029da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a20:	4a5a      	ldr	r2, [pc, #360]	@ (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a28:	4b58      	ldr	r3, [pc, #352]	@ (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a34:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_GPIO_Init+0x1f8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4c      	ldr	r2, [pc, #304]	@ (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d019      	beq.n	8002a9c <HAL_GPIO_Init+0x1f4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_GPIO_Init+0x1f0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a4a      	ldr	r2, [pc, #296]	@ (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a48      	ldr	r2, [pc, #288]	@ (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a88:	2305      	movs	r3, #5
 8002a8a:	e00a      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a8c:	2306      	movs	r3, #6
 8002a8e:	e008      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a94:	2303      	movs	r3, #3
 8002a96:	e004      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e002      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab2:	4937      	ldr	r1, [pc, #220]	@ (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac0:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ae4:	4a30      	ldr	r2, [pc, #192]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b62:	4a11      	ldr	r2, [pc, #68]	@ (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f ae9d 	bne.w	80028b8 <HAL_GPIO_Init+0x10>
  }
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010000 	.word	0x40010000
 8002b94:	48000400 	.word	0x48000400
 8002b98:	48000800 	.word	0x48000800
 8002b9c:	48000c00 	.word	0x48000c00
 8002ba0:	48001000 	.word	0x48001000
 8002ba4:	48001400 	.word	0x48001400
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e08d      	b.n	8002d0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff f904 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d108      	bne.n	8002c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	e007      	b.n	8002c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f040 80f9 	bne.w	8002f2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x34>
 8002d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ed      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Mem_Write+0x4e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0e6      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6a:	f7ff fb79 	bl	8002460 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fac3 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d1      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2221      	movs	r2, #33	@ 0x21
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2240      	movs	r2, #64	@ 0x40
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db4:	88f8      	ldrh	r0, [r7, #6]
 8002db6:	893a      	ldrh	r2, [r7, #8]
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9d3 	bl	8003170 <I2C_RequestMemoryWrite>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0a9      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2bff      	cmp	r3, #255	@ 0xff
 8002de4:	d90e      	bls.n	8002e04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	@ 0xff
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fc47 	bl	8003690 <I2C_TransferConfig>
 8002e02:	e00f      	b.n	8002e24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fc36 	bl	8003690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fac6 	bl	80033ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e07b      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d034      	beq.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d130      	bne.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa3f 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e04d      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2bff      	cmp	r3, #255	@ 0xff
 8002e9c:	d90e      	bls.n	8002ebc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	22ff      	movs	r2, #255	@ 0xff
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fbeb 	bl	8003690 <I2C_TransferConfig>
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	8979      	ldrh	r1, [r7, #10]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fbda 	bl	8003690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d19e      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 faac 	bl	8003448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e01a      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_I2C_Mem_Write+0x224>)
 8002f0e:	400b      	ands	r3, r1
 8002f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	fe00e800 	.word	0xfe00e800

08002f3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	817b      	strh	r3, [r7, #10]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	813b      	strh	r3, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 80fd 	bne.w	800315e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x34>
 8002f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0f1      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x4e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e0ea      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f92:	f7ff fa65 	bl	8002460 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2319      	movs	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f9af 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0d5      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2222      	movs	r2, #34	@ 0x22
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fdc:	88f8      	ldrh	r0, [r7, #6]
 8002fde:	893a      	ldrh	r2, [r7, #8]
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4603      	mov	r3, r0
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f913 	bl	8003218 <I2C_RequestMemoryRead>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0ad      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2bff      	cmp	r3, #255	@ 0xff
 800300c:	d90e      	bls.n	800302c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	22ff      	movs	r2, #255	@ 0xff
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	4b52      	ldr	r3, [pc, #328]	@ (8003168 <HAL_I2C_Mem_Read+0x22c>)
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fb33 	bl	8003690 <I2C_TransferConfig>
 800302a:	e00f      	b.n	800304c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_I2C_Mem_Read+0x22c>)
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb22 	bl	8003690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	2200      	movs	r2, #0
 8003054:	2104      	movs	r1, #4
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f956 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07c      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d034      	beq.n	800310c <HAL_I2C_Mem_Read+0x1d0>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d130      	bne.n	800310c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	@ 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f927 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e04d      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2bff      	cmp	r3, #255	@ 0xff
 80030cc:	d90e      	bls.n	80030ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22ff      	movs	r2, #255	@ 0xff
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	2300      	movs	r3, #0
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fad3 	bl	8003690 <I2C_TransferConfig>
 80030ea:	e00f      	b.n	800310c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fac2 	bl	8003690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d19a      	bne.n	800304c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f994 	bl	8003448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01a      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_I2C_Mem_Read+0x230>)
 800313e:	400b      	ands	r3, r1
 8003140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	80002400 	.word	0x80002400
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <I2C_RequestMemoryWrite+0xa4>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa79 	bl	8003690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	69b9      	ldr	r1, [r7, #24]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f909 	bl	80033ba <I2C_WaitOnTXISFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e02c      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80031c2:	e015      	b.n	80031f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031c4:	893b      	ldrh	r3, [r7, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	69b9      	ldr	r1, [r7, #24]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8ef 	bl	80033ba <I2C_WaitOnTXISFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e012      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e6:	893b      	ldrh	r3, [r7, #8]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f884 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	80002000 	.word	0x80002000

08003218 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	460b      	mov	r3, r1
 800322c:	813b      	strh	r3, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <I2C_RequestMemoryRead+0xa4>)
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fa26 	bl	8003690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f8b6 	bl	80033ba <I2C_WaitOnTXISFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e02c      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	629a      	str	r2, [r3, #40]	@ 0x28
 8003268:	e015      	b.n	8003296 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b29b      	uxth	r3, r3
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f89c 	bl	80033ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e012      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2200      	movs	r2, #0
 800329e:	2140      	movs	r1, #64	@ 0x40
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f831 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	80002000 	.word	0x80002000

080032c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	619a      	str	r2, [r3, #24]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e03b      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8d6 	bl	80034d0 <I2C_IsErrorOccurred>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e041      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d02d      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7ff f893 	bl	8002460 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d122      	bne.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	429a      	cmp	r2, r3
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	429a      	cmp	r2, r3
 8003368:	d113      	bne.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00f      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d0b4      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c6:	e033      	b.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f87f 	bl	80034d0 <I2C_IsErrorOccurred>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e031      	b.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d025      	beq.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e4:	f7ff f83c 	bl	8002460 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d302      	bcc.n	80033fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11a      	bne.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d013      	beq.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d1c4      	bne.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003454:	e02f      	b.n	80034b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f838 	bl	80034d0 <I2C_IsErrorOccurred>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e02d      	b.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fff9 	bl	8002460 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11a      	bne.n	80034b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b20      	cmp	r3, #32
 800348c:	d013      	beq.n	80034b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d1c8      	bne.n	8003456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d068      	beq.n	80035ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2210      	movs	r2, #16
 8003502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003504:	e049      	b.n	800359a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d045      	beq.n	800359a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe ffa7 	bl	8002460 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_IsErrorOccurred+0x54>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d13a      	bne.n	800359a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003546:	d121      	bne.n	800358c <I2C_IsErrorOccurred+0xbc>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800354e:	d01d      	beq.n	800358c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b20      	cmp	r3, #32
 8003554:	d01a      	beq.n	800358c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003566:	f7fe ff7b 	bl	8002460 <HAL_GetTick>
 800356a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356c:	e00e      	b.n	800358c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800356e:	f7fe ff77 	bl	8002460 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b19      	cmp	r3, #25
 800357a:	d907      	bls.n	800358c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f043 0320 	orr.w	r3, r3, #32
 8003582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800358a:	e006      	b.n	800359a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b20      	cmp	r3, #32
 8003598:	d1e9      	bne.n	800356e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d003      	beq.n	80035b0 <I2C_IsErrorOccurred+0xe0>
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0aa      	beq.n	8003506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2220      	movs	r2, #32
 80035be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800363c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fe3b 	bl	80032c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <I2C_IsErrorOccurred+0x1bc>)
 8003656:	400b      	ands	r3, r1
 8003658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800367e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	@ 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	fe00e800 	.word	0xfe00e800

08003690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	4613      	mov	r3, r2
 80036a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036a8:	7a7b      	ldrb	r3, [r7, #9]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	0d5b      	lsrs	r3, r3, #21
 80036ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036ce:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <I2C_TransferConfig+0x60>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	43db      	mvns	r3, r3
 80036d4:	ea02 0103 	and.w	r1, r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	03ff63ff 	.word	0x03ff63ff

080036f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d138      	bne.n	800377c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003714:	2302      	movs	r3, #2
 8003716:	e032      	b.n	800377e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d139      	bne.n	8003814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e033      	b.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	@ 0x24
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d141      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003832:	4b4b      	ldr	r3, [pc, #300]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383e:	d131      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003840:	4b47      	ldr	r3, [pc, #284]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003846:	4a46      	ldr	r2, [pc, #280]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003850:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003858:	4a41      	ldr	r2, [pc, #260]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800385e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003860:	4b40      	ldr	r3, [pc, #256]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2232      	movs	r2, #50	@ 0x32
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a3f      	ldr	r2, [pc, #252]	@ (8003968 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003876:	e002      	b.n	800387e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3b01      	subs	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387e:	4b38      	ldr	r3, [pc, #224]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d102      	bne.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f2      	bne.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003892:	4b33      	ldr	r3, [pc, #204]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389e:	d158      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e057      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038b4:	e04d      	b.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038bc:	d141      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038be:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d131      	bne.n	8003930 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b24      	ldr	r3, [pc, #144]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	4a23      	ldr	r2, [pc, #140]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038dc:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2232      	movs	r2, #50	@ 0x32
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003902:	e002      	b.n	800390a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3b01      	subs	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d102      	bne.n	800391e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f2      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d112      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e011      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003936:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003940:	e007      	b.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003942:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800394a:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003950:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40007000 	.word	0x40007000
 8003964:	2000000c 	.word	0x2000000c
 8003968:	431bde83 	.word	0x431bde83

0800396c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a04      	ldr	r2, [pc, #16]	@ (8003988 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800397a:	6093      	str	r3, [r2, #8]
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40007000 	.word	0x40007000

0800398c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e2fe      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d075      	beq.n	8003a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b97      	ldr	r3, [pc, #604]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b4:	4b94      	ldr	r3, [pc, #592]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_OscConfig+0x3e>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_OscConfig+0x44>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05b      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d157      	bne.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e2d9      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_OscConfig+0x74>
 80039f2:	4b85      	ldr	r3, [pc, #532]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a84      	ldr	r2, [pc, #528]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01d      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x98>
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b7c      	ldr	r3, [pc, #496]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a24:	4b78      	ldr	r3, [pc, #480]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a77      	ldr	r2, [pc, #476]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b75      	ldr	r3, [pc, #468]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a74      	ldr	r2, [pc, #464]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fd0c 	bl	8002460 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fd08 	bl	8002460 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e29e      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0xc0>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fcf8 	bl	8002460 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe fcf4 	bl	8002460 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e28a      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a86:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0xe8>
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d075      	beq.n	8003b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa2:	4b59      	ldr	r3, [pc, #356]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aac:	4b56      	ldr	r3, [pc, #344]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x136>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x13c>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d11f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x154>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e25d      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b49      	ldr	r3, [pc, #292]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	4946      	ldr	r1, [pc, #280]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003af4:	4b45      	ldr	r3, [pc, #276]	@ (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fc65 	bl	80023c8 <HAL_InitTick>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d043      	beq.n	8003b8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e249      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d023      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b3d      	ldr	r3, [pc, #244]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3c      	ldr	r2, [pc, #240]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fca0 	bl	8002460 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe fc9c 	bl	8002460 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e232      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b36:	4b34      	ldr	r3, [pc, #208]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b31      	ldr	r3, [pc, #196]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	492d      	ldr	r1, [pc, #180]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
 8003b56:	e01a      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b58:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe fc7c 	bl	8002460 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fc78 	bl	8002460 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e20e      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7e:	4b22      	ldr	r3, [pc, #136]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x1e0>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d041      	beq.n	8003c1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba8:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fc55 	bl	8002460 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe fc51 	bl	8002460 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1e7      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ef      	beq.n	8003bba <HAL_RCC_OscConfig+0x22e>
 8003bda:	e020      	b.n	8003c1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be2:	4a09      	ldr	r2, [pc, #36]	@ (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fe fc38 	bl	8002460 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf2:	e00d      	b.n	8003c10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fc34 	bl	8002460 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d906      	bls.n	8003c10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1ca      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c10:	4b8c      	ldr	r3, [pc, #560]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ea      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80a6 	beq.w	8003d78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c30:	4b84      	ldr	r3, [pc, #528]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2b4>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x2b6>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c52:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c62:	4b79      	ldr	r3, [pc, #484]	@ (8003e48 <HAL_RCC_OscConfig+0x4bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c6e:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCC_OscConfig+0x4bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a75      	ldr	r2, [pc, #468]	@ (8003e48 <HAL_RCC_OscConfig+0x4bc>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fbf1 	bl	8002460 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fe fbed 	bl	8002460 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e183      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	4b6c      	ldr	r3, [pc, #432]	@ (8003e48 <HAL_RCC_OscConfig+0x4bc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_RCC_OscConfig+0x32e>
 8003ca8:	4b66      	ldr	r3, [pc, #408]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cae:	4a65      	ldr	r2, [pc, #404]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cb8:	e024      	b.n	8003d04 <HAL_RCC_OscConfig+0x378>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d110      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x358>
 8003cc2:	4b60      	ldr	r3, [pc, #384]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCC_OscConfig+0x378>
 8003ce4:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	4a56      	ldr	r2, [pc, #344]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf4:	4b53      	ldr	r3, [pc, #332]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	4a52      	ldr	r2, [pc, #328]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d016      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fba8 	bl	8002460 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fba4 	bl	8002460 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e138      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2a:	4b46      	ldr	r3, [pc, #280]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ed      	beq.n	8003d14 <HAL_RCC_OscConfig+0x388>
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fb91 	bl	8002460 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fb8d 	bl	8002460 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e121      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d58:	4b3a      	ldr	r3, [pc, #232]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ed      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4a34      	ldr	r2, [pc, #208]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d03c      	beq.n	8003dfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d92:	4a2c      	ldr	r2, [pc, #176]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fb60 	bl	8002460 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da4:	f7fe fb5c 	bl	8002460 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0f2      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db6:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ef      	beq.n	8003da4 <HAL_RCC_OscConfig+0x418>
 8003dc4:	e01b      	b.n	8003dfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fb43 	bl	8002460 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dde:	f7fe fb3f 	bl	8002460 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0d5      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ef      	bne.n	8003dde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80c9 	beq.w	8003f9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	f000 8083 	beq.w	8003f1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d15e      	bne.n	8003edc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	@ (8003e44 <HAL_RCC_OscConfig+0x4b8>)
 8003e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fb19 	bl	8002460 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e30:	e00c      	b.n	8003e4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fe fb15 	bl	8002460 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d905      	bls.n	8003e4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0ab      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	4b55      	ldr	r3, [pc, #340]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ec      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e58:	4b52      	ldr	r3, [pc, #328]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4b52      	ldr	r3, [pc, #328]	@ (8003fa8 <HAL_RCC_OscConfig+0x61c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6a11      	ldr	r1, [r2, #32]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e72:	0212      	lsls	r2, r2, #8
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0552      	lsls	r2, r2, #21
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e92:	06d2      	lsls	r2, r2, #27
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4943      	ldr	r1, [pc, #268]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b41      	ldr	r3, [pc, #260]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a40      	ldr	r2, [pc, #256]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fad4 	bl	8002460 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe fad0 	bl	8002460 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e066      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b35      	ldr	r3, [pc, #212]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x530>
 8003eda:	e05e      	b.n	8003f9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003edc:	4b31      	ldr	r3, [pc, #196]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe faba 	bl	8002460 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fe fab6 	bl	8002460 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04c      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f02:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f0e:	4b25      	ldr	r3, [pc, #148]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	4924      	ldr	r1, [pc, #144]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_RCC_OscConfig+0x620>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	60cb      	str	r3, [r1, #12]
 8003f1a:	e03e      	b.n	8003f9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e039      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f28:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <HAL_RCC_OscConfig+0x618>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0203 	and.w	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d12c      	bne.n	8003f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	3b01      	subs	r3, #1
 8003f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d123      	bne.n	8003f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d11b      	bne.n	8003f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d113      	bne.n	8003f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	019f800c 	.word	0x019f800c
 8003fac:	feeefffc 	.word	0xfeeefffc

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e11e      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b91      	ldr	r3, [pc, #580]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b8e      	ldr	r3, [pc, #568]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	498c      	ldr	r1, [pc, #560]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e106      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d073      	beq.n	80040ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d129      	bne.n	8004060 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400c:	4b81      	ldr	r3, [pc, #516]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0f4      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800401c:	f000 f99e 	bl	800435c <RCC_GetSysClockFreqFromPLLSource>
 8004020:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4a7c      	ldr	r2, [pc, #496]	@ (8004218 <HAL_RCC_ClockConfig+0x268>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d93f      	bls.n	80040aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800402a:	4b7a      	ldr	r3, [pc, #488]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d033      	beq.n	80040aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12f      	bne.n	80040aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800404a:	4b72      	ldr	r3, [pc, #456]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004052:	4a70      	ldr	r2, [pc, #448]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 8004054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004058:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e024      	b.n	80040aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d107      	bne.n	8004078 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004068:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0c6      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	4b66      	ldr	r3, [pc, #408]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0be      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004088:	f000 f8ce 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800408c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4a61      	ldr	r2, [pc, #388]	@ (8004218 <HAL_RCC_ClockConfig+0x268>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d909      	bls.n	80040aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004096:	4b5f      	ldr	r3, [pc, #380]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800409e:	4a5d      	ldr	r2, [pc, #372]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80040a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4957      	ldr	r1, [pc, #348]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040bc:	f7fe f9d0 	bl	8002460 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7fe f9cc 	bl	8002460 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e095      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b4e      	ldr	r3, [pc, #312]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d023      	beq.n	8004140 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800410a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800410e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800411c:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004124:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 8004126:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800412a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b39      	ldr	r3, [pc, #228]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4936      	ldr	r1, [pc, #216]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
 800413e:	e008      	b.n	8004152 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b80      	cmp	r3, #128	@ 0x80
 8004144:	d105      	bne.n	8004152 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004146:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 800414c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004150:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004152:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d21d      	bcs.n	800419c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004160:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 020f 	bic.w	r2, r3, #15
 8004168:	4929      	ldr	r1, [pc, #164]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004170:	f7fe f976 	bl	8002460 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fe f972 	bl	8002460 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e03b      	b.n	8004206 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_RCC_ClockConfig+0x260>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d1ed      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4917      	ldr	r1, [pc, #92]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c6:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	490f      	ldr	r1, [pc, #60]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041da:	f000 f825 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <HAL_RCC_ClockConfig+0x264>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	490c      	ldr	r1, [pc, #48]	@ (800421c <HAL_RCC_ClockConfig+0x26c>)
 80041ec:	5ccb      	ldrb	r3, [r1, r3]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004220 <HAL_RCC_ClockConfig+0x270>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <HAL_RCC_ClockConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f8e2 	bl	80023c8 <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40022000 	.word	0x40022000
 8004214:	40021000 	.word	0x40021000
 8004218:	04c4b400 	.word	0x04c4b400
 800421c:	0800c0d0 	.word	0x0800c0d0
 8004220:	2000000c 	.word	0x2000000c
 8004224:	20000010 	.word	0x20000010

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800422e:	4b2c      	ldr	r3, [pc, #176]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b04      	cmp	r3, #4
 8004238:	d102      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800423a:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e047      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d102      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800424c:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e03e      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004252:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d136      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	3301      	adds	r3, #1
 8004274:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427c:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	4a16      	ldr	r2, [pc, #88]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004286:	68d2      	ldr	r2, [r2, #12]
 8004288:	0a12      	lsrs	r2, r2, #8
 800428a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	617b      	str	r3, [r7, #20]
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004296:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	4a10      	ldr	r2, [pc, #64]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	0a12      	lsrs	r2, r2, #8
 80042a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
      break;
 80042ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0e5b      	lsrs	r3, r3, #25
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e001      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042d0:	693b      	ldr	r3, [r7, #16]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	007a1200 	.word	0x007a1200

080042ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4904      	ldr	r1, [pc, #16]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x28>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000
 800432c:	0800c0e0 	.word	0x0800c0e0

08004330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004334:	f7ff ffda 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0adb      	lsrs	r3, r3, #11
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	0800c0e0 	.word	0x0800c0e0

0800435c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d10c      	bne.n	800439a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004380:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	4a14      	ldr	r2, [pc, #80]	@ (80043dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800438a:	68d2      	ldr	r2, [r2, #12]
 800438c:	0a12      	lsrs	r2, r2, #8
 800438e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
    break;
 8004398:	e00c      	b.n	80043b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439a:	4a12      	ldr	r2, [pc, #72]	@ (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	4a0e      	ldr	r2, [pc, #56]	@ (80043dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	0a12      	lsrs	r2, r2, #8
 80043a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]
    break;
 80043b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0e5b      	lsrs	r3, r3, #25
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	3301      	adds	r3, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043ce:	687b      	ldr	r3, [r7, #4]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40021000 	.word	0x40021000
 80043e0:	007a1200 	.word	0x007a1200
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f0:	2300      	movs	r3, #0
 80043f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f4:	2300      	movs	r3, #0
 80043f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8098 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b43      	ldr	r3, [pc, #268]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	4b40      	ldr	r3, [pc, #256]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	4a3f      	ldr	r2, [pc, #252]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	@ 0x58
 8004422:	4b3d      	ldr	r3, [pc, #244]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004432:	4b3a      	ldr	r3, [pc, #232]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a39      	ldr	r2, [pc, #228]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800443c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800443e:	f7fe f80f 	bl	8002460 <HAL_GetTick>
 8004442:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004444:	e009      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004446:	f7fe f80b 	bl	8002460 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d902      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	74fb      	strb	r3, [r7, #19]
        break;
 8004458:	e005      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445a:	4b30      	ldr	r3, [pc, #192]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ef      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d159      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800446c:	4b2a      	ldr	r3, [pc, #168]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004476:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	429a      	cmp	r2, r3
 8004486:	d019      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004488:	4b23      	ldr	r3, [pc, #140]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004494:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449a:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044b4:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fd ffcb 	bl	8002460 <HAL_GetTick>
 80044ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044cc:	e00b      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fd ffc7 	bl	8002460 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d902      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	74fb      	strb	r3, [r7, #19]
            break;
 80044e4:	e006      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ec      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fa:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	4903      	ldr	r1, [pc, #12]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004510:	e008      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	74bb      	strb	r3, [r7, #18]
 8004516:	e005      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004518:	40021000 	.word	0x40021000
 800451c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004524:	7c7b      	ldrb	r3, [r7, #17]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452a:	4ba6      	ldr	r3, [pc, #664]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	4aa5      	ldr	r2, [pc, #660]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004542:	4ba0      	ldr	r3, [pc, #640]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f023 0203 	bic.w	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	499c      	ldr	r1, [pc, #624]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004564:	4b97      	ldr	r3, [pc, #604]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f023 020c 	bic.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4994      	ldr	r1, [pc, #592]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004586:	4b8f      	ldr	r3, [pc, #572]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	498b      	ldr	r1, [pc, #556]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a8:	4b86      	ldr	r3, [pc, #536]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	4983      	ldr	r1, [pc, #524]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ca:	4b7e      	ldr	r3, [pc, #504]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	497a      	ldr	r1, [pc, #488]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ec:	4b75      	ldr	r3, [pc, #468]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	4972      	ldr	r1, [pc, #456]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460e:	4b6d      	ldr	r3, [pc, #436]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004614:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4969      	ldr	r1, [pc, #420]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004630:	4b64      	ldr	r3, [pc, #400]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004636:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4961      	ldr	r1, [pc, #388]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004652:	4b5c      	ldr	r3, [pc, #368]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004658:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	4958      	ldr	r1, [pc, #352]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	4950      	ldr	r1, [pc, #320]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004692:	d105      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004694:	4b4b      	ldr	r3, [pc, #300]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800469e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046ac:	4b45      	ldr	r3, [pc, #276]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	4942      	ldr	r1, [pc, #264]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b3d      	ldr	r3, [pc, #244]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a3c      	ldr	r2, [pc, #240]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046e4:	4b37      	ldr	r3, [pc, #220]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	4934      	ldr	r1, [pc, #208]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b2f      	ldr	r3, [pc, #188]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a2e      	ldr	r2, [pc, #184]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471c:	4b29      	ldr	r3, [pc, #164]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472a:	4926      	ldr	r1, [pc, #152]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b21      	ldr	r3, [pc, #132]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a20      	ldr	r2, [pc, #128]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	4918      	ldr	r1, [pc, #96]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b13      	ldr	r3, [pc, #76]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800478c:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	490a      	ldr	r1, [pc, #40]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a04      	ldr	r2, [pc, #16]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e049      	b.n	800486e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd fb84 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fb12 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e04a      	b.n	8004926 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a21      	ldr	r2, [pc, #132]	@ (8004934 <HAL_TIM_Base_Start_IT+0xbc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <HAL_TIM_Base_Start_IT+0xc0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	@ (800493c <HAL_TIM_Base_Start_IT+0xc4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <HAL_TIM_Base_Start_IT+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a19      	ldr	r2, [pc, #100]	@ (8004944 <HAL_TIM_Base_Start_IT+0xcc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d115      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d015      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d011      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e008      	b.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e000      	b.n	8004924 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	00010007 	.word	0x00010007

0800494c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0202 	mvn.w	r2, #2
 8004980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa2c 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa1e 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa2f 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0204 	mvn.w	r2, #4
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa06 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9f8 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa09 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d020      	beq.n	8004a48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9e0 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9d2 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9e3 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d020      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0210 	mvn.w	r2, #16
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9ba 	bl	8004df4 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9ac 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f9bd 	bl	8004e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fcc4 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fb69 	bl	80051b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb61 	bl	80051cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f977 	bl	8004e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0220 	mvn.w	r2, #32
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb29 	bl	80051a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00c      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb35 	bl	80051e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb2d 	bl	80051f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb25 	bl	8005208 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb1d 	bl	800521c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_ConfigClockSource+0x1c>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e0de      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x1da>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a63      	ldr	r2, [pc, #396]	@ (8004dd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f000 80a9 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c48:	4a61      	ldr	r2, [pc, #388]	@ (8004dd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	f200 80ae 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c50:	4a60      	ldr	r2, [pc, #384]	@ (8004dd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f000 80a1 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c58:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	f200 80a6 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c60:	4a5d      	ldr	r2, [pc, #372]	@ (8004dd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f000 8099 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c68:	4a5b      	ldr	r2, [pc, #364]	@ (8004dd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	f200 809e 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c70:	4a5a      	ldr	r2, [pc, #360]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f000 8091 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c78:	4a58      	ldr	r2, [pc, #352]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	f200 8096 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c84:	f000 8089 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004c88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c8c:	f200 808e 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c94:	d03e      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x128>
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c9a:	f200 8087 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	f000 8086 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1c6>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004caa:	d87f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cac:	2b70      	cmp	r3, #112	@ 0x70
 8004cae:	d01a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b70      	cmp	r3, #112	@ 0x70
 8004cb2:	d87b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d050      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
 8004cb8:	2b60      	cmp	r3, #96	@ 0x60
 8004cba:	d877      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cbc:	2b50      	cmp	r3, #80	@ 0x50
 8004cbe:	d03c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x14e>
 8004cc0:	2b50      	cmp	r3, #80	@ 0x50
 8004cc2:	d873      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d058      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x18e>
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d86f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d064      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004cd0:	2b30      	cmp	r3, #48	@ 0x30
 8004cd2:	d86b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d060      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d867      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05c      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d05a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x1ae>
 8004ce4:	e062      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	f000 f9b3 	bl	8005060 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	609a      	str	r2, [r3, #8]
      break;
 8004d12:	e04f      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	f000 f99c 	bl	8005060 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e03c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 f90e 	bl	8004f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2150      	movs	r1, #80	@ 0x50
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f967 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e02c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 f92d 	bl	8004fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2160      	movs	r1, #96	@ 0x60
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f957 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004d78:	e01c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 f8ee 	bl	8004f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2140      	movs	r1, #64	@ 0x40
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f947 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 f93e 	bl	8005026 <TIM_ITRx_SetConfig>
      break;
 8004daa:	e003      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	00100070 	.word	0x00100070
 8004dd4:	00100040 	.word	0x00100040
 8004dd8:	00100030 	.word	0x00100030
 8004ddc:	00100020 	.word	0x00100020

08004de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a42      	ldr	r2, [pc, #264]	@ (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3f      	ldr	r2, [pc, #252]	@ (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3d      	ldr	r2, [pc, #244]	@ (8004f58 <TIM_Base_SetConfig+0x128>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <TIM_Base_SetConfig+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	@ (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0xe8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a17      	ldr	r2, [pc, #92]	@ (8004f58 <TIM_Base_SetConfig+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0xe8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0xe8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a15      	ldr	r2, [pc, #84]	@ (8004f60 <TIM_Base_SetConfig+0x130>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0xe8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <TIM_Base_SetConfig+0x134>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800

08004f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 030a 	bic.w	r3, r3, #10
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b087      	sub	sp, #28
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 0210 	bic.w	r2, r3, #16
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800503c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0307 	orr.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e065      	b.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512e:	d013      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a13      	ldr	r2, [pc, #76]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	4313      	orrs	r3, r2
 8005168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40014000 	.word	0x40014000

080051a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e042      	b.n	80052c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fc feaf 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	@ 0x24
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f834 	bl	80062e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fd65 	bl	8005d50 <UART_SetConfig>
 8005286:	4603      	mov	r3, r0
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e01b      	b.n	80052c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800529e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f8b3 	bl	800642c <UART_CheckIdleState>
 80052c6:	4603      	mov	r3, r0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	@ 0x28
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d17b      	bne.n	80053e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <HAL_UART_Transmit+0x26>
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e074      	b.n	80053e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2221      	movs	r2, #33	@ 0x21
 8005306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530a:	f7fd f8a9 	bl	8002460 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005328:	d108      	bne.n	800533c <HAL_UART_Transmit+0x6c>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e003      	b.n	8005344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005344:	e030      	b.n	80053a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 f915 	bl	8006580 <UART_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e03d      	b.n	80053e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	3302      	adds	r3, #2
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e007      	b.n	8005396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1c8      	bne.n	8005346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	2140      	movs	r1, #64	@ 0x40
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f001 f8de 	bl	8006580 <UART_WaitOnFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e006      	b.n	80053e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005400:	2b20      	cmp	r3, #32
 8005402:	d137      	bne.n	8005474 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Receive_IT+0x24>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e030      	b.n	8005476 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <HAL_UART_Receive_IT+0x94>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01f      	beq.n	8005464 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	461a      	mov	r2, r3
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f001 f8f6 	bl	800665c <UART_Start_Receive_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	e000      	b.n	8005476 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40008000 	.word	0x40008000

08005484 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b0a0      	sub	sp, #128	@ 0x80
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800549a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800549c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80054a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ac:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80054b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80054b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d0:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80054e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80054e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80054f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e3      	bne.n	80054be <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d118      	bne.n	8005530 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	677b      	str	r3, [r7, #116]	@ 0x74
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800551c:	643b      	str	r3, [r7, #64]	@ 0x40
 800551e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b80      	cmp	r3, #128	@ 0x80
 800553c:	d137      	bne.n	80055ae <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	61fb      	str	r3, [r7, #28]
   return(result);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005554:	673b      	str	r3, [r7, #112]	@ 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800555e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d019      	beq.n	80055ae <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800557e:	2200      	movs	r2, #0
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd f8c1 	bl	800270e <HAL_DMA_Abort>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd f979 	bl	800288e <HAL_DMA_GetError>
 800559c:	4603      	mov	r3, r0
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d105      	bne.n	80055ae <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2210      	movs	r2, #16
 80055a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e073      	b.n	8005696 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b8:	2b40      	cmp	r3, #64	@ 0x40
 80055ba:	d13b      	bne.n	8005634 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055dc:	61ba      	str	r2, [r7, #24]
 80055de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6979      	ldr	r1, [r7, #20]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01c      	beq.n	8005634 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005600:	2200      	movs	r2, #0
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd f87f 	bl	800270e <HAL_DMA_Abort>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561c:	4618      	mov	r0, r3
 800561e:	f7fd f936 	bl	800288e <HAL_DMA_GetError>
 8005622:	4603      	mov	r3, r0
 8005624:	2b20      	cmp	r3, #32
 8005626:	d105      	bne.n	8005634 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2210      	movs	r2, #16
 800562c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e030      	b.n	8005696 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	220f      	movs	r2, #15
 800564a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005654:	d107      	bne.n	8005666 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0210 	orr.w	r2, r2, #16
 8005664:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0208 	orr.w	r2, r2, #8
 8005674:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3780      	adds	r7, #128	@ 0x80
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0ba      	sub	sp, #232	@ 0xe8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056ce:	4013      	ands	r3, r2
 80056d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11b      	bne.n	8005714 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8300 	beq.w	8005d0a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
      }
      return;
 8005712:	e2fa      	b.n	8005d0a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8123 	beq.w	8005964 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800571e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005722:	4b8d      	ldr	r3, [pc, #564]	@ (8005958 <HAL_UART_IRQHandler+0x2b8>)
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800572a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800572e:	4b8b      	ldr	r3, [pc, #556]	@ (800595c <HAL_UART_IRQHandler+0x2bc>)
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8116 	beq.w	8005964 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d011      	beq.n	8005768 <HAL_UART_IRQHandler+0xc8>
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d011      	beq.n	8005798 <HAL_UART_IRQHandler+0xf8>
 8005774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2202      	movs	r2, #2
 8005786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d011      	beq.n	80057c8 <HAL_UART_IRQHandler+0x128>
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2204      	movs	r2, #4
 80057b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	f043 0202 	orr.w	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005958 <HAL_UART_IRQHandler+0x2b8>)
 80057e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <HAL_UART_IRQHandler+0x196>
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8266 	beq.w	8005d0e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800588e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005892:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d054      	beq.n	8005944 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 f800 	bl	80068a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b40      	cmp	r3, #64	@ 0x40
 80058ac:	d146      	bne.n	800593c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d9      	bne.n	80058ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d017      	beq.n	8005934 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <HAL_UART_IRQHandler+0x2c0>)
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005914:	4618      	mov	r0, r3
 8005916:	f7fc ff53 	bl	80027c0 <HAL_DMA_Abort_IT>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d019      	beq.n	8005954 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800592e:	4610      	mov	r0, r2
 8005930:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005932:	e00f      	b.n	8005954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fb ff5f 	bl	80017f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593a:	e00b      	b.n	8005954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fb ff5b 	bl	80017f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005942:	e007      	b.n	8005954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fb ff57 	bl	80017f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005952:	e1dc      	b.n	8005d0e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	bf00      	nop
    return;
 8005956:	e1da      	b.n	8005d0e <HAL_UART_IRQHandler+0x66e>
 8005958:	10000001 	.word	0x10000001
 800595c:	04000120 	.word	0x04000120
 8005960:	0800696d 	.word	0x0800696d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005968:	2b01      	cmp	r3, #1
 800596a:	f040 8170 	bne.w	8005c4e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8169 	beq.w	8005c4e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8162 	beq.w	8005c4e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b40      	cmp	r3, #64	@ 0x40
 800599e:	f040 80d8 	bne.w	8005b52 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80af 	beq.w	8005b18 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f080 80a7 	bcs.w	8005b18 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8087 	bne.w	8005af6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1da      	bne.n	80059e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e1      	bne.n	8005a32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e3      	bne.n	8005a6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e4      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fc fe0c 	bl	800270e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f911 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b16:	e0fc      	b.n	8005d12 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b22:	429a      	cmp	r2, r3
 8005b24:	f040 80f5 	bne.w	8005d12 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	f040 80eb 	bne.w	8005d12 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8f4 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
      return;
 8005b50:	e0df      	b.n	8005d12 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80d1 	beq.w	8005d16 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80cc 	beq.w	8005d16 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e1      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	69b9      	ldr	r1, [r7, #24]
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	617b      	str	r3, [r7, #20]
   return(result);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e4      	bne.n	8005c04 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f876 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c4c:	e063      	b.n	8005d16 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00e      	beq.n	8005c78 <HAL_UART_IRQHandler+0x5d8>
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fbd9 	bl	8007428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c76:	e051      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d014      	beq.n	8005cae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d03a      	beq.n	8005d1a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
    }
    return;
 8005cac:	e035      	b.n	8005d1a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_UART_IRQHandler+0x62e>
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fe62 	bl	8006990 <UART_EndTransmit_IT>
    return;
 8005ccc:	e026      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_UART_IRQHandler+0x64e>
 8005cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fbb2 	bl	8007450 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cec:	e016      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d010      	beq.n	8005d1c <HAL_UART_IRQHandler+0x67c>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da0c      	bge.n	8005d1c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fb9a 	bl	800743c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d08:	e008      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005d0a:	bf00      	nop
 8005d0c:	e006      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
    return;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_UART_IRQHandler+0x67c>
    return;
 8005d1a:	bf00      	nop
  }
}
 8005d1c:	37e8      	adds	r7, #232	@ 0xe8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop

08005d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d54:	b08c      	sub	sp, #48	@ 0x30
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4bab      	ldr	r3, [pc, #684]	@ (800602c <UART_SetConfig+0x2dc>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4aa0      	ldr	r2, [pc, #640]	@ (8006030 <UART_SetConfig+0x2e0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db8:	4313      	orrs	r3, r2
 8005dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005dc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	f023 010f 	bic.w	r1, r3, #15
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a91      	ldr	r2, [pc, #580]	@ (8006034 <UART_SetConfig+0x2e4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d125      	bne.n	8005e40 <UART_SetConfig+0xf0>
 8005df4:	4b90      	ldr	r3, [pc, #576]	@ (8006038 <UART_SetConfig+0x2e8>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d81a      	bhi.n	8005e38 <UART_SetConfig+0xe8>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0xb8>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e31 	.word	0x08005e31
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e0d6      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e20:	2302      	movs	r3, #2
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e0d2      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2e:	e0ce      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e36:	e0ca      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e3e:	e0c6      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a7d      	ldr	r2, [pc, #500]	@ (800603c <UART_SetConfig+0x2ec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d138      	bne.n	8005ebc <UART_SetConfig+0x16c>
 8005e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006038 <UART_SetConfig+0x2e8>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f003 030c 	and.w	r3, r3, #12
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d82d      	bhi.n	8005eb4 <UART_SetConfig+0x164>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x110>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e95 	.word	0x08005e95
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005eb5 	.word	0x08005eb5
 8005e6c:	08005eb5 	.word	0x08005eb5
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005eb5 	.word	0x08005eb5
 8005e7c:	08005eb5 	.word	0x08005eb5
 8005e80:	08005e9d 	.word	0x08005e9d
 8005e84:	08005eb5 	.word	0x08005eb5
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	08005eb5 	.word	0x08005eb5
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9a:	e098      	b.n	8005fce <UART_SetConfig+0x27e>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea2:	e094      	b.n	8005fce <UART_SetConfig+0x27e>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eaa:	e090      	b.n	8005fce <UART_SetConfig+0x27e>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	e08c      	b.n	8005fce <UART_SetConfig+0x27e>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eba:	e088      	b.n	8005fce <UART_SetConfig+0x27e>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8006040 <UART_SetConfig+0x2f0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d125      	bne.n	8005f12 <UART_SetConfig+0x1c2>
 8005ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8006038 <UART_SetConfig+0x2e8>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ed0:	2b30      	cmp	r3, #48	@ 0x30
 8005ed2:	d016      	beq.n	8005f02 <UART_SetConfig+0x1b2>
 8005ed4:	2b30      	cmp	r3, #48	@ 0x30
 8005ed6:	d818      	bhi.n	8005f0a <UART_SetConfig+0x1ba>
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d00a      	beq.n	8005ef2 <UART_SetConfig+0x1a2>
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d814      	bhi.n	8005f0a <UART_SetConfig+0x1ba>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <UART_SetConfig+0x19a>
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d008      	beq.n	8005efa <UART_SetConfig+0x1aa>
 8005ee8:	e00f      	b.n	8005f0a <UART_SetConfig+0x1ba>
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef0:	e06d      	b.n	8005fce <UART_SetConfig+0x27e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef8:	e069      	b.n	8005fce <UART_SetConfig+0x27e>
 8005efa:	2304      	movs	r3, #4
 8005efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f00:	e065      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f02:	2308      	movs	r3, #8
 8005f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f08:	e061      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f10:	e05d      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a4b      	ldr	r2, [pc, #300]	@ (8006044 <UART_SetConfig+0x2f4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d125      	bne.n	8005f68 <UART_SetConfig+0x218>
 8005f1c:	4b46      	ldr	r3, [pc, #280]	@ (8006038 <UART_SetConfig+0x2e8>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f28:	d016      	beq.n	8005f58 <UART_SetConfig+0x208>
 8005f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f2c:	d818      	bhi.n	8005f60 <UART_SetConfig+0x210>
 8005f2e:	2b80      	cmp	r3, #128	@ 0x80
 8005f30:	d00a      	beq.n	8005f48 <UART_SetConfig+0x1f8>
 8005f32:	2b80      	cmp	r3, #128	@ 0x80
 8005f34:	d814      	bhi.n	8005f60 <UART_SetConfig+0x210>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <UART_SetConfig+0x1f0>
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x200>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x210>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f46:	e042      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4e:	e03e      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f56:	e03a      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	e036      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f66:	e032      	b.n	8005fce <UART_SetConfig+0x27e>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a30      	ldr	r2, [pc, #192]	@ (8006030 <UART_SetConfig+0x2e0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d12a      	bne.n	8005fc8 <UART_SetConfig+0x278>
 8005f72:	4b31      	ldr	r3, [pc, #196]	@ (8006038 <UART_SetConfig+0x2e8>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f80:	d01a      	beq.n	8005fb8 <UART_SetConfig+0x268>
 8005f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f86:	d81b      	bhi.n	8005fc0 <UART_SetConfig+0x270>
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8c:	d00c      	beq.n	8005fa8 <UART_SetConfig+0x258>
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f92:	d815      	bhi.n	8005fc0 <UART_SetConfig+0x270>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <UART_SetConfig+0x250>
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9c:	d008      	beq.n	8005fb0 <UART_SetConfig+0x260>
 8005f9e:	e00f      	b.n	8005fc0 <UART_SetConfig+0x270>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa6:	e012      	b.n	8005fce <UART_SetConfig+0x27e>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fae:	e00e      	b.n	8005fce <UART_SetConfig+0x27e>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fb6:	e00a      	b.n	8005fce <UART_SetConfig+0x27e>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fbe:	e006      	b.n	8005fce <UART_SetConfig+0x27e>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fc6:	e002      	b.n	8005fce <UART_SetConfig+0x27e>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	@ (8006030 <UART_SetConfig+0x2e0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	f040 80a8 	bne.w	800612a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d834      	bhi.n	800604c <UART_SetConfig+0x2fc>
 8005fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe8 <UART_SetConfig+0x298>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800601b 	.word	0x0800601b
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	0800604d 	.word	0x0800604d
 8006004:	0800604d 	.word	0x0800604d
 8006008:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe f97a 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006012:	e021      	b.n	8006058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b0c      	ldr	r3, [pc, #48]	@ (8006048 <UART_SetConfig+0x2f8>)
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006018:	e01e      	b.n	8006058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe f905 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800601e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006020:	e01a      	b.n	8006058 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006028:	e016      	b.n	8006058 <UART_SetConfig+0x308>
 800602a:	bf00      	nop
 800602c:	cfff69f3 	.word	0xcfff69f3
 8006030:	40008000 	.word	0x40008000
 8006034:	40013800 	.word	0x40013800
 8006038:	40021000 	.word	0x40021000
 800603c:	40004400 	.word	0x40004400
 8006040:	40004800 	.word	0x40004800
 8006044:	40004c00 	.word	0x40004c00
 8006048:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006056:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 812a 	beq.w	80062b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	4a9e      	ldr	r2, [pc, #632]	@ (80062e0 <UART_SetConfig+0x590>)
 8006066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606a:	461a      	mov	r2, r3
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006072:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	429a      	cmp	r2, r3
 8006082:	d305      	bcc.n	8006090 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d903      	bls.n	8006098 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006096:	e10d      	b.n	80062b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	2200      	movs	r2, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	60fa      	str	r2, [r7, #12]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	4a8e      	ldr	r2, [pc, #568]	@ (80062e0 <UART_SetConfig+0x590>)
 80060a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2200      	movs	r2, #0
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060ba:	f7fa fe0d 	bl	8000cd8 <__aeabi_uldivmod>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	020b      	lsls	r3, r1, #8
 80060d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060d4:	0202      	lsls	r2, r0, #8
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	6849      	ldr	r1, [r1, #4]
 80060da:	0849      	lsrs	r1, r1, #1
 80060dc:	2000      	movs	r0, #0
 80060de:	460c      	mov	r4, r1
 80060e0:	4605      	mov	r5, r0
 80060e2:	eb12 0804 	adds.w	r8, r2, r4
 80060e6:	eb43 0905 	adc.w	r9, r3, r5
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	469a      	mov	sl, r3
 80060f2:	4693      	mov	fp, r2
 80060f4:	4652      	mov	r2, sl
 80060f6:	465b      	mov	r3, fp
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa fdec 	bl	8000cd8 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610e:	d308      	bcc.n	8006122 <UART_SetConfig+0x3d2>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006116:	d204      	bcs.n	8006122 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	60da      	str	r2, [r3, #12]
 8006120:	e0c8      	b.n	80062b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006128:	e0c4      	b.n	80062b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006132:	d167      	bne.n	8006204 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006138:	2b08      	cmp	r3, #8
 800613a:	d828      	bhi.n	800618e <UART_SetConfig+0x43e>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0x3f4>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006169 	.word	0x08006169
 8006148:	08006171 	.word	0x08006171
 800614c:	08006179 	.word	0x08006179
 8006150:	0800618f 	.word	0x0800618f
 8006154:	0800617f 	.word	0x0800617f
 8006158:	0800618f 	.word	0x0800618f
 800615c:	0800618f 	.word	0x0800618f
 8006160:	0800618f 	.word	0x0800618f
 8006164:	08006187 	.word	0x08006187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006168:	f7fe f8cc 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 800616c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800616e:	e014      	b.n	800619a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006170:	f7fe f8de 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 8006174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006176:	e010      	b.n	800619a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006178:	4b5a      	ldr	r3, [pc, #360]	@ (80062e4 <UART_SetConfig+0x594>)
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800617c:	e00d      	b.n	800619a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800617e:	f7fe f853 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8006182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006184:	e009      	b.n	800619a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800618c:	e005      	b.n	800619a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8089 	beq.w	80062b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	4a4e      	ldr	r2, [pc, #312]	@ (80062e0 <UART_SetConfig+0x590>)
 80061a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b4:	005a      	lsls	r2, r3, #1
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	441a      	add	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d916      	bls.n	80061fc <UART_SetConfig+0x4ac>
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d4:	d212      	bcs.n	80061fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f023 030f 	bic.w	r3, r3, #15
 80061de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	8bfb      	ldrh	r3, [r7, #30]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	8bfa      	ldrh	r2, [r7, #30]
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	e05b      	b.n	80062b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006202:	e057      	b.n	80062b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006208:	2b08      	cmp	r3, #8
 800620a:	d828      	bhi.n	800625e <UART_SetConfig+0x50e>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <UART_SetConfig+0x4c4>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006239 	.word	0x08006239
 8006218:	08006241 	.word	0x08006241
 800621c:	08006249 	.word	0x08006249
 8006220:	0800625f 	.word	0x0800625f
 8006224:	0800624f 	.word	0x0800624f
 8006228:	0800625f 	.word	0x0800625f
 800622c:	0800625f 	.word	0x0800625f
 8006230:	0800625f 	.word	0x0800625f
 8006234:	08006257 	.word	0x08006257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006238:	f7fe f864 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 800623c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800623e:	e014      	b.n	800626a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006240:	f7fe f876 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006246:	e010      	b.n	800626a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006248:	4b26      	ldr	r3, [pc, #152]	@ (80062e4 <UART_SetConfig+0x594>)
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800624c:	e00d      	b.n	800626a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624e:	f7fd ffeb 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8006252:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006254:	e009      	b.n	800626a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800625c:	e005      	b.n	800626a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006268:	bf00      	nop
    }

    if (pclk != 0U)
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d021      	beq.n	80062b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	4a1a      	ldr	r2, [pc, #104]	@ (80062e0 <UART_SetConfig+0x590>)
 8006276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627a:	461a      	mov	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	441a      	add	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d909      	bls.n	80062ae <UART_SetConfig+0x55e>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a0:	d205      	bcs.n	80062ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	e002      	b.n	80062b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2200      	movs	r2, #0
 80062c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3730      	adds	r7, #48	@ 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062de:	bf00      	nop
 80062e0:	0800c0e8 	.word	0x0800c0e8
 80062e4:	00f42400 	.word	0x00f42400

080062e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01a      	beq.n	80063fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063e6:	d10a      	bne.n	80063fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b098      	sub	sp, #96	@ 0x60
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800643c:	f7fc f810 	bl	8002460 <HAL_GetTick>
 8006440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b08      	cmp	r3, #8
 800644e:	d12f      	bne.n	80064b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006458:	2200      	movs	r2, #0
 800645a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f88e 	bl	8006580 <UART_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d022      	beq.n	80064b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800647e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006488:	647b      	str	r3, [r7, #68]	@ 0x44
 800648a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800648e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e6      	bne.n	800646a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e063      	b.n	8006578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d149      	bne.n	8006552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064c6:	2200      	movs	r2, #0
 80064c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f857 	bl	8006580 <UART_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d03c      	beq.n	8006552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	623b      	str	r3, [r7, #32]
   return(result);
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e6      	bne.n	80064d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	60fb      	str	r3, [r7, #12]
   return(result);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800652a:	61fa      	str	r2, [r7, #28]
 800652c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	69b9      	ldr	r1, [r7, #24]
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	617b      	str	r3, [r7, #20]
   return(result);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e5      	bne.n	800650a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e012      	b.n	8006578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3758      	adds	r7, #88	@ 0x58
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006590:	e04f      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d04b      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fb ff61 	bl	8002460 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e04e      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d037      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b80      	cmp	r3, #128	@ 0x80
 80065c6:	d034      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b40      	cmp	r3, #64	@ 0x40
 80065cc:	d031      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d110      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f95b 	bl	80068a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2208      	movs	r2, #8
 80065ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e029      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800660c:	d111      	bne.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f941 	bl	80068a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e00f      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	429a      	cmp	r2, r3
 800664e:	d0a0      	beq.n	8006592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800665c:	b480      	push	{r7}
 800665e:	b0a3      	sub	sp, #140	@ 0x8c
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668e:	d10e      	bne.n	80066ae <UART_Start_Receive_IT+0x52>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <UART_Start_Receive_IT+0x48>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800669e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066a2:	e02d      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	22ff      	movs	r2, #255	@ 0xff
 80066a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066ac:	e028      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10d      	bne.n	80066d2 <UART_Start_Receive_IT+0x76>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <UART_Start_Receive_IT+0x6c>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	22ff      	movs	r2, #255	@ 0xff
 80066c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066c6:	e01b      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	227f      	movs	r2, #127	@ 0x7f
 80066cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066d0:	e016      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066da:	d10d      	bne.n	80066f8 <UART_Start_Receive_IT+0x9c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <UART_Start_Receive_IT+0x92>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	227f      	movs	r2, #127	@ 0x7f
 80066e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066ec:	e008      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	223f      	movs	r2, #63	@ 0x3f
 80066f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066f6:	e003      	b.n	8006700 <UART_Start_Receive_IT+0xa4>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2222      	movs	r2, #34	@ 0x22
 800670c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006734:	673a      	str	r2, [r7, #112]	@ 0x70
 8006736:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800673a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e3      	bne.n	8006710 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800674c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006750:	d14f      	bne.n	80067f2 <UART_Start_Receive_IT+0x196>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	429a      	cmp	r2, r3
 800675c:	d349      	bcc.n	80067f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d107      	bne.n	8006778 <UART_Start_Receive_IT+0x11c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a47      	ldr	r2, [pc, #284]	@ (8006890 <UART_Start_Receive_IT+0x234>)
 8006774:	675a      	str	r2, [r3, #116]	@ 0x74
 8006776:	e002      	b.n	800677e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a46      	ldr	r2, [pc, #280]	@ (8006894 <UART_Start_Receive_IT+0x238>)
 800677c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01a      	beq.n	80067bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067aa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80067b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e4      	bne.n	8006786 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80067dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80067de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_Start_Receive_IT+0x160>
 80067f0:	e046      	b.n	8006880 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fa:	d107      	bne.n	800680c <UART_Start_Receive_IT+0x1b0>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a24      	ldr	r2, [pc, #144]	@ (8006898 <UART_Start_Receive_IT+0x23c>)
 8006808:	675a      	str	r2, [r3, #116]	@ 0x74
 800680a:	e002      	b.n	8006812 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a23      	ldr	r2, [pc, #140]	@ (800689c <UART_Start_Receive_IT+0x240>)
 8006810:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d019      	beq.n	800684e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800682e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
 800683a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800683e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_Start_Receive_IT+0x1be>
 800684c:	e018      	b.n	8006880 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	613b      	str	r3, [r7, #16]
   return(result);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f043 0320 	orr.w	r3, r3, #32
 8006862:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	61bb      	str	r3, [r7, #24]
   return(result);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	378c      	adds	r7, #140	@ 0x8c
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	080070bd 	.word	0x080070bd
 8006894:	08006d59 	.word	0x08006d59
 8006898:	08006ba1 	.word	0x08006ba1
 800689c:	080069e9 	.word	0x080069e9

080068a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b095      	sub	sp, #84	@ 0x54
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e3      	bne.n	80068da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d118      	bne.n	800694c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60bb      	str	r3, [r7, #8]
   return(result);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006960:	bf00      	nop
 8006962:	3754      	adds	r7, #84	@ 0x54
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7fa ff38 	bl	80017f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e6      	bne.n	8006998 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff f9a3 	bl	8005d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069de:	bf00      	nop
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b09c      	sub	sp, #112	@ 0x70
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a00:	2b22      	cmp	r3, #34	@ 0x22
 8006a02:	f040 80be 	bne.w	8006b82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	400a      	ands	r2, r1
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 80a1 	bne.w	8006b92 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a33      	ldr	r2, [pc, #204]	@ (8006b9c <UART_RxISR_8BIT+0x1b4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01f      	beq.n	8006b14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d018      	beq.n	8006b14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	623b      	str	r3, [r7, #32]
   return(result);
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d12e      	bne.n	8006b7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69b9      	ldr	r1, [r7, #24]
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d103      	bne.n	8006b6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2210      	movs	r2, #16
 8006b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff f8e0 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b78:	e00b      	b.n	8006b92 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa fdc4 	bl	8001708 <HAL_UART_RxCpltCallback>
}
 8006b80:	e007      	b.n	8006b92 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0208 	orr.w	r2, r2, #8
 8006b90:	619a      	str	r2, [r3, #24]
}
 8006b92:	bf00      	nop
 8006b94:	3770      	adds	r7, #112	@ 0x70
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40008000 	.word	0x40008000

08006ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b09c      	sub	sp, #112	@ 0x70
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bb8:	2b22      	cmp	r3, #34	@ 0x22
 8006bba:	f040 80be 	bne.w	8006d3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be2:	1c9a      	adds	r2, r3, #2
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 80a1 	bne.w	8006d4a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e6      	bne.n	8006c08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a33      	ldr	r2, [pc, #204]	@ (8006d54 <UART_RxISR_16BIT+0x1b4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d01f      	beq.n	8006ccc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d018      	beq.n	8006ccc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12e      	bne.n	8006d32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	613b      	str	r3, [r7, #16]
   return(result);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d103      	bne.n	8006d22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff f804 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d30:	e00b      	b.n	8006d4a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa fce8 	bl	8001708 <HAL_UART_RxCpltCallback>
}
 8006d38:	e007      	b.n	8006d4a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0208 	orr.w	r2, r2, #8
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	3770      	adds	r7, #112	@ 0x70
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40008000 	.word	0x40008000

08006d58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b0ac      	sub	sp, #176	@ 0xb0
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d66:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d8e:	2b22      	cmp	r3, #34	@ 0x22
 8006d90:	f040 8183 	bne.w	800709a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d9a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d9e:	e126      	b.n	8006fee <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006daa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006dae:	b2d9      	uxtb	r1, r3
 8006db0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dba:	400a      	ands	r2, r1
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d053      	beq.n	8006e9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d011      	beq.n	8006e22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e18:	f043 0201 	orr.w	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d011      	beq.n	8006e52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e48:	f043 0204 	orr.w	r2, r3, #4
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e56:	f003 0304 	and.w	r3, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d011      	beq.n	8006e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e78:	f043 0202 	orr.w	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fa fcb3 	bl	80017f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f040 80a3 	bne.w	8006fee <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ecc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006ed0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e4      	bne.n	8006ea8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f06:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006f08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006f0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e1      	bne.n	8006ede <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a60      	ldr	r2, [pc, #384]	@ (80070b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d021      	beq.n	8006f7c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01a      	beq.n	8006f7c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e4      	bne.n	8006f46 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d130      	bne.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e4      	bne.n	8006f8a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d103      	bne.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe feaa 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006fe4:	e00e      	b.n	8007004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa fb8e 	bl	8001708 <HAL_UART_RxCpltCallback>
        break;
 8006fec:	e00a      	b.n	8007004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d006      	beq.n	8007004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f aece 	bne.w	8006da0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800700a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800700e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007012:	2b00      	cmp	r3, #0
 8007014:	d049      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x352>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800701c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007020:	429a      	cmp	r2, r3
 8007022:	d242      	bcs.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	61fb      	str	r3, [r7, #28]
   return(result);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800703a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3308      	adds	r3, #8
 8007044:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800704e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e3      	bne.n	8007024 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	@ (80070b8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007060:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f043 0320 	orr.w	r3, r3, #32
 8007076:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6979      	ldr	r1, [r7, #20]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e4      	bne.n	8007062 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007098:	e007      	b.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	619a      	str	r2, [r3, #24]
}
 80070aa:	bf00      	nop
 80070ac:	37b0      	adds	r7, #176	@ 0xb0
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	40008000 	.word	0x40008000
 80070b8:	080069e9 	.word	0x080069e9

080070bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0ae      	sub	sp, #184	@ 0xb8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f2:	2b22      	cmp	r3, #34	@ 0x22
 80070f4:	f040 8187 	bne.w	8007406 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007102:	e12a      	b.n	800735a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007116:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800711a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800711e:	4013      	ands	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800714e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d053      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800715a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007180:	f043 0201 	orr.w	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800718a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d011      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	f043 0204 	orr.w	r2, r3, #4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80071c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2204      	movs	r2, #4
 80071d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e0:	f043 0202 	orr.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fa faff 	bl	80017f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80a5 	bne.w	800735a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800721e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007232:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007236:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800723a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e2      	bne.n	8007210 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800725a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3308      	adds	r3, #8
 800726e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007274:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e1      	bne.n	800724a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a60      	ldr	r2, [pc, #384]	@ (8007420 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d021      	beq.n	80072e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01a      	beq.n	80072e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e4      	bne.n	80072b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d130      	bne.n	8007352 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007306:	f023 0310 	bic.w	r3, r3, #16
 800730a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007318:	647b      	str	r3, [r7, #68]	@ 0x44
 800731a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800731e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e4      	bne.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b10      	cmp	r3, #16
 8007338:	d103      	bne.n	8007342 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2210      	movs	r2, #16
 8007340:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fe fcf4 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007350:	e00e      	b.n	8007370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa f9d8 	bl	8001708 <HAL_UART_RxCpltCallback>
        break;
 8007358:	e00a      	b.n	8007370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800735a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800735e:	2b00      	cmp	r3, #0
 8007360:	d006      	beq.n	8007370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	f47f aeca 	bne.w	8007104 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007376:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800737a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800737e:	2b00      	cmp	r3, #0
 8007380:	d049      	beq.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007388:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800738c:	429a      	cmp	r2, r3
 800738e:	d242      	bcs.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	623b      	str	r3, [r7, #32]
   return(result);
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80073b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e3      	bne.n	8007390 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a16      	ldr	r2, [pc, #88]	@ (8007424 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80073cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	60fb      	str	r3, [r7, #12]
   return(result);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f043 0320 	orr.w	r3, r3, #32
 80073e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	69b9      	ldr	r1, [r7, #24]
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	617b      	str	r3, [r7, #20]
   return(result);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e4      	bne.n	80073ce <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007404:	e007      	b.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0208 	orr.w	r2, r2, #8
 8007414:	619a      	str	r2, [r3, #24]
}
 8007416:	bf00      	nop
 8007418:	37b8      	adds	r7, #184	@ 0xb8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40008000 	.word	0x40008000
 8007424:	08006ba1 	.word	0x08006ba1

08007428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_UARTEx_DisableFifoMode+0x16>
 8007476:	2302      	movs	r3, #2
 8007478:	e027      	b.n	80074ca <HAL_UARTEx_DisableFifoMode+0x66>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	@ 0x24
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e02d      	b.n	800754a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	@ 0x24
 80074fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f850 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007566:	2302      	movs	r3, #2
 8007568:	e02d      	b.n	80075c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2224      	movs	r2, #36	@ 0x24
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f812 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d108      	bne.n	80075f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075f0:	e031      	b.n	8007656 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075f2:	2308      	movs	r3, #8
 80075f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075f6:	2308      	movs	r3, #8
 80075f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	0e5b      	lsrs	r3, r3, #25
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	0f5b      	lsrs	r3, r3, #29
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	7b3a      	ldrb	r2, [r7, #12]
 800761e:	4911      	ldr	r1, [pc, #68]	@ (8007664 <UARTEx_SetNbDataToProcess+0x94>)
 8007620:	5c8a      	ldrb	r2, [r1, r2]
 8007622:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007626:	7b3a      	ldrb	r2, [r7, #12]
 8007628:	490f      	ldr	r1, [pc, #60]	@ (8007668 <UARTEx_SetNbDataToProcess+0x98>)
 800762a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800762c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	7b7a      	ldrb	r2, [r7, #13]
 800763c:	4909      	ldr	r1, [pc, #36]	@ (8007664 <UARTEx_SetNbDataToProcess+0x94>)
 800763e:	5c8a      	ldrb	r2, [r1, r2]
 8007640:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007644:	7b7a      	ldrb	r2, [r7, #13]
 8007646:	4908      	ldr	r1, [pc, #32]	@ (8007668 <UARTEx_SetNbDataToProcess+0x98>)
 8007648:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764a:	fb93 f3f2 	sdiv	r3, r3, r2
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	0800c100 	.word	0x0800c100
 8007668:	0800c108 	.word	0x0800c108

0800766c <sulp>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	460d      	mov	r5, r1
 8007672:	ec45 4b10 	vmov	d0, r4, r5
 8007676:	4616      	mov	r6, r2
 8007678:	f003 fe72 	bl	800b360 <__ulp>
 800767c:	ec51 0b10 	vmov	r0, r1, d0
 8007680:	b17e      	cbz	r6, 80076a2 <sulp+0x36>
 8007682:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007686:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd09      	ble.n	80076a2 <sulp+0x36>
 800768e:	051b      	lsls	r3, r3, #20
 8007690:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007694:	2400      	movs	r4, #0
 8007696:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	f7f8 ffd3 	bl	8000648 <__aeabi_dmul>
 80076a2:	ec41 0b10 	vmov	d0, r0, r1
 80076a6:	bd70      	pop	{r4, r5, r6, pc}

080076a8 <_strtod_l>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	b09f      	sub	sp, #124	@ 0x7c
 80076ae:	460c      	mov	r4, r1
 80076b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076b2:	2200      	movs	r2, #0
 80076b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80076b6:	9005      	str	r0, [sp, #20]
 80076b8:	f04f 0a00 	mov.w	sl, #0
 80076bc:	f04f 0b00 	mov.w	fp, #0
 80076c0:	460a      	mov	r2, r1
 80076c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80076c4:	7811      	ldrb	r1, [r2, #0]
 80076c6:	292b      	cmp	r1, #43	@ 0x2b
 80076c8:	d04a      	beq.n	8007760 <_strtod_l+0xb8>
 80076ca:	d838      	bhi.n	800773e <_strtod_l+0x96>
 80076cc:	290d      	cmp	r1, #13
 80076ce:	d832      	bhi.n	8007736 <_strtod_l+0x8e>
 80076d0:	2908      	cmp	r1, #8
 80076d2:	d832      	bhi.n	800773a <_strtod_l+0x92>
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d03b      	beq.n	8007750 <_strtod_l+0xa8>
 80076d8:	2200      	movs	r2, #0
 80076da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80076dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80076de:	782a      	ldrb	r2, [r5, #0]
 80076e0:	2a30      	cmp	r2, #48	@ 0x30
 80076e2:	f040 80b3 	bne.w	800784c <_strtod_l+0x1a4>
 80076e6:	786a      	ldrb	r2, [r5, #1]
 80076e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80076ec:	2a58      	cmp	r2, #88	@ 0x58
 80076ee:	d16e      	bne.n	80077ce <_strtod_l+0x126>
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4a8e      	ldr	r2, [pc, #568]	@ (8007934 <_strtod_l+0x28c>)
 80076fc:	9805      	ldr	r0, [sp, #20]
 80076fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007700:	a919      	add	r1, sp, #100	@ 0x64
 8007702:	f002 ff1f 	bl	800a544 <__gethex>
 8007706:	f010 060f 	ands.w	r6, r0, #15
 800770a:	4604      	mov	r4, r0
 800770c:	d005      	beq.n	800771a <_strtod_l+0x72>
 800770e:	2e06      	cmp	r6, #6
 8007710:	d128      	bne.n	8007764 <_strtod_l+0xbc>
 8007712:	3501      	adds	r5, #1
 8007714:	2300      	movs	r3, #0
 8007716:	9519      	str	r5, [sp, #100]	@ 0x64
 8007718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800771a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 858e 	bne.w	800823e <_strtod_l+0xb96>
 8007722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007724:	b1cb      	cbz	r3, 800775a <_strtod_l+0xb2>
 8007726:	4652      	mov	r2, sl
 8007728:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800772c:	ec43 2b10 	vmov	d0, r2, r3
 8007730:	b01f      	add	sp, #124	@ 0x7c
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	2920      	cmp	r1, #32
 8007738:	d1ce      	bne.n	80076d8 <_strtod_l+0x30>
 800773a:	3201      	adds	r2, #1
 800773c:	e7c1      	b.n	80076c2 <_strtod_l+0x1a>
 800773e:	292d      	cmp	r1, #45	@ 0x2d
 8007740:	d1ca      	bne.n	80076d8 <_strtod_l+0x30>
 8007742:	2101      	movs	r1, #1
 8007744:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007746:	1c51      	adds	r1, r2, #1
 8007748:	9119      	str	r1, [sp, #100]	@ 0x64
 800774a:	7852      	ldrb	r2, [r2, #1]
 800774c:	2a00      	cmp	r2, #0
 800774e:	d1c5      	bne.n	80076dc <_strtod_l+0x34>
 8007750:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007752:	9419      	str	r4, [sp, #100]	@ 0x64
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 8570 	bne.w	800823a <_strtod_l+0xb92>
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	e7e5      	b.n	800772c <_strtod_l+0x84>
 8007760:	2100      	movs	r1, #0
 8007762:	e7ef      	b.n	8007744 <_strtod_l+0x9c>
 8007764:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007766:	b13a      	cbz	r2, 8007778 <_strtod_l+0xd0>
 8007768:	2135      	movs	r1, #53	@ 0x35
 800776a:	a81c      	add	r0, sp, #112	@ 0x70
 800776c:	f003 fef2 	bl	800b554 <__copybits>
 8007770:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007772:	9805      	ldr	r0, [sp, #20]
 8007774:	f003 fac0 	bl	800acf8 <_Bfree>
 8007778:	3e01      	subs	r6, #1
 800777a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800777c:	2e04      	cmp	r6, #4
 800777e:	d806      	bhi.n	800778e <_strtod_l+0xe6>
 8007780:	e8df f006 	tbb	[pc, r6]
 8007784:	201d0314 	.word	0x201d0314
 8007788:	14          	.byte	0x14
 8007789:	00          	.byte	0x00
 800778a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800778e:	05e1      	lsls	r1, r4, #23
 8007790:	bf48      	it	mi
 8007792:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800779a:	0d1b      	lsrs	r3, r3, #20
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1bb      	bne.n	800771a <_strtod_l+0x72>
 80077a2:	f001 ff85 	bl	80096b0 <__errno>
 80077a6:	2322      	movs	r3, #34	@ 0x22
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	e7b6      	b.n	800771a <_strtod_l+0x72>
 80077ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80077b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80077b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077bc:	e7e7      	b.n	800778e <_strtod_l+0xe6>
 80077be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800793c <_strtod_l+0x294>
 80077c2:	e7e4      	b.n	800778e <_strtod_l+0xe6>
 80077c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80077c8:	f04f 3aff 	mov.w	sl, #4294967295
 80077cc:	e7df      	b.n	800778e <_strtod_l+0xe6>
 80077ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b30      	cmp	r3, #48	@ 0x30
 80077d8:	d0f9      	beq.n	80077ce <_strtod_l+0x126>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d09d      	beq.n	800771a <_strtod_l+0x72>
 80077de:	2301      	movs	r3, #1
 80077e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80077e6:	2300      	movs	r3, #0
 80077e8:	9308      	str	r3, [sp, #32]
 80077ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ec:	461f      	mov	r7, r3
 80077ee:	220a      	movs	r2, #10
 80077f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077f2:	7805      	ldrb	r5, [r0, #0]
 80077f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80077f8:	b2d9      	uxtb	r1, r3
 80077fa:	2909      	cmp	r1, #9
 80077fc:	d928      	bls.n	8007850 <_strtod_l+0x1a8>
 80077fe:	494e      	ldr	r1, [pc, #312]	@ (8007938 <_strtod_l+0x290>)
 8007800:	2201      	movs	r2, #1
 8007802:	f001 fef9 	bl	80095f8 <strncmp>
 8007806:	2800      	cmp	r0, #0
 8007808:	d032      	beq.n	8007870 <_strtod_l+0x1c8>
 800780a:	2000      	movs	r0, #0
 800780c:	462a      	mov	r2, r5
 800780e:	4681      	mov	r9, r0
 8007810:	463d      	mov	r5, r7
 8007812:	4603      	mov	r3, r0
 8007814:	2a65      	cmp	r2, #101	@ 0x65
 8007816:	d001      	beq.n	800781c <_strtod_l+0x174>
 8007818:	2a45      	cmp	r2, #69	@ 0x45
 800781a:	d114      	bne.n	8007846 <_strtod_l+0x19e>
 800781c:	b91d      	cbnz	r5, 8007826 <_strtod_l+0x17e>
 800781e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007820:	4302      	orrs	r2, r0
 8007822:	d095      	beq.n	8007750 <_strtod_l+0xa8>
 8007824:	2500      	movs	r5, #0
 8007826:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007828:	1c62      	adds	r2, r4, #1
 800782a:	9219      	str	r2, [sp, #100]	@ 0x64
 800782c:	7862      	ldrb	r2, [r4, #1]
 800782e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007830:	d077      	beq.n	8007922 <_strtod_l+0x27a>
 8007832:	2a2d      	cmp	r2, #45	@ 0x2d
 8007834:	d07b      	beq.n	800792e <_strtod_l+0x286>
 8007836:	f04f 0c00 	mov.w	ip, #0
 800783a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800783e:	2909      	cmp	r1, #9
 8007840:	f240 8082 	bls.w	8007948 <_strtod_l+0x2a0>
 8007844:	9419      	str	r4, [sp, #100]	@ 0x64
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	e0a2      	b.n	8007992 <_strtod_l+0x2ea>
 800784c:	2300      	movs	r3, #0
 800784e:	e7c7      	b.n	80077e0 <_strtod_l+0x138>
 8007850:	2f08      	cmp	r7, #8
 8007852:	bfd5      	itete	le
 8007854:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007856:	9908      	ldrgt	r1, [sp, #32]
 8007858:	fb02 3301 	mlale	r3, r2, r1, r3
 800785c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007860:	f100 0001 	add.w	r0, r0, #1
 8007864:	bfd4      	ite	le
 8007866:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007868:	9308      	strgt	r3, [sp, #32]
 800786a:	3701      	adds	r7, #1
 800786c:	9019      	str	r0, [sp, #100]	@ 0x64
 800786e:	e7bf      	b.n	80077f0 <_strtod_l+0x148>
 8007870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	9219      	str	r2, [sp, #100]	@ 0x64
 8007876:	785a      	ldrb	r2, [r3, #1]
 8007878:	b37f      	cbz	r7, 80078da <_strtod_l+0x232>
 800787a:	4681      	mov	r9, r0
 800787c:	463d      	mov	r5, r7
 800787e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007882:	2b09      	cmp	r3, #9
 8007884:	d912      	bls.n	80078ac <_strtod_l+0x204>
 8007886:	2301      	movs	r3, #1
 8007888:	e7c4      	b.n	8007814 <_strtod_l+0x16c>
 800788a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007890:	785a      	ldrb	r2, [r3, #1]
 8007892:	3001      	adds	r0, #1
 8007894:	2a30      	cmp	r2, #48	@ 0x30
 8007896:	d0f8      	beq.n	800788a <_strtod_l+0x1e2>
 8007898:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800789c:	2b08      	cmp	r3, #8
 800789e:	f200 84d3 	bhi.w	8008248 <_strtod_l+0xba0>
 80078a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078a6:	4681      	mov	r9, r0
 80078a8:	2000      	movs	r0, #0
 80078aa:	4605      	mov	r5, r0
 80078ac:	3a30      	subs	r2, #48	@ 0x30
 80078ae:	f100 0301 	add.w	r3, r0, #1
 80078b2:	d02a      	beq.n	800790a <_strtod_l+0x262>
 80078b4:	4499      	add	r9, r3
 80078b6:	eb00 0c05 	add.w	ip, r0, r5
 80078ba:	462b      	mov	r3, r5
 80078bc:	210a      	movs	r1, #10
 80078be:	4563      	cmp	r3, ip
 80078c0:	d10d      	bne.n	80078de <_strtod_l+0x236>
 80078c2:	1c69      	adds	r1, r5, #1
 80078c4:	4401      	add	r1, r0
 80078c6:	4428      	add	r0, r5
 80078c8:	2808      	cmp	r0, #8
 80078ca:	dc16      	bgt.n	80078fa <_strtod_l+0x252>
 80078cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078ce:	230a      	movs	r3, #10
 80078d0:	fb03 2300 	mla	r3, r3, r0, r2
 80078d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d6:	2300      	movs	r3, #0
 80078d8:	e018      	b.n	800790c <_strtod_l+0x264>
 80078da:	4638      	mov	r0, r7
 80078dc:	e7da      	b.n	8007894 <_strtod_l+0x1ec>
 80078de:	2b08      	cmp	r3, #8
 80078e0:	f103 0301 	add.w	r3, r3, #1
 80078e4:	dc03      	bgt.n	80078ee <_strtod_l+0x246>
 80078e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80078e8:	434e      	muls	r6, r1
 80078ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80078ec:	e7e7      	b.n	80078be <_strtod_l+0x216>
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	bfde      	ittt	le
 80078f2:	9e08      	ldrle	r6, [sp, #32]
 80078f4:	434e      	mulle	r6, r1
 80078f6:	9608      	strle	r6, [sp, #32]
 80078f8:	e7e1      	b.n	80078be <_strtod_l+0x216>
 80078fa:	280f      	cmp	r0, #15
 80078fc:	dceb      	bgt.n	80078d6 <_strtod_l+0x22e>
 80078fe:	9808      	ldr	r0, [sp, #32]
 8007900:	230a      	movs	r3, #10
 8007902:	fb03 2300 	mla	r3, r3, r0, r2
 8007906:	9308      	str	r3, [sp, #32]
 8007908:	e7e5      	b.n	80078d6 <_strtod_l+0x22e>
 800790a:	4629      	mov	r1, r5
 800790c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800790e:	1c50      	adds	r0, r2, #1
 8007910:	9019      	str	r0, [sp, #100]	@ 0x64
 8007912:	7852      	ldrb	r2, [r2, #1]
 8007914:	4618      	mov	r0, r3
 8007916:	460d      	mov	r5, r1
 8007918:	e7b1      	b.n	800787e <_strtod_l+0x1d6>
 800791a:	f04f 0900 	mov.w	r9, #0
 800791e:	2301      	movs	r3, #1
 8007920:	e77d      	b.n	800781e <_strtod_l+0x176>
 8007922:	f04f 0c00 	mov.w	ip, #0
 8007926:	1ca2      	adds	r2, r4, #2
 8007928:	9219      	str	r2, [sp, #100]	@ 0x64
 800792a:	78a2      	ldrb	r2, [r4, #2]
 800792c:	e785      	b.n	800783a <_strtod_l+0x192>
 800792e:	f04f 0c01 	mov.w	ip, #1
 8007932:	e7f8      	b.n	8007926 <_strtod_l+0x27e>
 8007934:	0800c128 	.word	0x0800c128
 8007938:	0800c110 	.word	0x0800c110
 800793c:	7ff00000 	.word	0x7ff00000
 8007940:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007942:	1c51      	adds	r1, r2, #1
 8007944:	9119      	str	r1, [sp, #100]	@ 0x64
 8007946:	7852      	ldrb	r2, [r2, #1]
 8007948:	2a30      	cmp	r2, #48	@ 0x30
 800794a:	d0f9      	beq.n	8007940 <_strtod_l+0x298>
 800794c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007950:	2908      	cmp	r1, #8
 8007952:	f63f af78 	bhi.w	8007846 <_strtod_l+0x19e>
 8007956:	3a30      	subs	r2, #48	@ 0x30
 8007958:	920e      	str	r2, [sp, #56]	@ 0x38
 800795a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800795c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800795e:	f04f 080a 	mov.w	r8, #10
 8007962:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007964:	1c56      	adds	r6, r2, #1
 8007966:	9619      	str	r6, [sp, #100]	@ 0x64
 8007968:	7852      	ldrb	r2, [r2, #1]
 800796a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800796e:	f1be 0f09 	cmp.w	lr, #9
 8007972:	d939      	bls.n	80079e8 <_strtod_l+0x340>
 8007974:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007976:	1a76      	subs	r6, r6, r1
 8007978:	2e08      	cmp	r6, #8
 800797a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800797e:	dc03      	bgt.n	8007988 <_strtod_l+0x2e0>
 8007980:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007982:	4588      	cmp	r8, r1
 8007984:	bfa8      	it	ge
 8007986:	4688      	movge	r8, r1
 8007988:	f1bc 0f00 	cmp.w	ip, #0
 800798c:	d001      	beq.n	8007992 <_strtod_l+0x2ea>
 800798e:	f1c8 0800 	rsb	r8, r8, #0
 8007992:	2d00      	cmp	r5, #0
 8007994:	d14e      	bne.n	8007a34 <_strtod_l+0x38c>
 8007996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007998:	4308      	orrs	r0, r1
 800799a:	f47f aebe 	bne.w	800771a <_strtod_l+0x72>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f47f aed6 	bne.w	8007750 <_strtod_l+0xa8>
 80079a4:	2a69      	cmp	r2, #105	@ 0x69
 80079a6:	d028      	beq.n	80079fa <_strtod_l+0x352>
 80079a8:	dc25      	bgt.n	80079f6 <_strtod_l+0x34e>
 80079aa:	2a49      	cmp	r2, #73	@ 0x49
 80079ac:	d025      	beq.n	80079fa <_strtod_l+0x352>
 80079ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80079b0:	f47f aece 	bne.w	8007750 <_strtod_l+0xa8>
 80079b4:	499b      	ldr	r1, [pc, #620]	@ (8007c24 <_strtod_l+0x57c>)
 80079b6:	a819      	add	r0, sp, #100	@ 0x64
 80079b8:	f002 ffe6 	bl	800a988 <__match>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f43f aec7 	beq.w	8007750 <_strtod_l+0xa8>
 80079c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b28      	cmp	r3, #40	@ 0x28
 80079c8:	d12e      	bne.n	8007a28 <_strtod_l+0x380>
 80079ca:	4997      	ldr	r1, [pc, #604]	@ (8007c28 <_strtod_l+0x580>)
 80079cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80079ce:	a819      	add	r0, sp, #100	@ 0x64
 80079d0:	f002 ffee 	bl	800a9b0 <__hexnan>
 80079d4:	2805      	cmp	r0, #5
 80079d6:	d127      	bne.n	8007a28 <_strtod_l+0x380>
 80079d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80079de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80079e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80079e6:	e698      	b.n	800771a <_strtod_l+0x72>
 80079e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80079ea:	fb08 2101 	mla	r1, r8, r1, r2
 80079ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80079f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80079f4:	e7b5      	b.n	8007962 <_strtod_l+0x2ba>
 80079f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80079f8:	e7da      	b.n	80079b0 <_strtod_l+0x308>
 80079fa:	498c      	ldr	r1, [pc, #560]	@ (8007c2c <_strtod_l+0x584>)
 80079fc:	a819      	add	r0, sp, #100	@ 0x64
 80079fe:	f002 ffc3 	bl	800a988 <__match>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f43f aea4 	beq.w	8007750 <_strtod_l+0xa8>
 8007a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a0a:	4989      	ldr	r1, [pc, #548]	@ (8007c30 <_strtod_l+0x588>)
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	a819      	add	r0, sp, #100	@ 0x64
 8007a10:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a12:	f002 ffb9 	bl	800a988 <__match>
 8007a16:	b910      	cbnz	r0, 8007a1e <_strtod_l+0x376>
 8007a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007c40 <_strtod_l+0x598>
 8007a22:	f04f 0a00 	mov.w	sl, #0
 8007a26:	e678      	b.n	800771a <_strtod_l+0x72>
 8007a28:	4882      	ldr	r0, [pc, #520]	@ (8007c34 <_strtod_l+0x58c>)
 8007a2a:	f001 fe7d 	bl	8009728 <nan>
 8007a2e:	ec5b ab10 	vmov	sl, fp, d0
 8007a32:	e672      	b.n	800771a <_strtod_l+0x72>
 8007a34:	eba8 0309 	sub.w	r3, r8, r9
 8007a38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3c:	2f00      	cmp	r7, #0
 8007a3e:	bf08      	it	eq
 8007a40:	462f      	moveq	r7, r5
 8007a42:	2d10      	cmp	r5, #16
 8007a44:	462c      	mov	r4, r5
 8007a46:	bfa8      	it	ge
 8007a48:	2410      	movge	r4, #16
 8007a4a:	f7f8 fd83 	bl	8000554 <__aeabi_ui2d>
 8007a4e:	2d09      	cmp	r5, #9
 8007a50:	4682      	mov	sl, r0
 8007a52:	468b      	mov	fp, r1
 8007a54:	dc13      	bgt.n	8007a7e <_strtod_l+0x3d6>
 8007a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f43f ae5e 	beq.w	800771a <_strtod_l+0x72>
 8007a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a60:	dd78      	ble.n	8007b54 <_strtod_l+0x4ac>
 8007a62:	2b16      	cmp	r3, #22
 8007a64:	dc5f      	bgt.n	8007b26 <_strtod_l+0x47e>
 8007a66:	4974      	ldr	r1, [pc, #464]	@ (8007c38 <_strtod_l+0x590>)
 8007a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a70:	4652      	mov	r2, sl
 8007a72:	465b      	mov	r3, fp
 8007a74:	f7f8 fde8 	bl	8000648 <__aeabi_dmul>
 8007a78:	4682      	mov	sl, r0
 8007a7a:	468b      	mov	fp, r1
 8007a7c:	e64d      	b.n	800771a <_strtod_l+0x72>
 8007a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8007c38 <_strtod_l+0x590>)
 8007a80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a88:	f7f8 fdde 	bl	8000648 <__aeabi_dmul>
 8007a8c:	4682      	mov	sl, r0
 8007a8e:	9808      	ldr	r0, [sp, #32]
 8007a90:	468b      	mov	fp, r1
 8007a92:	f7f8 fd5f 	bl	8000554 <__aeabi_ui2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	4659      	mov	r1, fp
 8007a9e:	f7f8 fc1d 	bl	80002dc <__adddf3>
 8007aa2:	2d0f      	cmp	r5, #15
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	468b      	mov	fp, r1
 8007aa8:	ddd5      	ble.n	8007a56 <_strtod_l+0x3ae>
 8007aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aac:	1b2c      	subs	r4, r5, r4
 8007aae:	441c      	add	r4, r3
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	f340 8096 	ble.w	8007be2 <_strtod_l+0x53a>
 8007ab6:	f014 030f 	ands.w	r3, r4, #15
 8007aba:	d00a      	beq.n	8007ad2 <_strtod_l+0x42a>
 8007abc:	495e      	ldr	r1, [pc, #376]	@ (8007c38 <_strtod_l+0x590>)
 8007abe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aca:	f7f8 fdbd 	bl	8000648 <__aeabi_dmul>
 8007ace:	4682      	mov	sl, r0
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	f034 040f 	bics.w	r4, r4, #15
 8007ad6:	d073      	beq.n	8007bc0 <_strtod_l+0x518>
 8007ad8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007adc:	dd48      	ble.n	8007b70 <_strtod_l+0x4c8>
 8007ade:	2400      	movs	r4, #0
 8007ae0:	46a0      	mov	r8, r4
 8007ae2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ae4:	46a1      	mov	r9, r4
 8007ae6:	9a05      	ldr	r2, [sp, #20]
 8007ae8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007c40 <_strtod_l+0x598>
 8007aec:	2322      	movs	r3, #34	@ 0x22
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f43f ae0f 	beq.w	800771a <_strtod_l+0x72>
 8007afc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007afe:	9805      	ldr	r0, [sp, #20]
 8007b00:	f003 f8fa 	bl	800acf8 <_Bfree>
 8007b04:	9805      	ldr	r0, [sp, #20]
 8007b06:	4649      	mov	r1, r9
 8007b08:	f003 f8f6 	bl	800acf8 <_Bfree>
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	4641      	mov	r1, r8
 8007b10:	f003 f8f2 	bl	800acf8 <_Bfree>
 8007b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b16:	9805      	ldr	r0, [sp, #20]
 8007b18:	f003 f8ee 	bl	800acf8 <_Bfree>
 8007b1c:	9805      	ldr	r0, [sp, #20]
 8007b1e:	4621      	mov	r1, r4
 8007b20:	f003 f8ea 	bl	800acf8 <_Bfree>
 8007b24:	e5f9      	b.n	800771a <_strtod_l+0x72>
 8007b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	dbbc      	blt.n	8007aaa <_strtod_l+0x402>
 8007b30:	4c41      	ldr	r4, [pc, #260]	@ (8007c38 <_strtod_l+0x590>)
 8007b32:	f1c5 050f 	rsb	r5, r5, #15
 8007b36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b42:	f7f8 fd81 	bl	8000648 <__aeabi_dmul>
 8007b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b48:	1b5d      	subs	r5, r3, r5
 8007b4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b52:	e78f      	b.n	8007a74 <_strtod_l+0x3cc>
 8007b54:	3316      	adds	r3, #22
 8007b56:	dba8      	blt.n	8007aaa <_strtod_l+0x402>
 8007b58:	4b37      	ldr	r3, [pc, #220]	@ (8007c38 <_strtod_l+0x590>)
 8007b5a:	eba9 0808 	sub.w	r8, r9, r8
 8007b5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b66:	4650      	mov	r0, sl
 8007b68:	4659      	mov	r1, fp
 8007b6a:	f7f8 fe97 	bl	800089c <__aeabi_ddiv>
 8007b6e:	e783      	b.n	8007a78 <_strtod_l+0x3d0>
 8007b70:	4b32      	ldr	r3, [pc, #200]	@ (8007c3c <_strtod_l+0x594>)
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	2300      	movs	r3, #0
 8007b76:	1124      	asrs	r4, r4, #4
 8007b78:	4650      	mov	r0, sl
 8007b7a:	4659      	mov	r1, fp
 8007b7c:	461e      	mov	r6, r3
 8007b7e:	2c01      	cmp	r4, #1
 8007b80:	dc21      	bgt.n	8007bc6 <_strtod_l+0x51e>
 8007b82:	b10b      	cbz	r3, 8007b88 <_strtod_l+0x4e0>
 8007b84:	4682      	mov	sl, r0
 8007b86:	468b      	mov	fp, r1
 8007b88:	492c      	ldr	r1, [pc, #176]	@ (8007c3c <_strtod_l+0x594>)
 8007b8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b9a:	f7f8 fd55 	bl	8000648 <__aeabi_dmul>
 8007b9e:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <_strtod_l+0x598>)
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	400b      	ands	r3, r1
 8007ba4:	4927      	ldr	r1, [pc, #156]	@ (8007c44 <_strtod_l+0x59c>)
 8007ba6:	428b      	cmp	r3, r1
 8007ba8:	4682      	mov	sl, r0
 8007baa:	d898      	bhi.n	8007ade <_strtod_l+0x436>
 8007bac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf86      	itte	hi
 8007bb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007c48 <_strtod_l+0x5a0>
 8007bb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9308      	str	r3, [sp, #32]
 8007bc4:	e07a      	b.n	8007cbc <_strtod_l+0x614>
 8007bc6:	07e2      	lsls	r2, r4, #31
 8007bc8:	d505      	bpl.n	8007bd6 <_strtod_l+0x52e>
 8007bca:	9b08      	ldr	r3, [sp, #32]
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fd3a 	bl	8000648 <__aeabi_dmul>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9a08      	ldr	r2, [sp, #32]
 8007bd8:	3208      	adds	r2, #8
 8007bda:	3601      	adds	r6, #1
 8007bdc:	1064      	asrs	r4, r4, #1
 8007bde:	9208      	str	r2, [sp, #32]
 8007be0:	e7cd      	b.n	8007b7e <_strtod_l+0x4d6>
 8007be2:	d0ed      	beq.n	8007bc0 <_strtod_l+0x518>
 8007be4:	4264      	negs	r4, r4
 8007be6:	f014 020f 	ands.w	r2, r4, #15
 8007bea:	d00a      	beq.n	8007c02 <_strtod_l+0x55a>
 8007bec:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <_strtod_l+0x590>)
 8007bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fe4f 	bl	800089c <__aeabi_ddiv>
 8007bfe:	4682      	mov	sl, r0
 8007c00:	468b      	mov	fp, r1
 8007c02:	1124      	asrs	r4, r4, #4
 8007c04:	d0dc      	beq.n	8007bc0 <_strtod_l+0x518>
 8007c06:	2c1f      	cmp	r4, #31
 8007c08:	dd20      	ble.n	8007c4c <_strtod_l+0x5a4>
 8007c0a:	2400      	movs	r4, #0
 8007c0c:	46a0      	mov	r8, r4
 8007c0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c10:	46a1      	mov	r9, r4
 8007c12:	9a05      	ldr	r2, [sp, #20]
 8007c14:	2322      	movs	r3, #34	@ 0x22
 8007c16:	f04f 0a00 	mov.w	sl, #0
 8007c1a:	f04f 0b00 	mov.w	fp, #0
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	e768      	b.n	8007af4 <_strtod_l+0x44c>
 8007c22:	bf00      	nop
 8007c24:	0800c175 	.word	0x0800c175
 8007c28:	0800c114 	.word	0x0800c114
 8007c2c:	0800c16d 	.word	0x0800c16d
 8007c30:	0800c1ac 	.word	0x0800c1ac
 8007c34:	0800c53d 	.word	0x0800c53d
 8007c38:	0800c328 	.word	0x0800c328
 8007c3c:	0800c300 	.word	0x0800c300
 8007c40:	7ff00000 	.word	0x7ff00000
 8007c44:	7ca00000 	.word	0x7ca00000
 8007c48:	7fefffff 	.word	0x7fefffff
 8007c4c:	f014 0310 	ands.w	r3, r4, #16
 8007c50:	bf18      	it	ne
 8007c52:	236a      	movne	r3, #106	@ 0x6a
 8007c54:	4ea9      	ldr	r6, [pc, #676]	@ (8007efc <_strtod_l+0x854>)
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	4650      	mov	r0, sl
 8007c5a:	4659      	mov	r1, fp
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	07e2      	lsls	r2, r4, #31
 8007c60:	d504      	bpl.n	8007c6c <_strtod_l+0x5c4>
 8007c62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c66:	f7f8 fcef 	bl	8000648 <__aeabi_dmul>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	1064      	asrs	r4, r4, #1
 8007c6e:	f106 0608 	add.w	r6, r6, #8
 8007c72:	d1f4      	bne.n	8007c5e <_strtod_l+0x5b6>
 8007c74:	b10b      	cbz	r3, 8007c7a <_strtod_l+0x5d2>
 8007c76:	4682      	mov	sl, r0
 8007c78:	468b      	mov	fp, r1
 8007c7a:	9b08      	ldr	r3, [sp, #32]
 8007c7c:	b1b3      	cbz	r3, 8007cac <_strtod_l+0x604>
 8007c7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	4659      	mov	r1, fp
 8007c8a:	dd0f      	ble.n	8007cac <_strtod_l+0x604>
 8007c8c:	2b1f      	cmp	r3, #31
 8007c8e:	dd55      	ble.n	8007d3c <_strtod_l+0x694>
 8007c90:	2b34      	cmp	r3, #52	@ 0x34
 8007c92:	bfde      	ittt	le
 8007c94:	f04f 33ff 	movle.w	r3, #4294967295
 8007c98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c9c:	4093      	lslle	r3, r2
 8007c9e:	f04f 0a00 	mov.w	sl, #0
 8007ca2:	bfcc      	ite	gt
 8007ca4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ca8:	ea03 0b01 	andle.w	fp, r3, r1
 8007cac:	2200      	movs	r2, #0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f8 ff30 	bl	8000b18 <__aeabi_dcmpeq>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1a6      	bne.n	8007c0a <_strtod_l+0x562>
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cc2:	9805      	ldr	r0, [sp, #20]
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	f003 f87e 	bl	800adc8 <__s2b>
 8007ccc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f af05 	beq.w	8007ade <_strtod_l+0x436>
 8007cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	eba9 0308 	sub.w	r3, r9, r8
 8007cdc:	bfa8      	it	ge
 8007cde:	2300      	movge	r3, #0
 8007ce0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ce2:	2400      	movs	r4, #0
 8007ce4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ce8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007cea:	46a0      	mov	r8, r4
 8007cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cee:	9805      	ldr	r0, [sp, #20]
 8007cf0:	6859      	ldr	r1, [r3, #4]
 8007cf2:	f002 ffc1 	bl	800ac78 <_Balloc>
 8007cf6:	4681      	mov	r9, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f43f aef4 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007cfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	3202      	adds	r2, #2
 8007d04:	f103 010c 	add.w	r1, r3, #12
 8007d08:	0092      	lsls	r2, r2, #2
 8007d0a:	300c      	adds	r0, #12
 8007d0c:	f001 fcfd 	bl	800970a <memcpy>
 8007d10:	ec4b ab10 	vmov	d0, sl, fp
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d18:	a91b      	add	r1, sp, #108	@ 0x6c
 8007d1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007d1e:	f003 fb8f 	bl	800b440 <__d2b>
 8007d22:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f43f aede 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007d2a:	9805      	ldr	r0, [sp, #20]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	f003 f8e1 	bl	800aef4 <__i2b>
 8007d32:	4680      	mov	r8, r0
 8007d34:	b948      	cbnz	r0, 8007d4a <_strtod_l+0x6a2>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	e6d4      	b.n	8007ae6 <_strtod_l+0x43e>
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	ea03 0a0a 	and.w	sl, r3, sl
 8007d48:	e7b0      	b.n	8007cac <_strtod_l+0x604>
 8007d4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	bfab      	itete	ge
 8007d52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d5a:	bfac      	ite	ge
 8007d5c:	18ef      	addge	r7, r5, r3
 8007d5e:	1b5e      	sublt	r6, r3, r5
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	1aed      	subs	r5, r5, r3
 8007d64:	4415      	add	r5, r2
 8007d66:	4b66      	ldr	r3, [pc, #408]	@ (8007f00 <_strtod_l+0x858>)
 8007d68:	3d01      	subs	r5, #1
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d70:	da50      	bge.n	8007e14 <_strtod_l+0x76c>
 8007d72:	1b5b      	subs	r3, r3, r5
 8007d74:	2b1f      	cmp	r3, #31
 8007d76:	eba2 0203 	sub.w	r2, r2, r3
 8007d7a:	f04f 0101 	mov.w	r1, #1
 8007d7e:	dc3d      	bgt.n	8007dfc <_strtod_l+0x754>
 8007d80:	fa01 f303 	lsl.w	r3, r1, r3
 8007d84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d86:	2300      	movs	r3, #0
 8007d88:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d8a:	18bd      	adds	r5, r7, r2
 8007d8c:	9b08      	ldr	r3, [sp, #32]
 8007d8e:	42af      	cmp	r7, r5
 8007d90:	4416      	add	r6, r2
 8007d92:	441e      	add	r6, r3
 8007d94:	463b      	mov	r3, r7
 8007d96:	bfa8      	it	ge
 8007d98:	462b      	movge	r3, r5
 8007d9a:	42b3      	cmp	r3, r6
 8007d9c:	bfa8      	it	ge
 8007d9e:	4633      	movge	r3, r6
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfc2      	ittt	gt
 8007da4:	1aed      	subgt	r5, r5, r3
 8007da6:	1af6      	subgt	r6, r6, r3
 8007da8:	1aff      	subgt	r7, r7, r3
 8007daa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd16      	ble.n	8007dde <_strtod_l+0x736>
 8007db0:	4641      	mov	r1, r8
 8007db2:	9805      	ldr	r0, [sp, #20]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f003 f95d 	bl	800b074 <__pow5mult>
 8007dba:	4680      	mov	r8, r0
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d0ba      	beq.n	8007d36 <_strtod_l+0x68e>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dc4:	9805      	ldr	r0, [sp, #20]
 8007dc6:	f003 f8ab 	bl	800af20 <__multiply>
 8007dca:	900e      	str	r0, [sp, #56]	@ 0x38
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f43f ae8a 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007dd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dd4:	9805      	ldr	r0, [sp, #20]
 8007dd6:	f002 ff8f 	bl	800acf8 <_Bfree>
 8007dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ddc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	dc1d      	bgt.n	8007e1e <_strtod_l+0x776>
 8007de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dd23      	ble.n	8007e30 <_strtod_l+0x788>
 8007de8:	4649      	mov	r1, r9
 8007dea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007dec:	9805      	ldr	r0, [sp, #20]
 8007dee:	f003 f941 	bl	800b074 <__pow5mult>
 8007df2:	4681      	mov	r9, r0
 8007df4:	b9e0      	cbnz	r0, 8007e30 <_strtod_l+0x788>
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	e674      	b.n	8007ae6 <_strtod_l+0x43e>
 8007dfc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007e00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007e04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007e08:	35e2      	adds	r5, #226	@ 0xe2
 8007e0a:	fa01 f305 	lsl.w	r3, r1, r5
 8007e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007e12:	e7ba      	b.n	8007d8a <_strtod_l+0x6e2>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e18:	2301      	movs	r3, #1
 8007e1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e1c:	e7b5      	b.n	8007d8a <_strtod_l+0x6e2>
 8007e1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e20:	9805      	ldr	r0, [sp, #20]
 8007e22:	462a      	mov	r2, r5
 8007e24:	f003 f980 	bl	800b128 <__lshift>
 8007e28:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1d9      	bne.n	8007de2 <_strtod_l+0x73a>
 8007e2e:	e65a      	b.n	8007ae6 <_strtod_l+0x43e>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	dd07      	ble.n	8007e44 <_strtod_l+0x79c>
 8007e34:	4649      	mov	r1, r9
 8007e36:	9805      	ldr	r0, [sp, #20]
 8007e38:	4632      	mov	r2, r6
 8007e3a:	f003 f975 	bl	800b128 <__lshift>
 8007e3e:	4681      	mov	r9, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d0d8      	beq.n	8007df6 <_strtod_l+0x74e>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	dd08      	ble.n	8007e5a <_strtod_l+0x7b2>
 8007e48:	4641      	mov	r1, r8
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	463a      	mov	r2, r7
 8007e4e:	f003 f96b 	bl	800b128 <__lshift>
 8007e52:	4680      	mov	r8, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f43f ae46 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007e5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	464a      	mov	r2, r9
 8007e60:	f003 f9ea 	bl	800b238 <__mdiff>
 8007e64:	4604      	mov	r4, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f ae3d 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007e6c:	68c3      	ldr	r3, [r0, #12]
 8007e6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e70:	2300      	movs	r3, #0
 8007e72:	60c3      	str	r3, [r0, #12]
 8007e74:	4641      	mov	r1, r8
 8007e76:	f003 f9c3 	bl	800b200 <__mcmp>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	da46      	bge.n	8007f0c <_strtod_l+0x864>
 8007e7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e80:	ea53 030a 	orrs.w	r3, r3, sl
 8007e84:	d16c      	bne.n	8007f60 <_strtod_l+0x8b8>
 8007e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d168      	bne.n	8007f60 <_strtod_l+0x8b8>
 8007e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e92:	0d1b      	lsrs	r3, r3, #20
 8007e94:	051b      	lsls	r3, r3, #20
 8007e96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e9a:	d961      	bls.n	8007f60 <_strtod_l+0x8b8>
 8007e9c:	6963      	ldr	r3, [r4, #20]
 8007e9e:	b913      	cbnz	r3, 8007ea6 <_strtod_l+0x7fe>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	dd5c      	ble.n	8007f60 <_strtod_l+0x8b8>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	9805      	ldr	r0, [sp, #20]
 8007eac:	f003 f93c 	bl	800b128 <__lshift>
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f003 f9a4 	bl	800b200 <__mcmp>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dd51      	ble.n	8007f60 <_strtod_l+0x8b8>
 8007ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ec0:	9a08      	ldr	r2, [sp, #32]
 8007ec2:	0d1b      	lsrs	r3, r3, #20
 8007ec4:	051b      	lsls	r3, r3, #20
 8007ec6:	2a00      	cmp	r2, #0
 8007ec8:	d06b      	beq.n	8007fa2 <_strtod_l+0x8fa>
 8007eca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ece:	d868      	bhi.n	8007fa2 <_strtod_l+0x8fa>
 8007ed0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007ed4:	f67f ae9d 	bls.w	8007c12 <_strtod_l+0x56a>
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f04 <_strtod_l+0x85c>)
 8007eda:	4650      	mov	r0, sl
 8007edc:	4659      	mov	r1, fp
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f7f8 fbb2 	bl	8000648 <__aeabi_dmul>
 8007ee4:	4b08      	ldr	r3, [pc, #32]	@ (8007f08 <_strtod_l+0x860>)
 8007ee6:	400b      	ands	r3, r1
 8007ee8:	4682      	mov	sl, r0
 8007eea:	468b      	mov	fp, r1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f47f ae05 	bne.w	8007afc <_strtod_l+0x454>
 8007ef2:	9a05      	ldr	r2, [sp, #20]
 8007ef4:	2322      	movs	r3, #34	@ 0x22
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e600      	b.n	8007afc <_strtod_l+0x454>
 8007efa:	bf00      	nop
 8007efc:	0800c140 	.word	0x0800c140
 8007f00:	fffffc02 	.word	0xfffffc02
 8007f04:	39500000 	.word	0x39500000
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f10:	d165      	bne.n	8007fde <_strtod_l+0x936>
 8007f12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f18:	b35a      	cbz	r2, 8007f72 <_strtod_l+0x8ca>
 8007f1a:	4a9f      	ldr	r2, [pc, #636]	@ (8008198 <_strtod_l+0xaf0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d12b      	bne.n	8007f78 <_strtod_l+0x8d0>
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	4651      	mov	r1, sl
 8007f24:	b303      	cbz	r3, 8007f68 <_strtod_l+0x8c0>
 8007f26:	4b9d      	ldr	r3, [pc, #628]	@ (800819c <_strtod_l+0xaf4>)
 8007f28:	465a      	mov	r2, fp
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007f30:	f04f 32ff 	mov.w	r2, #4294967295
 8007f34:	d81b      	bhi.n	8007f6e <_strtod_l+0x8c6>
 8007f36:	0d1b      	lsrs	r3, r3, #20
 8007f38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	4299      	cmp	r1, r3
 8007f42:	d119      	bne.n	8007f78 <_strtod_l+0x8d0>
 8007f44:	4b96      	ldr	r3, [pc, #600]	@ (80081a0 <_strtod_l+0xaf8>)
 8007f46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d102      	bne.n	8007f52 <_strtod_l+0x8aa>
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	f43f adca 	beq.w	8007ae6 <_strtod_l+0x43e>
 8007f52:	4b92      	ldr	r3, [pc, #584]	@ (800819c <_strtod_l+0xaf4>)
 8007f54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f56:	401a      	ands	r2, r3
 8007f58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f5c:	f04f 0a00 	mov.w	sl, #0
 8007f60:	9b08      	ldr	r3, [sp, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1b8      	bne.n	8007ed8 <_strtod_l+0x830>
 8007f66:	e5c9      	b.n	8007afc <_strtod_l+0x454>
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6c:	e7e8      	b.n	8007f40 <_strtod_l+0x898>
 8007f6e:	4613      	mov	r3, r2
 8007f70:	e7e6      	b.n	8007f40 <_strtod_l+0x898>
 8007f72:	ea53 030a 	orrs.w	r3, r3, sl
 8007f76:	d0a1      	beq.n	8007ebc <_strtod_l+0x814>
 8007f78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f7a:	b1db      	cbz	r3, 8007fb4 <_strtod_l+0x90c>
 8007f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f7e:	4213      	tst	r3, r2
 8007f80:	d0ee      	beq.n	8007f60 <_strtod_l+0x8b8>
 8007f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f84:	9a08      	ldr	r2, [sp, #32]
 8007f86:	4650      	mov	r0, sl
 8007f88:	4659      	mov	r1, fp
 8007f8a:	b1bb      	cbz	r3, 8007fbc <_strtod_l+0x914>
 8007f8c:	f7ff fb6e 	bl	800766c <sulp>
 8007f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f94:	ec53 2b10 	vmov	r2, r3, d0
 8007f98:	f7f8 f9a0 	bl	80002dc <__adddf3>
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	e7de      	b.n	8007f60 <_strtod_l+0x8b8>
 8007fa2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007fa6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007faa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fae:	f04f 3aff 	mov.w	sl, #4294967295
 8007fb2:	e7d5      	b.n	8007f60 <_strtod_l+0x8b8>
 8007fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fb6:	ea13 0f0a 	tst.w	r3, sl
 8007fba:	e7e1      	b.n	8007f80 <_strtod_l+0x8d8>
 8007fbc:	f7ff fb56 	bl	800766c <sulp>
 8007fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fc4:	ec53 2b10 	vmov	r2, r3, d0
 8007fc8:	f7f8 f986 	bl	80002d8 <__aeabi_dsub>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	468b      	mov	fp, r1
 8007fd4:	f7f8 fda0 	bl	8000b18 <__aeabi_dcmpeq>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0c1      	beq.n	8007f60 <_strtod_l+0x8b8>
 8007fdc:	e619      	b.n	8007c12 <_strtod_l+0x56a>
 8007fde:	4641      	mov	r1, r8
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f003 fa85 	bl	800b4f0 <__ratio>
 8007fe6:	ec57 6b10 	vmov	r6, r7, d0
 8007fea:	2200      	movs	r2, #0
 8007fec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fda4 	bl	8000b40 <__aeabi_dcmple>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d06f      	beq.n	80080dc <_strtod_l+0xa34>
 8007ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d17a      	bne.n	80080f8 <_strtod_l+0xa50>
 8008002:	f1ba 0f00 	cmp.w	sl, #0
 8008006:	d158      	bne.n	80080ba <_strtod_l+0xa12>
 8008008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800800e:	2b00      	cmp	r3, #0
 8008010:	d15a      	bne.n	80080c8 <_strtod_l+0xa20>
 8008012:	4b64      	ldr	r3, [pc, #400]	@ (80081a4 <_strtod_l+0xafc>)
 8008014:	2200      	movs	r2, #0
 8008016:	4630      	mov	r0, r6
 8008018:	4639      	mov	r1, r7
 800801a:	f7f8 fd87 	bl	8000b2c <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d159      	bne.n	80080d6 <_strtod_l+0xa2e>
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	4b60      	ldr	r3, [pc, #384]	@ (80081a8 <_strtod_l+0xb00>)
 8008028:	2200      	movs	r2, #0
 800802a:	f7f8 fb0d 	bl	8000648 <__aeabi_dmul>
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008036:	9606      	str	r6, [sp, #24]
 8008038:	9307      	str	r3, [sp, #28]
 800803a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800803e:	4d57      	ldr	r5, [pc, #348]	@ (800819c <_strtod_l+0xaf4>)
 8008040:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008046:	401d      	ands	r5, r3
 8008048:	4b58      	ldr	r3, [pc, #352]	@ (80081ac <_strtod_l+0xb04>)
 800804a:	429d      	cmp	r5, r3
 800804c:	f040 80b2 	bne.w	80081b4 <_strtod_l+0xb0c>
 8008050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008052:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008056:	ec4b ab10 	vmov	d0, sl, fp
 800805a:	f003 f981 	bl	800b360 <__ulp>
 800805e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008062:	ec51 0b10 	vmov	r0, r1, d0
 8008066:	f7f8 faef 	bl	8000648 <__aeabi_dmul>
 800806a:	4652      	mov	r2, sl
 800806c:	465b      	mov	r3, fp
 800806e:	f7f8 f935 	bl	80002dc <__adddf3>
 8008072:	460b      	mov	r3, r1
 8008074:	4949      	ldr	r1, [pc, #292]	@ (800819c <_strtod_l+0xaf4>)
 8008076:	4a4e      	ldr	r2, [pc, #312]	@ (80081b0 <_strtod_l+0xb08>)
 8008078:	4019      	ands	r1, r3
 800807a:	4291      	cmp	r1, r2
 800807c:	4682      	mov	sl, r0
 800807e:	d942      	bls.n	8008106 <_strtod_l+0xa5e>
 8008080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008082:	4b47      	ldr	r3, [pc, #284]	@ (80081a0 <_strtod_l+0xaf8>)
 8008084:	429a      	cmp	r2, r3
 8008086:	d103      	bne.n	8008090 <_strtod_l+0x9e8>
 8008088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800808a:	3301      	adds	r3, #1
 800808c:	f43f ad2b 	beq.w	8007ae6 <_strtod_l+0x43e>
 8008090:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80081a0 <_strtod_l+0xaf8>
 8008094:	f04f 3aff 	mov.w	sl, #4294967295
 8008098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800809a:	9805      	ldr	r0, [sp, #20]
 800809c:	f002 fe2c 	bl	800acf8 <_Bfree>
 80080a0:	9805      	ldr	r0, [sp, #20]
 80080a2:	4649      	mov	r1, r9
 80080a4:	f002 fe28 	bl	800acf8 <_Bfree>
 80080a8:	9805      	ldr	r0, [sp, #20]
 80080aa:	4641      	mov	r1, r8
 80080ac:	f002 fe24 	bl	800acf8 <_Bfree>
 80080b0:	9805      	ldr	r0, [sp, #20]
 80080b2:	4621      	mov	r1, r4
 80080b4:	f002 fe20 	bl	800acf8 <_Bfree>
 80080b8:	e618      	b.n	8007cec <_strtod_l+0x644>
 80080ba:	f1ba 0f01 	cmp.w	sl, #1
 80080be:	d103      	bne.n	80080c8 <_strtod_l+0xa20>
 80080c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f43f ada5 	beq.w	8007c12 <_strtod_l+0x56a>
 80080c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008178 <_strtod_l+0xad0>
 80080cc:	4f35      	ldr	r7, [pc, #212]	@ (80081a4 <_strtod_l+0xafc>)
 80080ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080d2:	2600      	movs	r6, #0
 80080d4:	e7b1      	b.n	800803a <_strtod_l+0x992>
 80080d6:	4f34      	ldr	r7, [pc, #208]	@ (80081a8 <_strtod_l+0xb00>)
 80080d8:	2600      	movs	r6, #0
 80080da:	e7aa      	b.n	8008032 <_strtod_l+0x98a>
 80080dc:	4b32      	ldr	r3, [pc, #200]	@ (80081a8 <_strtod_l+0xb00>)
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 fab0 	bl	8000648 <__aeabi_dmul>
 80080e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ea:	4606      	mov	r6, r0
 80080ec:	460f      	mov	r7, r1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d09f      	beq.n	8008032 <_strtod_l+0x98a>
 80080f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080f6:	e7a0      	b.n	800803a <_strtod_l+0x992>
 80080f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008180 <_strtod_l+0xad8>
 80080fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008100:	ec57 6b17 	vmov	r6, r7, d7
 8008104:	e799      	b.n	800803a <_strtod_l+0x992>
 8008106:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1c1      	bne.n	8008098 <_strtod_l+0x9f0>
 8008114:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	051b      	lsls	r3, r3, #20
 800811c:	429d      	cmp	r5, r3
 800811e:	d1bb      	bne.n	8008098 <_strtod_l+0x9f0>
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fdf0 	bl	8000d08 <__aeabi_d2lz>
 8008128:	f7f8 fa60 	bl	80005ec <__aeabi_l2d>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 f8d0 	bl	80002d8 <__aeabi_dsub>
 8008138:	460b      	mov	r3, r1
 800813a:	4602      	mov	r2, r0
 800813c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008140:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008146:	ea46 060a 	orr.w	r6, r6, sl
 800814a:	431e      	orrs	r6, r3
 800814c:	d06f      	beq.n	800822e <_strtod_l+0xb86>
 800814e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008188 <_strtod_l+0xae0>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 fcea 	bl	8000b2c <__aeabi_dcmplt>
 8008158:	2800      	cmp	r0, #0
 800815a:	f47f accf 	bne.w	8007afc <_strtod_l+0x454>
 800815e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008190 <_strtod_l+0xae8>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008168:	f7f8 fcfe 	bl	8000b68 <__aeabi_dcmpgt>
 800816c:	2800      	cmp	r0, #0
 800816e:	d093      	beq.n	8008098 <_strtod_l+0x9f0>
 8008170:	e4c4      	b.n	8007afc <_strtod_l+0x454>
 8008172:	bf00      	nop
 8008174:	f3af 8000 	nop.w
 8008178:	00000000 	.word	0x00000000
 800817c:	bff00000 	.word	0xbff00000
 8008180:	00000000 	.word	0x00000000
 8008184:	3ff00000 	.word	0x3ff00000
 8008188:	94a03595 	.word	0x94a03595
 800818c:	3fdfffff 	.word	0x3fdfffff
 8008190:	35afe535 	.word	0x35afe535
 8008194:	3fe00000 	.word	0x3fe00000
 8008198:	000fffff 	.word	0x000fffff
 800819c:	7ff00000 	.word	0x7ff00000
 80081a0:	7fefffff 	.word	0x7fefffff
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	3fe00000 	.word	0x3fe00000
 80081ac:	7fe00000 	.word	0x7fe00000
 80081b0:	7c9fffff 	.word	0x7c9fffff
 80081b4:	9b08      	ldr	r3, [sp, #32]
 80081b6:	b323      	cbz	r3, 8008202 <_strtod_l+0xb5a>
 80081b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80081bc:	d821      	bhi.n	8008202 <_strtod_l+0xb5a>
 80081be:	a328      	add	r3, pc, #160	@ (adr r3, 8008260 <_strtod_l+0xbb8>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fcba 	bl	8000b40 <__aeabi_dcmple>
 80081cc:	b1a0      	cbz	r0, 80081f8 <_strtod_l+0xb50>
 80081ce:	4639      	mov	r1, r7
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7f8 fd11 	bl	8000bf8 <__aeabi_d2uiz>
 80081d6:	2801      	cmp	r0, #1
 80081d8:	bf38      	it	cc
 80081da:	2001      	movcc	r0, #1
 80081dc:	f7f8 f9ba 	bl	8000554 <__aeabi_ui2d>
 80081e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e2:	4606      	mov	r6, r0
 80081e4:	460f      	mov	r7, r1
 80081e6:	b9fb      	cbnz	r3, 8008228 <_strtod_l+0xb80>
 80081e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80081ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80081f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80081fe:	1b5b      	subs	r3, r3, r5
 8008200:	9311      	str	r3, [sp, #68]	@ 0x44
 8008202:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008206:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800820a:	f003 f8a9 	bl	800b360 <__ulp>
 800820e:	4650      	mov	r0, sl
 8008210:	ec53 2b10 	vmov	r2, r3, d0
 8008214:	4659      	mov	r1, fp
 8008216:	f7f8 fa17 	bl	8000648 <__aeabi_dmul>
 800821a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800821e:	f7f8 f85d 	bl	80002dc <__adddf3>
 8008222:	4682      	mov	sl, r0
 8008224:	468b      	mov	fp, r1
 8008226:	e770      	b.n	800810a <_strtod_l+0xa62>
 8008228:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800822c:	e7e0      	b.n	80081f0 <_strtod_l+0xb48>
 800822e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008268 <_strtod_l+0xbc0>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 fc7a 	bl	8000b2c <__aeabi_dcmplt>
 8008238:	e798      	b.n	800816c <_strtod_l+0xac4>
 800823a:	2300      	movs	r3, #0
 800823c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800823e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008240:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f7ff ba6d 	b.w	8007722 <_strtod_l+0x7a>
 8008248:	2a65      	cmp	r2, #101	@ 0x65
 800824a:	f43f ab66 	beq.w	800791a <_strtod_l+0x272>
 800824e:	2a45      	cmp	r2, #69	@ 0x45
 8008250:	f43f ab63 	beq.w	800791a <_strtod_l+0x272>
 8008254:	2301      	movs	r3, #1
 8008256:	f7ff bb9e 	b.w	8007996 <_strtod_l+0x2ee>
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w
 8008260:	ffc00000 	.word	0xffc00000
 8008264:	41dfffff 	.word	0x41dfffff
 8008268:	94a03595 	.word	0x94a03595
 800826c:	3fcfffff 	.word	0x3fcfffff

08008270 <_strtod_r>:
 8008270:	4b01      	ldr	r3, [pc, #4]	@ (8008278 <_strtod_r+0x8>)
 8008272:	f7ff ba19 	b.w	80076a8 <_strtod_l>
 8008276:	bf00      	nop
 8008278:	20000024 	.word	0x20000024

0800827c <strtof>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8008340 <strtof+0xc4>
 8008284:	4b29      	ldr	r3, [pc, #164]	@ (800832c <strtof+0xb0>)
 8008286:	460a      	mov	r2, r1
 8008288:	ed2d 8b02 	vpush	{d8}
 800828c:	4601      	mov	r1, r0
 800828e:	f8d8 0000 	ldr.w	r0, [r8]
 8008292:	f7ff fa09 	bl	80076a8 <_strtod_l>
 8008296:	ec55 4b10 	vmov	r4, r5, d0
 800829a:	4622      	mov	r2, r4
 800829c:	462b      	mov	r3, r5
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 fc6b 	bl	8000b7c <__aeabi_dcmpun>
 80082a6:	b190      	cbz	r0, 80082ce <strtof+0x52>
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	4821      	ldr	r0, [pc, #132]	@ (8008330 <strtof+0xb4>)
 80082ac:	da09      	bge.n	80082c2 <strtof+0x46>
 80082ae:	f001 fa43 	bl	8009738 <nanf>
 80082b2:	eeb1 8a40 	vneg.f32	s16, s0
 80082b6:	eeb0 0a48 	vmov.f32	s0, s16
 80082ba:	ecbd 8b02 	vpop	{d8}
 80082be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c2:	ecbd 8b02 	vpop	{d8}
 80082c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	f001 ba35 	b.w	8009738 <nanf>
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f8 fcb1 	bl	8000c38 <__aeabi_d2f>
 80082d6:	ee08 0a10 	vmov	s16, r0
 80082da:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8008334 <strtof+0xb8>
 80082de:	eeb0 7ac8 	vabs.f32	s14, s16
 80082e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80082e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ea:	dd11      	ble.n	8008310 <strtof+0x94>
 80082ec:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80082f0:	4b11      	ldr	r3, [pc, #68]	@ (8008338 <strtof+0xbc>)
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	4620      	mov	r0, r4
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 fc3f 	bl	8000b7c <__aeabi_dcmpun>
 80082fe:	b980      	cbnz	r0, 8008322 <strtof+0xa6>
 8008300:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <strtof+0xbc>)
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	4620      	mov	r0, r4
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 fc19 	bl	8000b40 <__aeabi_dcmple>
 800830e:	b940      	cbnz	r0, 8008322 <strtof+0xa6>
 8008310:	ee18 3a10 	vmov	r3, s16
 8008314:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008318:	d1cd      	bne.n	80082b6 <strtof+0x3a>
 800831a:	4b08      	ldr	r3, [pc, #32]	@ (800833c <strtof+0xc0>)
 800831c:	402b      	ands	r3, r5
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0c9      	beq.n	80082b6 <strtof+0x3a>
 8008322:	f8d8 3000 	ldr.w	r3, [r8]
 8008326:	2222      	movs	r2, #34	@ 0x22
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e7c4      	b.n	80082b6 <strtof+0x3a>
 800832c:	20000024 	.word	0x20000024
 8008330:	0800c53d 	.word	0x0800c53d
 8008334:	7f7fffff 	.word	0x7f7fffff
 8008338:	7fefffff 	.word	0x7fefffff
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	20000190 	.word	0x20000190

08008344 <__cvt>:
 8008344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	ec57 6b10 	vmov	r6, r7, d0
 800834c:	2f00      	cmp	r7, #0
 800834e:	460c      	mov	r4, r1
 8008350:	4619      	mov	r1, r3
 8008352:	463b      	mov	r3, r7
 8008354:	bfbb      	ittet	lt
 8008356:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800835a:	461f      	movlt	r7, r3
 800835c:	2300      	movge	r3, #0
 800835e:	232d      	movlt	r3, #45	@ 0x2d
 8008360:	700b      	strb	r3, [r1, #0]
 8008362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008364:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008368:	4691      	mov	r9, r2
 800836a:	f023 0820 	bic.w	r8, r3, #32
 800836e:	bfbc      	itt	lt
 8008370:	4632      	movlt	r2, r6
 8008372:	4616      	movlt	r6, r2
 8008374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008378:	d005      	beq.n	8008386 <__cvt+0x42>
 800837a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800837e:	d100      	bne.n	8008382 <__cvt+0x3e>
 8008380:	3401      	adds	r4, #1
 8008382:	2102      	movs	r1, #2
 8008384:	e000      	b.n	8008388 <__cvt+0x44>
 8008386:	2103      	movs	r1, #3
 8008388:	ab03      	add	r3, sp, #12
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	ab02      	add	r3, sp, #8
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	ec47 6b10 	vmov	d0, r6, r7
 8008394:	4653      	mov	r3, sl
 8008396:	4622      	mov	r2, r4
 8008398:	f001 fa5e 	bl	8009858 <_dtoa_r>
 800839c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083a0:	4605      	mov	r5, r0
 80083a2:	d119      	bne.n	80083d8 <__cvt+0x94>
 80083a4:	f019 0f01 	tst.w	r9, #1
 80083a8:	d00e      	beq.n	80083c8 <__cvt+0x84>
 80083aa:	eb00 0904 	add.w	r9, r0, r4
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	4630      	mov	r0, r6
 80083b4:	4639      	mov	r1, r7
 80083b6:	f7f8 fbaf 	bl	8000b18 <__aeabi_dcmpeq>
 80083ba:	b108      	cbz	r0, 80083c0 <__cvt+0x7c>
 80083bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80083c0:	2230      	movs	r2, #48	@ 0x30
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	454b      	cmp	r3, r9
 80083c6:	d31e      	bcc.n	8008406 <__cvt+0xc2>
 80083c8:	9b03      	ldr	r3, [sp, #12]
 80083ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083cc:	1b5b      	subs	r3, r3, r5
 80083ce:	4628      	mov	r0, r5
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	b004      	add	sp, #16
 80083d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083dc:	eb00 0904 	add.w	r9, r0, r4
 80083e0:	d1e5      	bne.n	80083ae <__cvt+0x6a>
 80083e2:	7803      	ldrb	r3, [r0, #0]
 80083e4:	2b30      	cmp	r3, #48	@ 0x30
 80083e6:	d10a      	bne.n	80083fe <__cvt+0xba>
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f8 fb92 	bl	8000b18 <__aeabi_dcmpeq>
 80083f4:	b918      	cbnz	r0, 80083fe <__cvt+0xba>
 80083f6:	f1c4 0401 	rsb	r4, r4, #1
 80083fa:	f8ca 4000 	str.w	r4, [sl]
 80083fe:	f8da 3000 	ldr.w	r3, [sl]
 8008402:	4499      	add	r9, r3
 8008404:	e7d3      	b.n	80083ae <__cvt+0x6a>
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	9103      	str	r1, [sp, #12]
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e7d9      	b.n	80083c2 <__cvt+0x7e>

0800840e <__exponent>:
 800840e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008410:	2900      	cmp	r1, #0
 8008412:	bfba      	itte	lt
 8008414:	4249      	neglt	r1, r1
 8008416:	232d      	movlt	r3, #45	@ 0x2d
 8008418:	232b      	movge	r3, #43	@ 0x2b
 800841a:	2909      	cmp	r1, #9
 800841c:	7002      	strb	r2, [r0, #0]
 800841e:	7043      	strb	r3, [r0, #1]
 8008420:	dd29      	ble.n	8008476 <__exponent+0x68>
 8008422:	f10d 0307 	add.w	r3, sp, #7
 8008426:	461d      	mov	r5, r3
 8008428:	270a      	movs	r7, #10
 800842a:	461a      	mov	r2, r3
 800842c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008430:	fb07 1416 	mls	r4, r7, r6, r1
 8008434:	3430      	adds	r4, #48	@ 0x30
 8008436:	f802 4c01 	strb.w	r4, [r2, #-1]
 800843a:	460c      	mov	r4, r1
 800843c:	2c63      	cmp	r4, #99	@ 0x63
 800843e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008442:	4631      	mov	r1, r6
 8008444:	dcf1      	bgt.n	800842a <__exponent+0x1c>
 8008446:	3130      	adds	r1, #48	@ 0x30
 8008448:	1e94      	subs	r4, r2, #2
 800844a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800844e:	1c41      	adds	r1, r0, #1
 8008450:	4623      	mov	r3, r4
 8008452:	42ab      	cmp	r3, r5
 8008454:	d30a      	bcc.n	800846c <__exponent+0x5e>
 8008456:	f10d 0309 	add.w	r3, sp, #9
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	42ac      	cmp	r4, r5
 800845e:	bf88      	it	hi
 8008460:	2300      	movhi	r3, #0
 8008462:	3302      	adds	r3, #2
 8008464:	4403      	add	r3, r0
 8008466:	1a18      	subs	r0, r3, r0
 8008468:	b003      	add	sp, #12
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008470:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008474:	e7ed      	b.n	8008452 <__exponent+0x44>
 8008476:	2330      	movs	r3, #48	@ 0x30
 8008478:	3130      	adds	r1, #48	@ 0x30
 800847a:	7083      	strb	r3, [r0, #2]
 800847c:	70c1      	strb	r1, [r0, #3]
 800847e:	1d03      	adds	r3, r0, #4
 8008480:	e7f1      	b.n	8008466 <__exponent+0x58>
	...

08008484 <_printf_float>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	b08d      	sub	sp, #52	@ 0x34
 800848a:	460c      	mov	r4, r1
 800848c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008490:	4616      	mov	r6, r2
 8008492:	461f      	mov	r7, r3
 8008494:	4605      	mov	r5, r0
 8008496:	f001 f8c1 	bl	800961c <_localeconv_r>
 800849a:	6803      	ldr	r3, [r0, #0]
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f7 ff0e 	bl	80002c0 <strlen>
 80084a4:	2300      	movs	r3, #0
 80084a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	9005      	str	r0, [sp, #20]
 80084ae:	3307      	adds	r3, #7
 80084b0:	f023 0307 	bic.w	r3, r3, #7
 80084b4:	f103 0208 	add.w	r2, r3, #8
 80084b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084bc:	f8d4 b000 	ldr.w	fp, [r4]
 80084c0:	f8c8 2000 	str.w	r2, [r8]
 80084c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80084d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084da:	4b9c      	ldr	r3, [pc, #624]	@ (800874c <_printf_float+0x2c8>)
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	f7f8 fb4c 	bl	8000b7c <__aeabi_dcmpun>
 80084e4:	bb70      	cbnz	r0, 8008544 <_printf_float+0xc0>
 80084e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ea:	4b98      	ldr	r3, [pc, #608]	@ (800874c <_printf_float+0x2c8>)
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	f7f8 fb26 	bl	8000b40 <__aeabi_dcmple>
 80084f4:	bb30      	cbnz	r0, 8008544 <_printf_float+0xc0>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 fb15 	bl	8000b2c <__aeabi_dcmplt>
 8008502:	b110      	cbz	r0, 800850a <_printf_float+0x86>
 8008504:	232d      	movs	r3, #45	@ 0x2d
 8008506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800850a:	4a91      	ldr	r2, [pc, #580]	@ (8008750 <_printf_float+0x2cc>)
 800850c:	4b91      	ldr	r3, [pc, #580]	@ (8008754 <_printf_float+0x2d0>)
 800850e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008512:	bf94      	ite	ls
 8008514:	4690      	movls	r8, r2
 8008516:	4698      	movhi	r8, r3
 8008518:	2303      	movs	r3, #3
 800851a:	6123      	str	r3, [r4, #16]
 800851c:	f02b 0304 	bic.w	r3, fp, #4
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	f04f 0900 	mov.w	r9, #0
 8008526:	9700      	str	r7, [sp, #0]
 8008528:	4633      	mov	r3, r6
 800852a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f000 f9d2 	bl	80088d8 <_printf_common>
 8008534:	3001      	adds	r0, #1
 8008536:	f040 808d 	bne.w	8008654 <_printf_float+0x1d0>
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	b00d      	add	sp, #52	@ 0x34
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	4642      	mov	r2, r8
 8008546:	464b      	mov	r3, r9
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 fb16 	bl	8000b7c <__aeabi_dcmpun>
 8008550:	b140      	cbz	r0, 8008564 <_printf_float+0xe0>
 8008552:	464b      	mov	r3, r9
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfbc      	itt	lt
 8008558:	232d      	movlt	r3, #45	@ 0x2d
 800855a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800855e:	4a7e      	ldr	r2, [pc, #504]	@ (8008758 <_printf_float+0x2d4>)
 8008560:	4b7e      	ldr	r3, [pc, #504]	@ (800875c <_printf_float+0x2d8>)
 8008562:	e7d4      	b.n	800850e <_printf_float+0x8a>
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800856a:	9206      	str	r2, [sp, #24]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	d13b      	bne.n	80085e8 <_printf_float+0x164>
 8008570:	2306      	movs	r3, #6
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008578:	2300      	movs	r3, #0
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008580:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008584:	ab09      	add	r3, sp, #36	@ 0x24
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	ec49 8b10 	vmov	d0, r8, r9
 800858e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008592:	4628      	mov	r0, r5
 8008594:	f7ff fed6 	bl	8008344 <__cvt>
 8008598:	9b06      	ldr	r3, [sp, #24]
 800859a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800859c:	2b47      	cmp	r3, #71	@ 0x47
 800859e:	4680      	mov	r8, r0
 80085a0:	d129      	bne.n	80085f6 <_printf_float+0x172>
 80085a2:	1cc8      	adds	r0, r1, #3
 80085a4:	db02      	blt.n	80085ac <_printf_float+0x128>
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	4299      	cmp	r1, r3
 80085aa:	dd41      	ble.n	8008630 <_printf_float+0x1ac>
 80085ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80085b0:	fa5f fa8a 	uxtb.w	sl, sl
 80085b4:	3901      	subs	r1, #1
 80085b6:	4652      	mov	r2, sl
 80085b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80085be:	f7ff ff26 	bl	800840e <__exponent>
 80085c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085c4:	1813      	adds	r3, r2, r0
 80085c6:	2a01      	cmp	r2, #1
 80085c8:	4681      	mov	r9, r0
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	dc02      	bgt.n	80085d4 <_printf_float+0x150>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	07d2      	lsls	r2, r2, #31
 80085d2:	d501      	bpl.n	80085d8 <_printf_float+0x154>
 80085d4:	3301      	adds	r3, #1
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0a2      	beq.n	8008526 <_printf_float+0xa2>
 80085e0:	232d      	movs	r3, #45	@ 0x2d
 80085e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085e6:	e79e      	b.n	8008526 <_printf_float+0xa2>
 80085e8:	9a06      	ldr	r2, [sp, #24]
 80085ea:	2a47      	cmp	r2, #71	@ 0x47
 80085ec:	d1c2      	bne.n	8008574 <_printf_float+0xf0>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1c0      	bne.n	8008574 <_printf_float+0xf0>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7bd      	b.n	8008572 <_printf_float+0xee>
 80085f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085fa:	d9db      	bls.n	80085b4 <_printf_float+0x130>
 80085fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008600:	d118      	bne.n	8008634 <_printf_float+0x1b0>
 8008602:	2900      	cmp	r1, #0
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	dd0b      	ble.n	8008620 <_printf_float+0x19c>
 8008608:	6121      	str	r1, [r4, #16]
 800860a:	b913      	cbnz	r3, 8008612 <_printf_float+0x18e>
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	07d0      	lsls	r0, r2, #31
 8008610:	d502      	bpl.n	8008618 <_printf_float+0x194>
 8008612:	3301      	adds	r3, #1
 8008614:	440b      	add	r3, r1
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	65a1      	str	r1, [r4, #88]	@ 0x58
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	e7db      	b.n	80085d8 <_printf_float+0x154>
 8008620:	b913      	cbnz	r3, 8008628 <_printf_float+0x1a4>
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	07d2      	lsls	r2, r2, #31
 8008626:	d501      	bpl.n	800862c <_printf_float+0x1a8>
 8008628:	3302      	adds	r3, #2
 800862a:	e7f4      	b.n	8008616 <_printf_float+0x192>
 800862c:	2301      	movs	r3, #1
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x192>
 8008630:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	4299      	cmp	r1, r3
 8008638:	db05      	blt.n	8008646 <_printf_float+0x1c2>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6121      	str	r1, [r4, #16]
 800863e:	07d8      	lsls	r0, r3, #31
 8008640:	d5ea      	bpl.n	8008618 <_printf_float+0x194>
 8008642:	1c4b      	adds	r3, r1, #1
 8008644:	e7e7      	b.n	8008616 <_printf_float+0x192>
 8008646:	2900      	cmp	r1, #0
 8008648:	bfd4      	ite	le
 800864a:	f1c1 0202 	rsble	r2, r1, #2
 800864e:	2201      	movgt	r2, #1
 8008650:	4413      	add	r3, r2
 8008652:	e7e0      	b.n	8008616 <_printf_float+0x192>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	055a      	lsls	r2, r3, #21
 8008658:	d407      	bmi.n	800866a <_printf_float+0x1e6>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	4642      	mov	r2, r8
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	d12b      	bne.n	80086c0 <_printf_float+0x23c>
 8008668:	e767      	b.n	800853a <_printf_float+0xb6>
 800866a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800866e:	f240 80dd 	bls.w	800882c <_printf_float+0x3a8>
 8008672:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008676:	2200      	movs	r2, #0
 8008678:	2300      	movs	r3, #0
 800867a:	f7f8 fa4d 	bl	8000b18 <__aeabi_dcmpeq>
 800867e:	2800      	cmp	r0, #0
 8008680:	d033      	beq.n	80086ea <_printf_float+0x266>
 8008682:	4a37      	ldr	r2, [pc, #220]	@ (8008760 <_printf_float+0x2dc>)
 8008684:	2301      	movs	r3, #1
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	f43f af54 	beq.w	800853a <_printf_float+0xb6>
 8008692:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008696:	4543      	cmp	r3, r8
 8008698:	db02      	blt.n	80086a0 <_printf_float+0x21c>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	07d8      	lsls	r0, r3, #31
 800869e:	d50f      	bpl.n	80086c0 <_printf_float+0x23c>
 80086a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	f43f af45 	beq.w	800853a <_printf_float+0xb6>
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80086b8:	f104 0a1a 	add.w	sl, r4, #26
 80086bc:	45c8      	cmp	r8, r9
 80086be:	dc09      	bgt.n	80086d4 <_printf_float+0x250>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	079b      	lsls	r3, r3, #30
 80086c4:	f100 8103 	bmi.w	80088ce <_printf_float+0x44a>
 80086c8:	68e0      	ldr	r0, [r4, #12]
 80086ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086cc:	4298      	cmp	r0, r3
 80086ce:	bfb8      	it	lt
 80086d0:	4618      	movlt	r0, r3
 80086d2:	e734      	b.n	800853e <_printf_float+0xba>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4652      	mov	r2, sl
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f af2b 	beq.w	800853a <_printf_float+0xb6>
 80086e4:	f109 0901 	add.w	r9, r9, #1
 80086e8:	e7e8      	b.n	80086bc <_printf_float+0x238>
 80086ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc39      	bgt.n	8008764 <_printf_float+0x2e0>
 80086f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <_printf_float+0x2dc>)
 80086f2:	2301      	movs	r3, #1
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	f43f af1d 	beq.w	800853a <_printf_float+0xb6>
 8008700:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008704:	ea59 0303 	orrs.w	r3, r9, r3
 8008708:	d102      	bne.n	8008710 <_printf_float+0x28c>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	07d9      	lsls	r1, r3, #31
 800870e:	d5d7      	bpl.n	80086c0 <_printf_float+0x23c>
 8008710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f af0d 	beq.w	800853a <_printf_float+0xb6>
 8008720:	f04f 0a00 	mov.w	sl, #0
 8008724:	f104 0b1a 	add.w	fp, r4, #26
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	425b      	negs	r3, r3
 800872c:	4553      	cmp	r3, sl
 800872e:	dc01      	bgt.n	8008734 <_printf_float+0x2b0>
 8008730:	464b      	mov	r3, r9
 8008732:	e793      	b.n	800865c <_printf_float+0x1d8>
 8008734:	2301      	movs	r3, #1
 8008736:	465a      	mov	r2, fp
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	f43f aefb 	beq.w	800853a <_printf_float+0xb6>
 8008744:	f10a 0a01 	add.w	sl, sl, #1
 8008748:	e7ee      	b.n	8008728 <_printf_float+0x2a4>
 800874a:	bf00      	nop
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	0800c168 	.word	0x0800c168
 8008754:	0800c16c 	.word	0x0800c16c
 8008758:	0800c170 	.word	0x0800c170
 800875c:	0800c174 	.word	0x0800c174
 8008760:	0800c178 	.word	0x0800c178
 8008764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008766:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800876a:	4553      	cmp	r3, sl
 800876c:	bfa8      	it	ge
 800876e:	4653      	movge	r3, sl
 8008770:	2b00      	cmp	r3, #0
 8008772:	4699      	mov	r9, r3
 8008774:	dc36      	bgt.n	80087e4 <_printf_float+0x360>
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800877e:	f104 021a 	add.w	r2, r4, #26
 8008782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008784:	9306      	str	r3, [sp, #24]
 8008786:	eba3 0309 	sub.w	r3, r3, r9
 800878a:	455b      	cmp	r3, fp
 800878c:	dc31      	bgt.n	80087f2 <_printf_float+0x36e>
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	459a      	cmp	sl, r3
 8008792:	dc3a      	bgt.n	800880a <_printf_float+0x386>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	07da      	lsls	r2, r3, #31
 8008798:	d437      	bmi.n	800880a <_printf_float+0x386>
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	ebaa 0903 	sub.w	r9, sl, r3
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	ebaa 0303 	sub.w	r3, sl, r3
 80087a6:	4599      	cmp	r9, r3
 80087a8:	bfa8      	it	ge
 80087aa:	4699      	movge	r9, r3
 80087ac:	f1b9 0f00 	cmp.w	r9, #0
 80087b0:	dc33      	bgt.n	800881a <_printf_float+0x396>
 80087b2:	f04f 0800 	mov.w	r8, #0
 80087b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ba:	f104 0b1a 	add.w	fp, r4, #26
 80087be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c0:	ebaa 0303 	sub.w	r3, sl, r3
 80087c4:	eba3 0309 	sub.w	r3, r3, r9
 80087c8:	4543      	cmp	r3, r8
 80087ca:	f77f af79 	ble.w	80086c0 <_printf_float+0x23c>
 80087ce:	2301      	movs	r3, #1
 80087d0:	465a      	mov	r2, fp
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b8      	blx	r7
 80087d8:	3001      	adds	r0, #1
 80087da:	f43f aeae 	beq.w	800853a <_printf_float+0xb6>
 80087de:	f108 0801 	add.w	r8, r8, #1
 80087e2:	e7ec      	b.n	80087be <_printf_float+0x33a>
 80087e4:	4642      	mov	r2, r8
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b8      	blx	r7
 80087ec:	3001      	adds	r0, #1
 80087ee:	d1c2      	bne.n	8008776 <_printf_float+0x2f2>
 80087f0:	e6a3      	b.n	800853a <_printf_float+0xb6>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	9206      	str	r2, [sp, #24]
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae9c 	beq.w	800853a <_printf_float+0xb6>
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	f10b 0b01 	add.w	fp, fp, #1
 8008808:	e7bb      	b.n	8008782 <_printf_float+0x2fe>
 800880a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d1c0      	bne.n	800879a <_printf_float+0x316>
 8008818:	e68f      	b.n	800853a <_printf_float+0xb6>
 800881a:	9a06      	ldr	r2, [sp, #24]
 800881c:	464b      	mov	r3, r9
 800881e:	4442      	add	r2, r8
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	d1c3      	bne.n	80087b2 <_printf_float+0x32e>
 800882a:	e686      	b.n	800853a <_printf_float+0xb6>
 800882c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008830:	f1ba 0f01 	cmp.w	sl, #1
 8008834:	dc01      	bgt.n	800883a <_printf_float+0x3b6>
 8008836:	07db      	lsls	r3, r3, #31
 8008838:	d536      	bpl.n	80088a8 <_printf_float+0x424>
 800883a:	2301      	movs	r3, #1
 800883c:	4642      	mov	r2, r8
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	f43f ae78 	beq.w	800853a <_printf_float+0xb6>
 800884a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae70 	beq.w	800853a <_printf_float+0xb6>
 800885a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800885e:	2200      	movs	r2, #0
 8008860:	2300      	movs	r3, #0
 8008862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008866:	f7f8 f957 	bl	8000b18 <__aeabi_dcmpeq>
 800886a:	b9c0      	cbnz	r0, 800889e <_printf_float+0x41a>
 800886c:	4653      	mov	r3, sl
 800886e:	f108 0201 	add.w	r2, r8, #1
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47b8      	blx	r7
 8008878:	3001      	adds	r0, #1
 800887a:	d10c      	bne.n	8008896 <_printf_float+0x412>
 800887c:	e65d      	b.n	800853a <_printf_float+0xb6>
 800887e:	2301      	movs	r3, #1
 8008880:	465a      	mov	r2, fp
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	f43f ae56 	beq.w	800853a <_printf_float+0xb6>
 800888e:	f108 0801 	add.w	r8, r8, #1
 8008892:	45d0      	cmp	r8, sl
 8008894:	dbf3      	blt.n	800887e <_printf_float+0x3fa>
 8008896:	464b      	mov	r3, r9
 8008898:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800889c:	e6df      	b.n	800865e <_printf_float+0x1da>
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	f104 0b1a 	add.w	fp, r4, #26
 80088a6:	e7f4      	b.n	8008892 <_printf_float+0x40e>
 80088a8:	2301      	movs	r3, #1
 80088aa:	4642      	mov	r2, r8
 80088ac:	e7e1      	b.n	8008872 <_printf_float+0x3ee>
 80088ae:	2301      	movs	r3, #1
 80088b0:	464a      	mov	r2, r9
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae3e 	beq.w	800853a <_printf_float+0xb6>
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088c6:	1a5b      	subs	r3, r3, r1
 80088c8:	4543      	cmp	r3, r8
 80088ca:	dcf0      	bgt.n	80088ae <_printf_float+0x42a>
 80088cc:	e6fc      	b.n	80086c8 <_printf_float+0x244>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	f104 0919 	add.w	r9, r4, #25
 80088d6:	e7f4      	b.n	80088c2 <_printf_float+0x43e>

080088d8 <_printf_common>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	4616      	mov	r6, r2
 80088de:	4698      	mov	r8, r3
 80088e0:	688a      	ldr	r2, [r1, #8]
 80088e2:	690b      	ldr	r3, [r1, #16]
 80088e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	bfb8      	it	lt
 80088ec:	4613      	movlt	r3, r2
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088f4:	4607      	mov	r7, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b10a      	cbz	r2, 80088fe <_printf_common+0x26>
 80088fa:	3301      	adds	r3, #1
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	0699      	lsls	r1, r3, #26
 8008902:	bf42      	ittt	mi
 8008904:	6833      	ldrmi	r3, [r6, #0]
 8008906:	3302      	addmi	r3, #2
 8008908:	6033      	strmi	r3, [r6, #0]
 800890a:	6825      	ldr	r5, [r4, #0]
 800890c:	f015 0506 	ands.w	r5, r5, #6
 8008910:	d106      	bne.n	8008920 <_printf_common+0x48>
 8008912:	f104 0a19 	add.w	sl, r4, #25
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	6832      	ldr	r2, [r6, #0]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	42ab      	cmp	r3, r5
 800891e:	dc26      	bgt.n	800896e <_printf_common+0x96>
 8008920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	3b00      	subs	r3, #0
 8008928:	bf18      	it	ne
 800892a:	2301      	movne	r3, #1
 800892c:	0692      	lsls	r2, r2, #26
 800892e:	d42b      	bmi.n	8008988 <_printf_common+0xb0>
 8008930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008934:	4641      	mov	r1, r8
 8008936:	4638      	mov	r0, r7
 8008938:	47c8      	blx	r9
 800893a:	3001      	adds	r0, #1
 800893c:	d01e      	beq.n	800897c <_printf_common+0xa4>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	6922      	ldr	r2, [r4, #16]
 8008942:	f003 0306 	and.w	r3, r3, #6
 8008946:	2b04      	cmp	r3, #4
 8008948:	bf02      	ittt	eq
 800894a:	68e5      	ldreq	r5, [r4, #12]
 800894c:	6833      	ldreq	r3, [r6, #0]
 800894e:	1aed      	subeq	r5, r5, r3
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	bf0c      	ite	eq
 8008954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008958:	2500      	movne	r5, #0
 800895a:	4293      	cmp	r3, r2
 800895c:	bfc4      	itt	gt
 800895e:	1a9b      	subgt	r3, r3, r2
 8008960:	18ed      	addgt	r5, r5, r3
 8008962:	2600      	movs	r6, #0
 8008964:	341a      	adds	r4, #26
 8008966:	42b5      	cmp	r5, r6
 8008968:	d11a      	bne.n	80089a0 <_printf_common+0xc8>
 800896a:	2000      	movs	r0, #0
 800896c:	e008      	b.n	8008980 <_printf_common+0xa8>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4641      	mov	r1, r8
 8008974:	4638      	mov	r0, r7
 8008976:	47c8      	blx	r9
 8008978:	3001      	adds	r0, #1
 800897a:	d103      	bne.n	8008984 <_printf_common+0xac>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008984:	3501      	adds	r5, #1
 8008986:	e7c6      	b.n	8008916 <_printf_common+0x3e>
 8008988:	18e1      	adds	r1, r4, r3
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	2030      	movs	r0, #48	@ 0x30
 800898e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008992:	4422      	add	r2, r4
 8008994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800899c:	3302      	adds	r3, #2
 800899e:	e7c7      	b.n	8008930 <_printf_common+0x58>
 80089a0:	2301      	movs	r3, #1
 80089a2:	4622      	mov	r2, r4
 80089a4:	4641      	mov	r1, r8
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c8      	blx	r9
 80089aa:	3001      	adds	r0, #1
 80089ac:	d0e6      	beq.n	800897c <_printf_common+0xa4>
 80089ae:	3601      	adds	r6, #1
 80089b0:	e7d9      	b.n	8008966 <_printf_common+0x8e>
	...

080089b4 <_printf_i>:
 80089b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	7e0f      	ldrb	r7, [r1, #24]
 80089ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089bc:	2f78      	cmp	r7, #120	@ 0x78
 80089be:	4691      	mov	r9, r2
 80089c0:	4680      	mov	r8, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	469a      	mov	sl, r3
 80089c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089ca:	d807      	bhi.n	80089dc <_printf_i+0x28>
 80089cc:	2f62      	cmp	r7, #98	@ 0x62
 80089ce:	d80a      	bhi.n	80089e6 <_printf_i+0x32>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	f000 80d2 	beq.w	8008b7a <_printf_i+0x1c6>
 80089d6:	2f58      	cmp	r7, #88	@ 0x58
 80089d8:	f000 80b9 	beq.w	8008b4e <_printf_i+0x19a>
 80089dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089e4:	e03a      	b.n	8008a5c <_printf_i+0xa8>
 80089e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ea:	2b15      	cmp	r3, #21
 80089ec:	d8f6      	bhi.n	80089dc <_printf_i+0x28>
 80089ee:	a101      	add	r1, pc, #4	@ (adr r1, 80089f4 <_printf_i+0x40>)
 80089f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f4:	08008a4d 	.word	0x08008a4d
 80089f8:	08008a61 	.word	0x08008a61
 80089fc:	080089dd 	.word	0x080089dd
 8008a00:	080089dd 	.word	0x080089dd
 8008a04:	080089dd 	.word	0x080089dd
 8008a08:	080089dd 	.word	0x080089dd
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089dd 	.word	0x080089dd
 8008a14:	080089dd 	.word	0x080089dd
 8008a18:	080089dd 	.word	0x080089dd
 8008a1c:	080089dd 	.word	0x080089dd
 8008a20:	08008b61 	.word	0x08008b61
 8008a24:	08008a8b 	.word	0x08008a8b
 8008a28:	08008b1b 	.word	0x08008b1b
 8008a2c:	080089dd 	.word	0x080089dd
 8008a30:	080089dd 	.word	0x080089dd
 8008a34:	08008b83 	.word	0x08008b83
 8008a38:	080089dd 	.word	0x080089dd
 8008a3c:	08008a8b 	.word	0x08008a8b
 8008a40:	080089dd 	.word	0x080089dd
 8008a44:	080089dd 	.word	0x080089dd
 8008a48:	08008b23 	.word	0x08008b23
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	1d1a      	adds	r2, r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6032      	str	r2, [r6, #0]
 8008a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e09d      	b.n	8008b9c <_printf_i+0x1e8>
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6031      	str	r1, [r6, #0]
 8008a68:	0606      	lsls	r6, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xbc>
 8008a6c:	681d      	ldr	r5, [r3, #0]
 8008a6e:	e003      	b.n	8008a78 <_printf_i+0xc4>
 8008a70:	0645      	lsls	r5, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xb8>
 8008a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	da03      	bge.n	8008a84 <_printf_i+0xd0>
 8008a7c:	232d      	movs	r3, #45	@ 0x2d
 8008a7e:	426d      	negs	r5, r5
 8008a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a84:	4859      	ldr	r0, [pc, #356]	@ (8008bec <_printf_i+0x238>)
 8008a86:	230a      	movs	r3, #10
 8008a88:	e011      	b.n	8008aae <_printf_i+0xfa>
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	0608      	lsls	r0, r1, #24
 8008a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a94:	d402      	bmi.n	8008a9c <_printf_i+0xe8>
 8008a96:	0649      	lsls	r1, r1, #25
 8008a98:	bf48      	it	mi
 8008a9a:	b2ad      	uxthmi	r5, r5
 8008a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a9e:	4853      	ldr	r0, [pc, #332]	@ (8008bec <_printf_i+0x238>)
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	bf14      	ite	ne
 8008aa4:	230a      	movne	r3, #10
 8008aa6:	2308      	moveq	r3, #8
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aae:	6866      	ldr	r6, [r4, #4]
 8008ab0:	60a6      	str	r6, [r4, #8]
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	bfa2      	ittt	ge
 8008ab6:	6821      	ldrge	r1, [r4, #0]
 8008ab8:	f021 0104 	bicge.w	r1, r1, #4
 8008abc:	6021      	strge	r1, [r4, #0]
 8008abe:	b90d      	cbnz	r5, 8008ac4 <_printf_i+0x110>
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	d04b      	beq.n	8008b5c <_printf_i+0x1a8>
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008aca:	fb03 5711 	mls	r7, r3, r1, r5
 8008ace:	5dc7      	ldrb	r7, [r0, r7]
 8008ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ad4:	462f      	mov	r7, r5
 8008ad6:	42bb      	cmp	r3, r7
 8008ad8:	460d      	mov	r5, r1
 8008ada:	d9f4      	bls.n	8008ac6 <_printf_i+0x112>
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d10b      	bne.n	8008af8 <_printf_i+0x144>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	07df      	lsls	r7, r3, #31
 8008ae4:	d508      	bpl.n	8008af8 <_printf_i+0x144>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	bfde      	ittt	le
 8008aee:	2330      	movle	r3, #48	@ 0x30
 8008af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008af8:	1b92      	subs	r2, r2, r6
 8008afa:	6122      	str	r2, [r4, #16]
 8008afc:	f8cd a000 	str.w	sl, [sp]
 8008b00:	464b      	mov	r3, r9
 8008b02:	aa03      	add	r2, sp, #12
 8008b04:	4621      	mov	r1, r4
 8008b06:	4640      	mov	r0, r8
 8008b08:	f7ff fee6 	bl	80088d8 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d14a      	bne.n	8008ba6 <_printf_i+0x1f2>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 0320 	orr.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	4833      	ldr	r0, [pc, #204]	@ (8008bf0 <_printf_i+0x23c>)
 8008b24:	2778      	movs	r7, #120	@ 0x78
 8008b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6831      	ldr	r1, [r6, #0]
 8008b2e:	061f      	lsls	r7, r3, #24
 8008b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b34:	d402      	bmi.n	8008b3c <_printf_i+0x188>
 8008b36:	065f      	lsls	r7, r3, #25
 8008b38:	bf48      	it	mi
 8008b3a:	b2ad      	uxthmi	r5, r5
 8008b3c:	6031      	str	r1, [r6, #0]
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	bf44      	itt	mi
 8008b42:	f043 0320 	orrmi.w	r3, r3, #32
 8008b46:	6023      	strmi	r3, [r4, #0]
 8008b48:	b11d      	cbz	r5, 8008b52 <_printf_i+0x19e>
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	e7ac      	b.n	8008aa8 <_printf_i+0xf4>
 8008b4e:	4827      	ldr	r0, [pc, #156]	@ (8008bec <_printf_i+0x238>)
 8008b50:	e7e9      	b.n	8008b26 <_printf_i+0x172>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f023 0320 	bic.w	r3, r3, #32
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	e7f6      	b.n	8008b4a <_printf_i+0x196>
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	e7bd      	b.n	8008adc <_printf_i+0x128>
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6961      	ldr	r1, [r4, #20]
 8008b66:	1d18      	adds	r0, r3, #4
 8008b68:	6030      	str	r0, [r6, #0]
 8008b6a:	062e      	lsls	r6, r5, #24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0x1c0>
 8008b70:	6019      	str	r1, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0x1c6>
 8008b74:	0668      	lsls	r0, r5, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0x1bc>
 8008b78:	8019      	strh	r1, [r3, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	4616      	mov	r6, r2
 8008b80:	e7bc      	b.n	8008afc <_printf_i+0x148>
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	1d1a      	adds	r2, r3, #4
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	681e      	ldr	r6, [r3, #0]
 8008b8a:	6862      	ldr	r2, [r4, #4]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7f7 fb46 	bl	8000220 <memchr>
 8008b94:	b108      	cbz	r0, 8008b9a <_printf_i+0x1e6>
 8008b96:	1b80      	subs	r0, r0, r6
 8008b98:	6060      	str	r0, [r4, #4]
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba4:	e7aa      	b.n	8008afc <_printf_i+0x148>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4649      	mov	r1, r9
 8008bac:	4640      	mov	r0, r8
 8008bae:	47d0      	blx	sl
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d0ad      	beq.n	8008b10 <_printf_i+0x15c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	079b      	lsls	r3, r3, #30
 8008bb8:	d413      	bmi.n	8008be2 <_printf_i+0x22e>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	4298      	cmp	r0, r3
 8008bc0:	bfb8      	it	lt
 8008bc2:	4618      	movlt	r0, r3
 8008bc4:	e7a6      	b.n	8008b14 <_printf_i+0x160>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	47d0      	blx	sl
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d09d      	beq.n	8008b10 <_printf_i+0x15c>
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	9903      	ldr	r1, [sp, #12]
 8008bda:	1a5b      	subs	r3, r3, r1
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dcf2      	bgt.n	8008bc6 <_printf_i+0x212>
 8008be0:	e7eb      	b.n	8008bba <_printf_i+0x206>
 8008be2:	2500      	movs	r5, #0
 8008be4:	f104 0619 	add.w	r6, r4, #25
 8008be8:	e7f5      	b.n	8008bd6 <_printf_i+0x222>
 8008bea:	bf00      	nop
 8008bec:	0800c17a 	.word	0x0800c17a
 8008bf0:	0800c18b 	.word	0x0800c18b

08008bf4 <_scanf_float>:
 8008bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	b087      	sub	sp, #28
 8008bfa:	4617      	mov	r7, r2
 8008bfc:	9303      	str	r3, [sp, #12]
 8008bfe:	688b      	ldr	r3, [r1, #8]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008c06:	bf81      	itttt	hi
 8008c08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008c0c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008c10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008c14:	608b      	strhi	r3, [r1, #8]
 8008c16:	680b      	ldr	r3, [r1, #0]
 8008c18:	460a      	mov	r2, r1
 8008c1a:	f04f 0500 	mov.w	r5, #0
 8008c1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008c22:	f842 3b1c 	str.w	r3, [r2], #28
 8008c26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	bf98      	it	ls
 8008c30:	f04f 0b00 	movls.w	fp, #0
 8008c34:	9201      	str	r2, [sp, #4]
 8008c36:	4616      	mov	r6, r2
 8008c38:	46aa      	mov	sl, r5
 8008c3a:	46a9      	mov	r9, r5
 8008c3c:	9502      	str	r5, [sp, #8]
 8008c3e:	68a2      	ldr	r2, [r4, #8]
 8008c40:	b152      	cbz	r2, 8008c58 <_scanf_float+0x64>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b4e      	cmp	r3, #78	@ 0x4e
 8008c48:	d864      	bhi.n	8008d14 <_scanf_float+0x120>
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	d83c      	bhi.n	8008cc8 <_scanf_float+0xd4>
 8008c4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008c52:	b2c8      	uxtb	r0, r1
 8008c54:	280e      	cmp	r0, #14
 8008c56:	d93a      	bls.n	8008cce <_scanf_float+0xda>
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	d003      	beq.n	8008c66 <_scanf_float+0x72>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c6a:	f1ba 0f01 	cmp.w	sl, #1
 8008c6e:	f200 8117 	bhi.w	8008ea0 <_scanf_float+0x2ac>
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	429e      	cmp	r6, r3
 8008c76:	f200 8108 	bhi.w	8008e8a <_scanf_float+0x296>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	b007      	add	sp, #28
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c86:	2a0d      	cmp	r2, #13
 8008c88:	d8e6      	bhi.n	8008c58 <_scanf_float+0x64>
 8008c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c90 <_scanf_float+0x9c>)
 8008c8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c90:	08008dd7 	.word	0x08008dd7
 8008c94:	08008c59 	.word	0x08008c59
 8008c98:	08008c59 	.word	0x08008c59
 8008c9c:	08008c59 	.word	0x08008c59
 8008ca0:	08008e37 	.word	0x08008e37
 8008ca4:	08008e0f 	.word	0x08008e0f
 8008ca8:	08008c59 	.word	0x08008c59
 8008cac:	08008c59 	.word	0x08008c59
 8008cb0:	08008de5 	.word	0x08008de5
 8008cb4:	08008c59 	.word	0x08008c59
 8008cb8:	08008c59 	.word	0x08008c59
 8008cbc:	08008c59 	.word	0x08008c59
 8008cc0:	08008c59 	.word	0x08008c59
 8008cc4:	08008d9d 	.word	0x08008d9d
 8008cc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008ccc:	e7db      	b.n	8008c86 <_scanf_float+0x92>
 8008cce:	290e      	cmp	r1, #14
 8008cd0:	d8c2      	bhi.n	8008c58 <_scanf_float+0x64>
 8008cd2:	a001      	add	r0, pc, #4	@ (adr r0, 8008cd8 <_scanf_float+0xe4>)
 8008cd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cd8:	08008d8d 	.word	0x08008d8d
 8008cdc:	08008c59 	.word	0x08008c59
 8008ce0:	08008d8d 	.word	0x08008d8d
 8008ce4:	08008e23 	.word	0x08008e23
 8008ce8:	08008c59 	.word	0x08008c59
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d73 	.word	0x08008d73
 8008cf4:	08008d73 	.word	0x08008d73
 8008cf8:	08008d73 	.word	0x08008d73
 8008cfc:	08008d73 	.word	0x08008d73
 8008d00:	08008d73 	.word	0x08008d73
 8008d04:	08008d73 	.word	0x08008d73
 8008d08:	08008d73 	.word	0x08008d73
 8008d0c:	08008d73 	.word	0x08008d73
 8008d10:	08008d73 	.word	0x08008d73
 8008d14:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d16:	d809      	bhi.n	8008d2c <_scanf_float+0x138>
 8008d18:	2b60      	cmp	r3, #96	@ 0x60
 8008d1a:	d8b2      	bhi.n	8008c82 <_scanf_float+0x8e>
 8008d1c:	2b54      	cmp	r3, #84	@ 0x54
 8008d1e:	d07b      	beq.n	8008e18 <_scanf_float+0x224>
 8008d20:	2b59      	cmp	r3, #89	@ 0x59
 8008d22:	d199      	bne.n	8008c58 <_scanf_float+0x64>
 8008d24:	2d07      	cmp	r5, #7
 8008d26:	d197      	bne.n	8008c58 <_scanf_float+0x64>
 8008d28:	2508      	movs	r5, #8
 8008d2a:	e02c      	b.n	8008d86 <_scanf_float+0x192>
 8008d2c:	2b74      	cmp	r3, #116	@ 0x74
 8008d2e:	d073      	beq.n	8008e18 <_scanf_float+0x224>
 8008d30:	2b79      	cmp	r3, #121	@ 0x79
 8008d32:	e7f6      	b.n	8008d22 <_scanf_float+0x12e>
 8008d34:	6821      	ldr	r1, [r4, #0]
 8008d36:	05c8      	lsls	r0, r1, #23
 8008d38:	d51b      	bpl.n	8008d72 <_scanf_float+0x17e>
 8008d3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008d3e:	6021      	str	r1, [r4, #0]
 8008d40:	f109 0901 	add.w	r9, r9, #1
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	d003      	beq.n	8008d52 <_scanf_float+0x15e>
 8008d4a:	3201      	adds	r2, #1
 8008d4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d50:	60a2      	str	r2, [r4, #8]
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	f340 8087 	ble.w	8008e78 <_scanf_float+0x284>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	e765      	b.n	8008c3e <_scanf_float+0x4a>
 8008d72:	eb1a 0105 	adds.w	r1, sl, r5
 8008d76:	f47f af6f 	bne.w	8008c58 <_scanf_float+0x64>
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d80:	6022      	str	r2, [r4, #0]
 8008d82:	460d      	mov	r5, r1
 8008d84:	468a      	mov	sl, r1
 8008d86:	f806 3b01 	strb.w	r3, [r6], #1
 8008d8a:	e7e2      	b.n	8008d52 <_scanf_float+0x15e>
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	0610      	lsls	r0, r2, #24
 8008d90:	f57f af62 	bpl.w	8008c58 <_scanf_float+0x64>
 8008d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	e7f4      	b.n	8008d86 <_scanf_float+0x192>
 8008d9c:	f1ba 0f00 	cmp.w	sl, #0
 8008da0:	d10e      	bne.n	8008dc0 <_scanf_float+0x1cc>
 8008da2:	f1b9 0f00 	cmp.w	r9, #0
 8008da6:	d10e      	bne.n	8008dc6 <_scanf_float+0x1d2>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008dae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008db2:	d108      	bne.n	8008dc6 <_scanf_float+0x1d2>
 8008db4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	f04f 0a01 	mov.w	sl, #1
 8008dbe:	e7e2      	b.n	8008d86 <_scanf_float+0x192>
 8008dc0:	f1ba 0f02 	cmp.w	sl, #2
 8008dc4:	d055      	beq.n	8008e72 <_scanf_float+0x27e>
 8008dc6:	2d01      	cmp	r5, #1
 8008dc8:	d002      	beq.n	8008dd0 <_scanf_float+0x1dc>
 8008dca:	2d04      	cmp	r5, #4
 8008dcc:	f47f af44 	bne.w	8008c58 <_scanf_float+0x64>
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	b2ed      	uxtb	r5, r5
 8008dd4:	e7d7      	b.n	8008d86 <_scanf_float+0x192>
 8008dd6:	f1ba 0f01 	cmp.w	sl, #1
 8008dda:	f47f af3d 	bne.w	8008c58 <_scanf_float+0x64>
 8008dde:	f04f 0a02 	mov.w	sl, #2
 8008de2:	e7d0      	b.n	8008d86 <_scanf_float+0x192>
 8008de4:	b97d      	cbnz	r5, 8008e06 <_scanf_float+0x212>
 8008de6:	f1b9 0f00 	cmp.w	r9, #0
 8008dea:	f47f af38 	bne.w	8008c5e <_scanf_float+0x6a>
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008df4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008df8:	f040 8108 	bne.w	800900c <_scanf_float+0x418>
 8008dfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	2501      	movs	r5, #1
 8008e04:	e7bf      	b.n	8008d86 <_scanf_float+0x192>
 8008e06:	2d03      	cmp	r5, #3
 8008e08:	d0e2      	beq.n	8008dd0 <_scanf_float+0x1dc>
 8008e0a:	2d05      	cmp	r5, #5
 8008e0c:	e7de      	b.n	8008dcc <_scanf_float+0x1d8>
 8008e0e:	2d02      	cmp	r5, #2
 8008e10:	f47f af22 	bne.w	8008c58 <_scanf_float+0x64>
 8008e14:	2503      	movs	r5, #3
 8008e16:	e7b6      	b.n	8008d86 <_scanf_float+0x192>
 8008e18:	2d06      	cmp	r5, #6
 8008e1a:	f47f af1d 	bne.w	8008c58 <_scanf_float+0x64>
 8008e1e:	2507      	movs	r5, #7
 8008e20:	e7b1      	b.n	8008d86 <_scanf_float+0x192>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	0591      	lsls	r1, r2, #22
 8008e26:	f57f af17 	bpl.w	8008c58 <_scanf_float+0x64>
 8008e2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008e2e:	6022      	str	r2, [r4, #0]
 8008e30:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e34:	e7a7      	b.n	8008d86 <_scanf_float+0x192>
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008e3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e40:	d006      	beq.n	8008e50 <_scanf_float+0x25c>
 8008e42:	0550      	lsls	r0, r2, #21
 8008e44:	f57f af08 	bpl.w	8008c58 <_scanf_float+0x64>
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	f000 80de 	beq.w	800900c <_scanf_float+0x418>
 8008e50:	0591      	lsls	r1, r2, #22
 8008e52:	bf58      	it	pl
 8008e54:	9902      	ldrpl	r1, [sp, #8]
 8008e56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e5a:	bf58      	it	pl
 8008e5c:	eba9 0101 	subpl.w	r1, r9, r1
 8008e60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008e64:	bf58      	it	pl
 8008e66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	f04f 0900 	mov.w	r9, #0
 8008e70:	e789      	b.n	8008d86 <_scanf_float+0x192>
 8008e72:	f04f 0a03 	mov.w	sl, #3
 8008e76:	e786      	b.n	8008d86 <_scanf_float+0x192>
 8008e78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e7c:	4639      	mov	r1, r7
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4798      	blx	r3
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f aedb 	beq.w	8008c3e <_scanf_float+0x4a>
 8008e88:	e6e6      	b.n	8008c58 <_scanf_float+0x64>
 8008e8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e92:	463a      	mov	r2, r7
 8008e94:	4640      	mov	r0, r8
 8008e96:	4798      	blx	r3
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	e6e8      	b.n	8008c72 <_scanf_float+0x7e>
 8008ea0:	1e6b      	subs	r3, r5, #1
 8008ea2:	2b06      	cmp	r3, #6
 8008ea4:	d824      	bhi.n	8008ef0 <_scanf_float+0x2fc>
 8008ea6:	2d02      	cmp	r5, #2
 8008ea8:	d836      	bhi.n	8008f18 <_scanf_float+0x324>
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	429e      	cmp	r6, r3
 8008eae:	f67f aee4 	bls.w	8008c7a <_scanf_float+0x86>
 8008eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eba:	463a      	mov	r2, r7
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	4798      	blx	r3
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	e7f0      	b.n	8008eaa <_scanf_float+0x2b6>
 8008ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ecc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4798      	blx	r3
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ee0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ee4:	f1ba 0f02 	cmp.w	sl, #2
 8008ee8:	d1ee      	bne.n	8008ec8 <_scanf_float+0x2d4>
 8008eea:	3d03      	subs	r5, #3
 8008eec:	b2ed      	uxtb	r5, r5
 8008eee:	1b76      	subs	r6, r6, r5
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	05da      	lsls	r2, r3, #23
 8008ef4:	d530      	bpl.n	8008f58 <_scanf_float+0x364>
 8008ef6:	055b      	lsls	r3, r3, #21
 8008ef8:	d511      	bpl.n	8008f1e <_scanf_float+0x32a>
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	429e      	cmp	r6, r3
 8008efe:	f67f aebc 	bls.w	8008c7a <_scanf_float+0x86>
 8008f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4798      	blx	r3
 8008f10:	6923      	ldr	r3, [r4, #16]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	6123      	str	r3, [r4, #16]
 8008f16:	e7f0      	b.n	8008efa <_scanf_float+0x306>
 8008f18:	46aa      	mov	sl, r5
 8008f1a:	46b3      	mov	fp, r6
 8008f1c:	e7de      	b.n	8008edc <_scanf_float+0x2e8>
 8008f1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	2965      	cmp	r1, #101	@ 0x65
 8008f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	d00c      	beq.n	8008f4c <_scanf_float+0x358>
 8008f32:	2945      	cmp	r1, #69	@ 0x45
 8008f34:	d00a      	beq.n	8008f4c <_scanf_float+0x358>
 8008f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4798      	blx	r3
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	1eb5      	subs	r5, r6, #2
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f50:	463a      	mov	r2, r7
 8008f52:	4640      	mov	r0, r8
 8008f54:	4798      	blx	r3
 8008f56:	462e      	mov	r6, r5
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	f012 0210 	ands.w	r2, r2, #16
 8008f5e:	d001      	beq.n	8008f64 <_scanf_float+0x370>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e68b      	b.n	8008c7c <_scanf_float+0x88>
 8008f64:	7032      	strb	r2, [r6, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f70:	d11c      	bne.n	8008fac <_scanf_float+0x3b8>
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	454b      	cmp	r3, r9
 8008f76:	eba3 0209 	sub.w	r2, r3, r9
 8008f7a:	d123      	bne.n	8008fc4 <_scanf_float+0x3d0>
 8008f7c:	9901      	ldr	r1, [sp, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	4640      	mov	r0, r8
 8008f82:	f7ff f975 	bl	8008270 <_strtod_r>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	6821      	ldr	r1, [r4, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f011 0f02 	tst.w	r1, #2
 8008f90:	ec57 6b10 	vmov	r6, r7, d0
 8008f94:	f103 0204 	add.w	r2, r3, #4
 8008f98:	d01f      	beq.n	8008fda <_scanf_float+0x3e6>
 8008f9a:	9903      	ldr	r1, [sp, #12]
 8008f9c:	600a      	str	r2, [r1, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	e9c3 6700 	strd	r6, r7, [r3]
 8008fa4:	68e3      	ldr	r3, [r4, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60e3      	str	r3, [r4, #12]
 8008faa:	e7d9      	b.n	8008f60 <_scanf_float+0x36c>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0e4      	beq.n	8008f7c <_scanf_float+0x388>
 8008fb2:	9905      	ldr	r1, [sp, #20]
 8008fb4:	230a      	movs	r3, #10
 8008fb6:	3101      	adds	r1, #1
 8008fb8:	4640      	mov	r0, r8
 8008fba:	f002 fb89 	bl	800b6d0 <_strtol_r>
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	9e05      	ldr	r6, [sp, #20]
 8008fc2:	1ac2      	subs	r2, r0, r3
 8008fc4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	bf28      	it	cs
 8008fcc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008fd0:	4910      	ldr	r1, [pc, #64]	@ (8009014 <_scanf_float+0x420>)
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 fa10 	bl	80093f8 <siprintf>
 8008fd8:	e7d0      	b.n	8008f7c <_scanf_float+0x388>
 8008fda:	f011 0f04 	tst.w	r1, #4
 8008fde:	9903      	ldr	r1, [sp, #12]
 8008fe0:	600a      	str	r2, [r1, #0]
 8008fe2:	d1dc      	bne.n	8008f9e <_scanf_float+0x3aa>
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	4632      	mov	r2, r6
 8008fe8:	463b      	mov	r3, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fdc5 	bl	8000b7c <__aeabi_dcmpun>
 8008ff2:	b128      	cbz	r0, 8009000 <_scanf_float+0x40c>
 8008ff4:	4808      	ldr	r0, [pc, #32]	@ (8009018 <_scanf_float+0x424>)
 8008ff6:	f000 fb9f 	bl	8009738 <nanf>
 8008ffa:	ed85 0a00 	vstr	s0, [r5]
 8008ffe:	e7d1      	b.n	8008fa4 <_scanf_float+0x3b0>
 8009000:	4630      	mov	r0, r6
 8009002:	4639      	mov	r1, r7
 8009004:	f7f7 fe18 	bl	8000c38 <__aeabi_d2f>
 8009008:	6028      	str	r0, [r5, #0]
 800900a:	e7cb      	b.n	8008fa4 <_scanf_float+0x3b0>
 800900c:	f04f 0900 	mov.w	r9, #0
 8009010:	e629      	b.n	8008c66 <_scanf_float+0x72>
 8009012:	bf00      	nop
 8009014:	0800c19c 	.word	0x0800c19c
 8009018:	0800c53d 	.word	0x0800c53d

0800901c <std>:
 800901c:	2300      	movs	r3, #0
 800901e:	b510      	push	{r4, lr}
 8009020:	4604      	mov	r4, r0
 8009022:	e9c0 3300 	strd	r3, r3, [r0]
 8009026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800902a:	6083      	str	r3, [r0, #8]
 800902c:	8181      	strh	r1, [r0, #12]
 800902e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009030:	81c2      	strh	r2, [r0, #14]
 8009032:	6183      	str	r3, [r0, #24]
 8009034:	4619      	mov	r1, r3
 8009036:	2208      	movs	r2, #8
 8009038:	305c      	adds	r0, #92	@ 0x5c
 800903a:	f000 fad5 	bl	80095e8 <memset>
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <std+0x58>)
 8009040:	6263      	str	r3, [r4, #36]	@ 0x24
 8009042:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <std+0x5c>)
 8009044:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <std+0x60>)
 8009048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <std+0x64>)
 800904c:	6323      	str	r3, [r4, #48]	@ 0x30
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <std+0x68>)
 8009050:	6224      	str	r4, [r4, #32]
 8009052:	429c      	cmp	r4, r3
 8009054:	d006      	beq.n	8009064 <std+0x48>
 8009056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800905a:	4294      	cmp	r4, r2
 800905c:	d002      	beq.n	8009064 <std+0x48>
 800905e:	33d0      	adds	r3, #208	@ 0xd0
 8009060:	429c      	cmp	r4, r3
 8009062:	d105      	bne.n	8009070 <std+0x54>
 8009064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	f000 bb4a 	b.w	8009704 <__retarget_lock_init_recursive>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	08009439 	.word	0x08009439
 8009078:	0800945b 	.word	0x0800945b
 800907c:	08009493 	.word	0x08009493
 8009080:	080094b7 	.word	0x080094b7
 8009084:	20000564 	.word	0x20000564

08009088 <stdio_exit_handler>:
 8009088:	4a02      	ldr	r2, [pc, #8]	@ (8009094 <stdio_exit_handler+0xc>)
 800908a:	4903      	ldr	r1, [pc, #12]	@ (8009098 <stdio_exit_handler+0x10>)
 800908c:	4803      	ldr	r0, [pc, #12]	@ (800909c <stdio_exit_handler+0x14>)
 800908e:	f000 b869 	b.w	8009164 <_fwalk_sglue>
 8009092:	bf00      	nop
 8009094:	20000018 	.word	0x20000018
 8009098:	0800bd29 	.word	0x0800bd29
 800909c:	20000194 	.word	0x20000194

080090a0 <cleanup_stdio>:
 80090a0:	6841      	ldr	r1, [r0, #4]
 80090a2:	4b0c      	ldr	r3, [pc, #48]	@ (80090d4 <cleanup_stdio+0x34>)
 80090a4:	4299      	cmp	r1, r3
 80090a6:	b510      	push	{r4, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	d001      	beq.n	80090b0 <cleanup_stdio+0x10>
 80090ac:	f002 fe3c 	bl	800bd28 <_fflush_r>
 80090b0:	68a1      	ldr	r1, [r4, #8]
 80090b2:	4b09      	ldr	r3, [pc, #36]	@ (80090d8 <cleanup_stdio+0x38>)
 80090b4:	4299      	cmp	r1, r3
 80090b6:	d002      	beq.n	80090be <cleanup_stdio+0x1e>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f002 fe35 	bl	800bd28 <_fflush_r>
 80090be:	68e1      	ldr	r1, [r4, #12]
 80090c0:	4b06      	ldr	r3, [pc, #24]	@ (80090dc <cleanup_stdio+0x3c>)
 80090c2:	4299      	cmp	r1, r3
 80090c4:	d004      	beq.n	80090d0 <cleanup_stdio+0x30>
 80090c6:	4620      	mov	r0, r4
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090cc:	f002 be2c 	b.w	800bd28 <_fflush_r>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	bf00      	nop
 80090d4:	20000564 	.word	0x20000564
 80090d8:	200005cc 	.word	0x200005cc
 80090dc:	20000634 	.word	0x20000634

080090e0 <global_stdio_init.part.0>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <global_stdio_init.part.0+0x30>)
 80090e4:	4c0b      	ldr	r4, [pc, #44]	@ (8009114 <global_stdio_init.part.0+0x34>)
 80090e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009118 <global_stdio_init.part.0+0x38>)
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	4620      	mov	r0, r4
 80090ec:	2200      	movs	r2, #0
 80090ee:	2104      	movs	r1, #4
 80090f0:	f7ff ff94 	bl	800901c <std>
 80090f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090f8:	2201      	movs	r2, #1
 80090fa:	2109      	movs	r1, #9
 80090fc:	f7ff ff8e 	bl	800901c <std>
 8009100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009104:	2202      	movs	r2, #2
 8009106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800910a:	2112      	movs	r1, #18
 800910c:	f7ff bf86 	b.w	800901c <std>
 8009110:	2000069c 	.word	0x2000069c
 8009114:	20000564 	.word	0x20000564
 8009118:	08009089 	.word	0x08009089

0800911c <__sfp_lock_acquire>:
 800911c:	4801      	ldr	r0, [pc, #4]	@ (8009124 <__sfp_lock_acquire+0x8>)
 800911e:	f000 baf2 	b.w	8009706 <__retarget_lock_acquire_recursive>
 8009122:	bf00      	nop
 8009124:	200006a5 	.word	0x200006a5

08009128 <__sfp_lock_release>:
 8009128:	4801      	ldr	r0, [pc, #4]	@ (8009130 <__sfp_lock_release+0x8>)
 800912a:	f000 baed 	b.w	8009708 <__retarget_lock_release_recursive>
 800912e:	bf00      	nop
 8009130:	200006a5 	.word	0x200006a5

08009134 <__sinit>:
 8009134:	b510      	push	{r4, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	f7ff fff0 	bl	800911c <__sfp_lock_acquire>
 800913c:	6a23      	ldr	r3, [r4, #32]
 800913e:	b11b      	cbz	r3, 8009148 <__sinit+0x14>
 8009140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009144:	f7ff bff0 	b.w	8009128 <__sfp_lock_release>
 8009148:	4b04      	ldr	r3, [pc, #16]	@ (800915c <__sinit+0x28>)
 800914a:	6223      	str	r3, [r4, #32]
 800914c:	4b04      	ldr	r3, [pc, #16]	@ (8009160 <__sinit+0x2c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1f5      	bne.n	8009140 <__sinit+0xc>
 8009154:	f7ff ffc4 	bl	80090e0 <global_stdio_init.part.0>
 8009158:	e7f2      	b.n	8009140 <__sinit+0xc>
 800915a:	bf00      	nop
 800915c:	080090a1 	.word	0x080090a1
 8009160:	2000069c 	.word	0x2000069c

08009164 <_fwalk_sglue>:
 8009164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009168:	4607      	mov	r7, r0
 800916a:	4688      	mov	r8, r1
 800916c:	4614      	mov	r4, r2
 800916e:	2600      	movs	r6, #0
 8009170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009174:	f1b9 0901 	subs.w	r9, r9, #1
 8009178:	d505      	bpl.n	8009186 <_fwalk_sglue+0x22>
 800917a:	6824      	ldr	r4, [r4, #0]
 800917c:	2c00      	cmp	r4, #0
 800917e:	d1f7      	bne.n	8009170 <_fwalk_sglue+0xc>
 8009180:	4630      	mov	r0, r6
 8009182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d907      	bls.n	800919c <_fwalk_sglue+0x38>
 800918c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009190:	3301      	adds	r3, #1
 8009192:	d003      	beq.n	800919c <_fwalk_sglue+0x38>
 8009194:	4629      	mov	r1, r5
 8009196:	4638      	mov	r0, r7
 8009198:	47c0      	blx	r8
 800919a:	4306      	orrs	r6, r0
 800919c:	3568      	adds	r5, #104	@ 0x68
 800919e:	e7e9      	b.n	8009174 <_fwalk_sglue+0x10>

080091a0 <iprintf>:
 80091a0:	b40f      	push	{r0, r1, r2, r3}
 80091a2:	b507      	push	{r0, r1, r2, lr}
 80091a4:	4906      	ldr	r1, [pc, #24]	@ (80091c0 <iprintf+0x20>)
 80091a6:	ab04      	add	r3, sp, #16
 80091a8:	6808      	ldr	r0, [r1, #0]
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	6881      	ldr	r1, [r0, #8]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f002 fc1d 	bl	800b9f0 <_vfiprintf_r>
 80091b6:	b003      	add	sp, #12
 80091b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091bc:	b004      	add	sp, #16
 80091be:	4770      	bx	lr
 80091c0:	20000190 	.word	0x20000190

080091c4 <_puts_r>:
 80091c4:	6a03      	ldr	r3, [r0, #32]
 80091c6:	b570      	push	{r4, r5, r6, lr}
 80091c8:	6884      	ldr	r4, [r0, #8]
 80091ca:	4605      	mov	r5, r0
 80091cc:	460e      	mov	r6, r1
 80091ce:	b90b      	cbnz	r3, 80091d4 <_puts_r+0x10>
 80091d0:	f7ff ffb0 	bl	8009134 <__sinit>
 80091d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d6:	07db      	lsls	r3, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_puts_r+0x22>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	0598      	lsls	r0, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_puts_r+0x22>
 80091e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091e2:	f000 fa90 	bl	8009706 <__retarget_lock_acquire_recursive>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	0719      	lsls	r1, r3, #28
 80091ea:	d502      	bpl.n	80091f2 <_puts_r+0x2e>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d135      	bne.n	800925e <_puts_r+0x9a>
 80091f2:	4621      	mov	r1, r4
 80091f4:	4628      	mov	r0, r5
 80091f6:	f000 f9a1 	bl	800953c <__swsetup_r>
 80091fa:	b380      	cbz	r0, 800925e <_puts_r+0x9a>
 80091fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009202:	07da      	lsls	r2, r3, #31
 8009204:	d405      	bmi.n	8009212 <_puts_r+0x4e>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	059b      	lsls	r3, r3, #22
 800920a:	d402      	bmi.n	8009212 <_puts_r+0x4e>
 800920c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800920e:	f000 fa7b 	bl	8009708 <__retarget_lock_release_recursive>
 8009212:	4628      	mov	r0, r5
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	2b00      	cmp	r3, #0
 8009218:	da04      	bge.n	8009224 <_puts_r+0x60>
 800921a:	69a2      	ldr	r2, [r4, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	dc17      	bgt.n	8009250 <_puts_r+0x8c>
 8009220:	290a      	cmp	r1, #10
 8009222:	d015      	beq.n	8009250 <_puts_r+0x8c>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	7019      	strb	r1, [r3, #0]
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009232:	3b01      	subs	r3, #1
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	2900      	cmp	r1, #0
 8009238:	d1ed      	bne.n	8009216 <_puts_r+0x52>
 800923a:	2b00      	cmp	r3, #0
 800923c:	da11      	bge.n	8009262 <_puts_r+0x9e>
 800923e:	4622      	mov	r2, r4
 8009240:	210a      	movs	r1, #10
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f93b 	bl	80094be <__swbuf_r>
 8009248:	3001      	adds	r0, #1
 800924a:	d0d7      	beq.n	80091fc <_puts_r+0x38>
 800924c:	250a      	movs	r5, #10
 800924e:	e7d7      	b.n	8009200 <_puts_r+0x3c>
 8009250:	4622      	mov	r2, r4
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f933 	bl	80094be <__swbuf_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d1e7      	bne.n	800922c <_puts_r+0x68>
 800925c:	e7ce      	b.n	80091fc <_puts_r+0x38>
 800925e:	3e01      	subs	r6, #1
 8009260:	e7e4      	b.n	800922c <_puts_r+0x68>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	220a      	movs	r2, #10
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	e7ee      	b.n	800924c <_puts_r+0x88>
	...

08009270 <puts>:
 8009270:	4b02      	ldr	r3, [pc, #8]	@ (800927c <puts+0xc>)
 8009272:	4601      	mov	r1, r0
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f7ff bfa5 	b.w	80091c4 <_puts_r>
 800927a:	bf00      	nop
 800927c:	20000190 	.word	0x20000190

08009280 <setbuf>:
 8009280:	fab1 f281 	clz	r2, r1
 8009284:	0952      	lsrs	r2, r2, #5
 8009286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800928a:	0052      	lsls	r2, r2, #1
 800928c:	f000 b800 	b.w	8009290 <setvbuf>

08009290 <setvbuf>:
 8009290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009294:	461d      	mov	r5, r3
 8009296:	4b57      	ldr	r3, [pc, #348]	@ (80093f4 <setvbuf+0x164>)
 8009298:	681f      	ldr	r7, [r3, #0]
 800929a:	4604      	mov	r4, r0
 800929c:	460e      	mov	r6, r1
 800929e:	4690      	mov	r8, r2
 80092a0:	b127      	cbz	r7, 80092ac <setvbuf+0x1c>
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	b913      	cbnz	r3, 80092ac <setvbuf+0x1c>
 80092a6:	4638      	mov	r0, r7
 80092a8:	f7ff ff44 	bl	8009134 <__sinit>
 80092ac:	f1b8 0f02 	cmp.w	r8, #2
 80092b0:	d006      	beq.n	80092c0 <setvbuf+0x30>
 80092b2:	f1b8 0f01 	cmp.w	r8, #1
 80092b6:	f200 809a 	bhi.w	80093ee <setvbuf+0x15e>
 80092ba:	2d00      	cmp	r5, #0
 80092bc:	f2c0 8097 	blt.w	80093ee <setvbuf+0x15e>
 80092c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c2:	07d9      	lsls	r1, r3, #31
 80092c4:	d405      	bmi.n	80092d2 <setvbuf+0x42>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	059a      	lsls	r2, r3, #22
 80092ca:	d402      	bmi.n	80092d2 <setvbuf+0x42>
 80092cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ce:	f000 fa1a 	bl	8009706 <__retarget_lock_acquire_recursive>
 80092d2:	4621      	mov	r1, r4
 80092d4:	4638      	mov	r0, r7
 80092d6:	f002 fd27 	bl	800bd28 <_fflush_r>
 80092da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092dc:	b141      	cbz	r1, 80092f0 <setvbuf+0x60>
 80092de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092e2:	4299      	cmp	r1, r3
 80092e4:	d002      	beq.n	80092ec <setvbuf+0x5c>
 80092e6:	4638      	mov	r0, r7
 80092e8:	f001 f87a 	bl	800a3e0 <_free_r>
 80092ec:	2300      	movs	r3, #0
 80092ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80092f0:	2300      	movs	r3, #0
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	6063      	str	r3, [r4, #4]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	d503      	bpl.n	8009304 <setvbuf+0x74>
 80092fc:	6921      	ldr	r1, [r4, #16]
 80092fe:	4638      	mov	r0, r7
 8009300:	f001 f86e 	bl	800a3e0 <_free_r>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	f1b8 0f02 	cmp.w	r8, #2
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	d061      	beq.n	80093da <setvbuf+0x14a>
 8009316:	ab01      	add	r3, sp, #4
 8009318:	466a      	mov	r2, sp
 800931a:	4621      	mov	r1, r4
 800931c:	4638      	mov	r0, r7
 800931e:	f002 fd2b 	bl	800bd78 <__swhatbuf_r>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	4318      	orrs	r0, r3
 8009326:	81a0      	strh	r0, [r4, #12]
 8009328:	bb2d      	cbnz	r5, 8009376 <setvbuf+0xe6>
 800932a:	9d00      	ldr	r5, [sp, #0]
 800932c:	4628      	mov	r0, r5
 800932e:	f001 fbdb 	bl	800aae8 <malloc>
 8009332:	4606      	mov	r6, r0
 8009334:	2800      	cmp	r0, #0
 8009336:	d152      	bne.n	80093de <setvbuf+0x14e>
 8009338:	f8dd 9000 	ldr.w	r9, [sp]
 800933c:	45a9      	cmp	r9, r5
 800933e:	d140      	bne.n	80093c2 <setvbuf+0x132>
 8009340:	f04f 35ff 	mov.w	r5, #4294967295
 8009344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009348:	f043 0202 	orr.w	r2, r3, #2
 800934c:	81a2      	strh	r2, [r4, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	60a2      	str	r2, [r4, #8]
 8009352:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009356:	6022      	str	r2, [r4, #0]
 8009358:	6122      	str	r2, [r4, #16]
 800935a:	2201      	movs	r2, #1
 800935c:	6162      	str	r2, [r4, #20]
 800935e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009360:	07d6      	lsls	r6, r2, #31
 8009362:	d404      	bmi.n	800936e <setvbuf+0xde>
 8009364:	0598      	lsls	r0, r3, #22
 8009366:	d402      	bmi.n	800936e <setvbuf+0xde>
 8009368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936a:	f000 f9cd 	bl	8009708 <__retarget_lock_release_recursive>
 800936e:	4628      	mov	r0, r5
 8009370:	b003      	add	sp, #12
 8009372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009376:	2e00      	cmp	r6, #0
 8009378:	d0d8      	beq.n	800932c <setvbuf+0x9c>
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	b913      	cbnz	r3, 8009384 <setvbuf+0xf4>
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff fed8 	bl	8009134 <__sinit>
 8009384:	f1b8 0f01 	cmp.w	r8, #1
 8009388:	bf08      	it	eq
 800938a:	89a3      	ldrheq	r3, [r4, #12]
 800938c:	6026      	str	r6, [r4, #0]
 800938e:	bf04      	itt	eq
 8009390:	f043 0301 	orreq.w	r3, r3, #1
 8009394:	81a3      	strheq	r3, [r4, #12]
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	f013 0208 	ands.w	r2, r3, #8
 800939e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80093a2:	d01e      	beq.n	80093e2 <setvbuf+0x152>
 80093a4:	07d9      	lsls	r1, r3, #31
 80093a6:	bf41      	itttt	mi
 80093a8:	2200      	movmi	r2, #0
 80093aa:	426d      	negmi	r5, r5
 80093ac:	60a2      	strmi	r2, [r4, #8]
 80093ae:	61a5      	strmi	r5, [r4, #24]
 80093b0:	bf58      	it	pl
 80093b2:	60a5      	strpl	r5, [r4, #8]
 80093b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093b6:	07d2      	lsls	r2, r2, #31
 80093b8:	d401      	bmi.n	80093be <setvbuf+0x12e>
 80093ba:	059b      	lsls	r3, r3, #22
 80093bc:	d513      	bpl.n	80093e6 <setvbuf+0x156>
 80093be:	2500      	movs	r5, #0
 80093c0:	e7d5      	b.n	800936e <setvbuf+0xde>
 80093c2:	4648      	mov	r0, r9
 80093c4:	f001 fb90 	bl	800aae8 <malloc>
 80093c8:	4606      	mov	r6, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0b8      	beq.n	8009340 <setvbuf+0xb0>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	464d      	mov	r5, r9
 80093d8:	e7cf      	b.n	800937a <setvbuf+0xea>
 80093da:	2500      	movs	r5, #0
 80093dc:	e7b2      	b.n	8009344 <setvbuf+0xb4>
 80093de:	46a9      	mov	r9, r5
 80093e0:	e7f5      	b.n	80093ce <setvbuf+0x13e>
 80093e2:	60a2      	str	r2, [r4, #8]
 80093e4:	e7e6      	b.n	80093b4 <setvbuf+0x124>
 80093e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093e8:	f000 f98e 	bl	8009708 <__retarget_lock_release_recursive>
 80093ec:	e7e7      	b.n	80093be <setvbuf+0x12e>
 80093ee:	f04f 35ff 	mov.w	r5, #4294967295
 80093f2:	e7bc      	b.n	800936e <setvbuf+0xde>
 80093f4:	20000190 	.word	0x20000190

080093f8 <siprintf>:
 80093f8:	b40e      	push	{r1, r2, r3}
 80093fa:	b500      	push	{lr}
 80093fc:	b09c      	sub	sp, #112	@ 0x70
 80093fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009400:	9002      	str	r0, [sp, #8]
 8009402:	9006      	str	r0, [sp, #24]
 8009404:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009408:	4809      	ldr	r0, [pc, #36]	@ (8009430 <siprintf+0x38>)
 800940a:	9107      	str	r1, [sp, #28]
 800940c:	9104      	str	r1, [sp, #16]
 800940e:	4909      	ldr	r1, [pc, #36]	@ (8009434 <siprintf+0x3c>)
 8009410:	f853 2b04 	ldr.w	r2, [r3], #4
 8009414:	9105      	str	r1, [sp, #20]
 8009416:	6800      	ldr	r0, [r0, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	a902      	add	r1, sp, #8
 800941c:	f002 f9c2 	bl	800b7a4 <_svfiprintf_r>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
 8009426:	b01c      	add	sp, #112	@ 0x70
 8009428:	f85d eb04 	ldr.w	lr, [sp], #4
 800942c:	b003      	add	sp, #12
 800942e:	4770      	bx	lr
 8009430:	20000190 	.word	0x20000190
 8009434:	ffff0208 	.word	0xffff0208

08009438 <__sread>:
 8009438:	b510      	push	{r4, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	f000 f912 	bl	8009668 <_read_r>
 8009444:	2800      	cmp	r0, #0
 8009446:	bfab      	itete	ge
 8009448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800944a:	89a3      	ldrhlt	r3, [r4, #12]
 800944c:	181b      	addge	r3, r3, r0
 800944e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009452:	bfac      	ite	ge
 8009454:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009456:	81a3      	strhlt	r3, [r4, #12]
 8009458:	bd10      	pop	{r4, pc}

0800945a <__swrite>:
 800945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	461f      	mov	r7, r3
 8009460:	898b      	ldrh	r3, [r1, #12]
 8009462:	05db      	lsls	r3, r3, #23
 8009464:	4605      	mov	r5, r0
 8009466:	460c      	mov	r4, r1
 8009468:	4616      	mov	r6, r2
 800946a:	d505      	bpl.n	8009478 <__swrite+0x1e>
 800946c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009470:	2302      	movs	r3, #2
 8009472:	2200      	movs	r2, #0
 8009474:	f000 f8e6 	bl	8009644 <_lseek_r>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800947e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	4632      	mov	r2, r6
 8009486:	463b      	mov	r3, r7
 8009488:	4628      	mov	r0, r5
 800948a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800948e:	f000 b8fd 	b.w	800968c <_write_r>

08009492 <__sseek>:
 8009492:	b510      	push	{r4, lr}
 8009494:	460c      	mov	r4, r1
 8009496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949a:	f000 f8d3 	bl	8009644 <_lseek_r>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	bf15      	itete	ne
 80094a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094ae:	81a3      	strheq	r3, [r4, #12]
 80094b0:	bf18      	it	ne
 80094b2:	81a3      	strhne	r3, [r4, #12]
 80094b4:	bd10      	pop	{r4, pc}

080094b6 <__sclose>:
 80094b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ba:	f000 b8b3 	b.w	8009624 <_close_r>

080094be <__swbuf_r>:
 80094be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c0:	460e      	mov	r6, r1
 80094c2:	4614      	mov	r4, r2
 80094c4:	4605      	mov	r5, r0
 80094c6:	b118      	cbz	r0, 80094d0 <__swbuf_r+0x12>
 80094c8:	6a03      	ldr	r3, [r0, #32]
 80094ca:	b90b      	cbnz	r3, 80094d0 <__swbuf_r+0x12>
 80094cc:	f7ff fe32 	bl	8009134 <__sinit>
 80094d0:	69a3      	ldr	r3, [r4, #24]
 80094d2:	60a3      	str	r3, [r4, #8]
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	071a      	lsls	r2, r3, #28
 80094d8:	d501      	bpl.n	80094de <__swbuf_r+0x20>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	b943      	cbnz	r3, 80094f0 <__swbuf_r+0x32>
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 f82b 	bl	800953c <__swsetup_r>
 80094e6:	b118      	cbz	r0, 80094f0 <__swbuf_r+0x32>
 80094e8:	f04f 37ff 	mov.w	r7, #4294967295
 80094ec:	4638      	mov	r0, r7
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	6922      	ldr	r2, [r4, #16]
 80094f4:	1a98      	subs	r0, r3, r2
 80094f6:	6963      	ldr	r3, [r4, #20]
 80094f8:	b2f6      	uxtb	r6, r6
 80094fa:	4283      	cmp	r3, r0
 80094fc:	4637      	mov	r7, r6
 80094fe:	dc05      	bgt.n	800950c <__swbuf_r+0x4e>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f002 fc10 	bl	800bd28 <_fflush_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1ed      	bne.n	80094e8 <__swbuf_r+0x2a>
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	3b01      	subs	r3, #1
 8009510:	60a3      	str	r3, [r4, #8]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	701e      	strb	r6, [r3, #0]
 800951a:	6962      	ldr	r2, [r4, #20]
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	429a      	cmp	r2, r3
 8009520:	d004      	beq.n	800952c <__swbuf_r+0x6e>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	07db      	lsls	r3, r3, #31
 8009526:	d5e1      	bpl.n	80094ec <__swbuf_r+0x2e>
 8009528:	2e0a      	cmp	r6, #10
 800952a:	d1df      	bne.n	80094ec <__swbuf_r+0x2e>
 800952c:	4621      	mov	r1, r4
 800952e:	4628      	mov	r0, r5
 8009530:	f002 fbfa 	bl	800bd28 <_fflush_r>
 8009534:	2800      	cmp	r0, #0
 8009536:	d0d9      	beq.n	80094ec <__swbuf_r+0x2e>
 8009538:	e7d6      	b.n	80094e8 <__swbuf_r+0x2a>
	...

0800953c <__swsetup_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4b29      	ldr	r3, [pc, #164]	@ (80095e4 <__swsetup_r+0xa8>)
 8009540:	4605      	mov	r5, r0
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	460c      	mov	r4, r1
 8009546:	b118      	cbz	r0, 8009550 <__swsetup_r+0x14>
 8009548:	6a03      	ldr	r3, [r0, #32]
 800954a:	b90b      	cbnz	r3, 8009550 <__swsetup_r+0x14>
 800954c:	f7ff fdf2 	bl	8009134 <__sinit>
 8009550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009554:	0719      	lsls	r1, r3, #28
 8009556:	d422      	bmi.n	800959e <__swsetup_r+0x62>
 8009558:	06da      	lsls	r2, r3, #27
 800955a:	d407      	bmi.n	800956c <__swsetup_r+0x30>
 800955c:	2209      	movs	r2, #9
 800955e:	602a      	str	r2, [r5, #0]
 8009560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	e033      	b.n	80095d4 <__swsetup_r+0x98>
 800956c:	0758      	lsls	r0, r3, #29
 800956e:	d512      	bpl.n	8009596 <__swsetup_r+0x5a>
 8009570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009572:	b141      	cbz	r1, 8009586 <__swsetup_r+0x4a>
 8009574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009578:	4299      	cmp	r1, r3
 800957a:	d002      	beq.n	8009582 <__swsetup_r+0x46>
 800957c:	4628      	mov	r0, r5
 800957e:	f000 ff2f 	bl	800a3e0 <_free_r>
 8009582:	2300      	movs	r3, #0
 8009584:	6363      	str	r3, [r4, #52]	@ 0x34
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	2300      	movs	r3, #0
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f043 0308 	orr.w	r3, r3, #8
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	b94b      	cbnz	r3, 80095b6 <__swsetup_r+0x7a>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ac:	d003      	beq.n	80095b6 <__swsetup_r+0x7a>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f002 fc07 	bl	800bdc4 <__smakebuf_r>
 80095b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ba:	f013 0201 	ands.w	r2, r3, #1
 80095be:	d00a      	beq.n	80095d6 <__swsetup_r+0x9a>
 80095c0:	2200      	movs	r2, #0
 80095c2:	60a2      	str	r2, [r4, #8]
 80095c4:	6962      	ldr	r2, [r4, #20]
 80095c6:	4252      	negs	r2, r2
 80095c8:	61a2      	str	r2, [r4, #24]
 80095ca:	6922      	ldr	r2, [r4, #16]
 80095cc:	b942      	cbnz	r2, 80095e0 <__swsetup_r+0xa4>
 80095ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095d2:	d1c5      	bne.n	8009560 <__swsetup_r+0x24>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	0799      	lsls	r1, r3, #30
 80095d8:	bf58      	it	pl
 80095da:	6962      	ldrpl	r2, [r4, #20]
 80095dc:	60a2      	str	r2, [r4, #8]
 80095de:	e7f4      	b.n	80095ca <__swsetup_r+0x8e>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7f7      	b.n	80095d4 <__swsetup_r+0x98>
 80095e4:	20000190 	.word	0x20000190

080095e8 <memset>:
 80095e8:	4402      	add	r2, r0
 80095ea:	4603      	mov	r3, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <strncmp>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	b16a      	cbz	r2, 8009618 <strncmp+0x20>
 80095fc:	3901      	subs	r1, #1
 80095fe:	1884      	adds	r4, r0, r2
 8009600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009604:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009608:	429a      	cmp	r2, r3
 800960a:	d103      	bne.n	8009614 <strncmp+0x1c>
 800960c:	42a0      	cmp	r0, r4
 800960e:	d001      	beq.n	8009614 <strncmp+0x1c>
 8009610:	2a00      	cmp	r2, #0
 8009612:	d1f5      	bne.n	8009600 <strncmp+0x8>
 8009614:	1ad0      	subs	r0, r2, r3
 8009616:	bd10      	pop	{r4, pc}
 8009618:	4610      	mov	r0, r2
 800961a:	e7fc      	b.n	8009616 <strncmp+0x1e>

0800961c <_localeconv_r>:
 800961c:	4800      	ldr	r0, [pc, #0]	@ (8009620 <_localeconv_r+0x4>)
 800961e:	4770      	bx	lr
 8009620:	20000114 	.word	0x20000114

08009624 <_close_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d06      	ldr	r5, [pc, #24]	@ (8009640 <_close_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7f8 fe0c 	bl	800224c <_close>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_close_r+0x1a>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_close_r+0x1a>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	200006a0 	.word	0x200006a0

08009644 <_lseek_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	@ (8009664 <_lseek_r+0x20>)
 8009648:	4604      	mov	r4, r0
 800964a:	4608      	mov	r0, r1
 800964c:	4611      	mov	r1, r2
 800964e:	2200      	movs	r2, #0
 8009650:	602a      	str	r2, [r5, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f7f8 fe21 	bl	800229a <_lseek>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_lseek_r+0x1e>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_lseek_r+0x1e>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	200006a0 	.word	0x200006a0

08009668 <_read_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d07      	ldr	r5, [pc, #28]	@ (8009688 <_read_r+0x20>)
 800966c:	4604      	mov	r4, r0
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	2200      	movs	r2, #0
 8009674:	602a      	str	r2, [r5, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f7f8 fdcb 	bl	8002212 <_read>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_read_r+0x1e>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_read_r+0x1e>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	200006a0 	.word	0x200006a0

0800968c <_write_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d07      	ldr	r5, [pc, #28]	@ (80096ac <_write_r+0x20>)
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	2200      	movs	r2, #0
 8009698:	602a      	str	r2, [r5, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	f7f8 f8ca 	bl	8001834 <_write>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_write_r+0x1e>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_write_r+0x1e>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	200006a0 	.word	0x200006a0

080096b0 <__errno>:
 80096b0:	4b01      	ldr	r3, [pc, #4]	@ (80096b8 <__errno+0x8>)
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000190 	.word	0x20000190

080096bc <__libc_init_array>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	4d0d      	ldr	r5, [pc, #52]	@ (80096f4 <__libc_init_array+0x38>)
 80096c0:	4c0d      	ldr	r4, [pc, #52]	@ (80096f8 <__libc_init_array+0x3c>)
 80096c2:	1b64      	subs	r4, r4, r5
 80096c4:	10a4      	asrs	r4, r4, #2
 80096c6:	2600      	movs	r6, #0
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	d109      	bne.n	80096e0 <__libc_init_array+0x24>
 80096cc:	4d0b      	ldr	r5, [pc, #44]	@ (80096fc <__libc_init_array+0x40>)
 80096ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009700 <__libc_init_array+0x44>)
 80096d0:	f002 fcc6 	bl	800c060 <_init>
 80096d4:	1b64      	subs	r4, r4, r5
 80096d6:	10a4      	asrs	r4, r4, #2
 80096d8:	2600      	movs	r6, #0
 80096da:	42a6      	cmp	r6, r4
 80096dc:	d105      	bne.n	80096ea <__libc_init_array+0x2e>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e4:	4798      	blx	r3
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7ee      	b.n	80096c8 <__libc_init_array+0xc>
 80096ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ee:	4798      	blx	r3
 80096f0:	3601      	adds	r6, #1
 80096f2:	e7f2      	b.n	80096da <__libc_init_array+0x1e>
 80096f4:	0800c548 	.word	0x0800c548
 80096f8:	0800c548 	.word	0x0800c548
 80096fc:	0800c548 	.word	0x0800c548
 8009700:	0800c54c 	.word	0x0800c54c

08009704 <__retarget_lock_init_recursive>:
 8009704:	4770      	bx	lr

08009706 <__retarget_lock_acquire_recursive>:
 8009706:	4770      	bx	lr

08009708 <__retarget_lock_release_recursive>:
 8009708:	4770      	bx	lr

0800970a <memcpy>:
 800970a:	440a      	add	r2, r1
 800970c:	4291      	cmp	r1, r2
 800970e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009712:	d100      	bne.n	8009716 <memcpy+0xc>
 8009714:	4770      	bx	lr
 8009716:	b510      	push	{r4, lr}
 8009718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009720:	4291      	cmp	r1, r2
 8009722:	d1f9      	bne.n	8009718 <memcpy+0xe>
 8009724:	bd10      	pop	{r4, pc}
	...

08009728 <nan>:
 8009728:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009730 <nan+0x8>
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	00000000 	.word	0x00000000
 8009734:	7ff80000 	.word	0x7ff80000

08009738 <nanf>:
 8009738:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009740 <nanf+0x8>
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	7fc00000 	.word	0x7fc00000

08009744 <quorem>:
 8009744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	690c      	ldr	r4, [r1, #16]
 800974c:	42a3      	cmp	r3, r4
 800974e:	4607      	mov	r7, r0
 8009750:	db7e      	blt.n	8009850 <quorem+0x10c>
 8009752:	3c01      	subs	r4, #1
 8009754:	f101 0814 	add.w	r8, r1, #20
 8009758:	00a3      	lsls	r3, r4, #2
 800975a:	f100 0514 	add.w	r5, r0, #20
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800976a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976e:	3301      	adds	r3, #1
 8009770:	429a      	cmp	r2, r3
 8009772:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009776:	fbb2 f6f3 	udiv	r6, r2, r3
 800977a:	d32e      	bcc.n	80097da <quorem+0x96>
 800977c:	f04f 0a00 	mov.w	sl, #0
 8009780:	46c4      	mov	ip, r8
 8009782:	46ae      	mov	lr, r5
 8009784:	46d3      	mov	fp, sl
 8009786:	f85c 3b04 	ldr.w	r3, [ip], #4
 800978a:	b298      	uxth	r0, r3
 800978c:	fb06 a000 	mla	r0, r6, r0, sl
 8009790:	0c02      	lsrs	r2, r0, #16
 8009792:	0c1b      	lsrs	r3, r3, #16
 8009794:	fb06 2303 	mla	r3, r6, r3, r2
 8009798:	f8de 2000 	ldr.w	r2, [lr]
 800979c:	b280      	uxth	r0, r0
 800979e:	b292      	uxth	r2, r2
 80097a0:	1a12      	subs	r2, r2, r0
 80097a2:	445a      	add	r2, fp
 80097a4:	f8de 0000 	ldr.w	r0, [lr]
 80097a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80097b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80097b6:	b292      	uxth	r2, r2
 80097b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80097bc:	45e1      	cmp	r9, ip
 80097be:	f84e 2b04 	str.w	r2, [lr], #4
 80097c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097c6:	d2de      	bcs.n	8009786 <quorem+0x42>
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	58eb      	ldr	r3, [r5, r3]
 80097cc:	b92b      	cbnz	r3, 80097da <quorem+0x96>
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	429d      	cmp	r5, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	d32f      	bcc.n	8009838 <quorem+0xf4>
 80097d8:	613c      	str	r4, [r7, #16]
 80097da:	4638      	mov	r0, r7
 80097dc:	f001 fd10 	bl	800b200 <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	db25      	blt.n	8009830 <quorem+0xec>
 80097e4:	4629      	mov	r1, r5
 80097e6:	2000      	movs	r0, #0
 80097e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097ec:	f8d1 c000 	ldr.w	ip, [r1]
 80097f0:	fa1f fe82 	uxth.w	lr, r2
 80097f4:	fa1f f38c 	uxth.w	r3, ip
 80097f8:	eba3 030e 	sub.w	r3, r3, lr
 80097fc:	4403      	add	r3, r0
 80097fe:	0c12      	lsrs	r2, r2, #16
 8009800:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009804:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009808:	b29b      	uxth	r3, r3
 800980a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800980e:	45c1      	cmp	r9, r8
 8009810:	f841 3b04 	str.w	r3, [r1], #4
 8009814:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009818:	d2e6      	bcs.n	80097e8 <quorem+0xa4>
 800981a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800981e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009822:	b922      	cbnz	r2, 800982e <quorem+0xea>
 8009824:	3b04      	subs	r3, #4
 8009826:	429d      	cmp	r5, r3
 8009828:	461a      	mov	r2, r3
 800982a:	d30b      	bcc.n	8009844 <quorem+0x100>
 800982c:	613c      	str	r4, [r7, #16]
 800982e:	3601      	adds	r6, #1
 8009830:	4630      	mov	r0, r6
 8009832:	b003      	add	sp, #12
 8009834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	3b04      	subs	r3, #4
 800983c:	2a00      	cmp	r2, #0
 800983e:	d1cb      	bne.n	80097d8 <quorem+0x94>
 8009840:	3c01      	subs	r4, #1
 8009842:	e7c6      	b.n	80097d2 <quorem+0x8e>
 8009844:	6812      	ldr	r2, [r2, #0]
 8009846:	3b04      	subs	r3, #4
 8009848:	2a00      	cmp	r2, #0
 800984a:	d1ef      	bne.n	800982c <quorem+0xe8>
 800984c:	3c01      	subs	r4, #1
 800984e:	e7ea      	b.n	8009826 <quorem+0xe2>
 8009850:	2000      	movs	r0, #0
 8009852:	e7ee      	b.n	8009832 <quorem+0xee>
 8009854:	0000      	movs	r0, r0
	...

08009858 <_dtoa_r>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	69c7      	ldr	r7, [r0, #28]
 800985e:	b099      	sub	sp, #100	@ 0x64
 8009860:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009864:	ec55 4b10 	vmov	r4, r5, d0
 8009868:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800986a:	9109      	str	r1, [sp, #36]	@ 0x24
 800986c:	4683      	mov	fp, r0
 800986e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009870:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009872:	b97f      	cbnz	r7, 8009894 <_dtoa_r+0x3c>
 8009874:	2010      	movs	r0, #16
 8009876:	f001 f937 	bl	800aae8 <malloc>
 800987a:	4602      	mov	r2, r0
 800987c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009880:	b920      	cbnz	r0, 800988c <_dtoa_r+0x34>
 8009882:	4ba7      	ldr	r3, [pc, #668]	@ (8009b20 <_dtoa_r+0x2c8>)
 8009884:	21ef      	movs	r1, #239	@ 0xef
 8009886:	48a7      	ldr	r0, [pc, #668]	@ (8009b24 <_dtoa_r+0x2cc>)
 8009888:	f002 fb24 	bl	800bed4 <__assert_func>
 800988c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009890:	6007      	str	r7, [r0, #0]
 8009892:	60c7      	str	r7, [r0, #12]
 8009894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009898:	6819      	ldr	r1, [r3, #0]
 800989a:	b159      	cbz	r1, 80098b4 <_dtoa_r+0x5c>
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	604a      	str	r2, [r1, #4]
 80098a0:	2301      	movs	r3, #1
 80098a2:	4093      	lsls	r3, r2
 80098a4:	608b      	str	r3, [r1, #8]
 80098a6:	4658      	mov	r0, fp
 80098a8:	f001 fa26 	bl	800acf8 <_Bfree>
 80098ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	1e2b      	subs	r3, r5, #0
 80098b6:	bfb9      	ittee	lt
 80098b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80098bc:	9303      	strlt	r3, [sp, #12]
 80098be:	2300      	movge	r3, #0
 80098c0:	6033      	strge	r3, [r6, #0]
 80098c2:	9f03      	ldr	r7, [sp, #12]
 80098c4:	4b98      	ldr	r3, [pc, #608]	@ (8009b28 <_dtoa_r+0x2d0>)
 80098c6:	bfbc      	itt	lt
 80098c8:	2201      	movlt	r2, #1
 80098ca:	6032      	strlt	r2, [r6, #0]
 80098cc:	43bb      	bics	r3, r7
 80098ce:	d112      	bne.n	80098f6 <_dtoa_r+0x9e>
 80098d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098dc:	4323      	orrs	r3, r4
 80098de:	f000 854d 	beq.w	800a37c <_dtoa_r+0xb24>
 80098e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b3c <_dtoa_r+0x2e4>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 854f 	beq.w	800a38c <_dtoa_r+0xb34>
 80098ee:	f10a 0303 	add.w	r3, sl, #3
 80098f2:	f000 bd49 	b.w	800a388 <_dtoa_r+0xb30>
 80098f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	ec51 0b17 	vmov	r0, r1, d7
 8009900:	2300      	movs	r3, #0
 8009902:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009906:	f7f7 f907 	bl	8000b18 <__aeabi_dcmpeq>
 800990a:	4680      	mov	r8, r0
 800990c:	b158      	cbz	r0, 8009926 <_dtoa_r+0xce>
 800990e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009910:	2301      	movs	r3, #1
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009916:	b113      	cbz	r3, 800991e <_dtoa_r+0xc6>
 8009918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800991a:	4b84      	ldr	r3, [pc, #528]	@ (8009b2c <_dtoa_r+0x2d4>)
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009b40 <_dtoa_r+0x2e8>
 8009922:	f000 bd33 	b.w	800a38c <_dtoa_r+0xb34>
 8009926:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800992a:	aa16      	add	r2, sp, #88	@ 0x58
 800992c:	a917      	add	r1, sp, #92	@ 0x5c
 800992e:	4658      	mov	r0, fp
 8009930:	f001 fd86 	bl	800b440 <__d2b>
 8009934:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009938:	4681      	mov	r9, r0
 800993a:	2e00      	cmp	r6, #0
 800993c:	d077      	beq.n	8009a2e <_dtoa_r+0x1d6>
 800993e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009940:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800994c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009950:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009954:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009958:	4619      	mov	r1, r3
 800995a:	2200      	movs	r2, #0
 800995c:	4b74      	ldr	r3, [pc, #464]	@ (8009b30 <_dtoa_r+0x2d8>)
 800995e:	f7f6 fcbb 	bl	80002d8 <__aeabi_dsub>
 8009962:	a369      	add	r3, pc, #420	@ (adr r3, 8009b08 <_dtoa_r+0x2b0>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fe6e 	bl	8000648 <__aeabi_dmul>
 800996c:	a368      	add	r3, pc, #416	@ (adr r3, 8009b10 <_dtoa_r+0x2b8>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fcb3 	bl	80002dc <__adddf3>
 8009976:	4604      	mov	r4, r0
 8009978:	4630      	mov	r0, r6
 800997a:	460d      	mov	r5, r1
 800997c:	f7f6 fdfa 	bl	8000574 <__aeabi_i2d>
 8009980:	a365      	add	r3, pc, #404	@ (adr r3, 8009b18 <_dtoa_r+0x2c0>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fe5f 	bl	8000648 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 fca3 	bl	80002dc <__adddf3>
 8009996:	4604      	mov	r4, r0
 8009998:	460d      	mov	r5, r1
 800999a:	f7f7 f905 	bl	8000ba8 <__aeabi_d2iz>
 800999e:	2200      	movs	r2, #0
 80099a0:	4607      	mov	r7, r0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f7 f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80099ac:	b140      	cbz	r0, 80099c0 <_dtoa_r+0x168>
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7f6 fde0 	bl	8000574 <__aeabi_i2d>
 80099b4:	4622      	mov	r2, r4
 80099b6:	462b      	mov	r3, r5
 80099b8:	f7f7 f8ae 	bl	8000b18 <__aeabi_dcmpeq>
 80099bc:	b900      	cbnz	r0, 80099c0 <_dtoa_r+0x168>
 80099be:	3f01      	subs	r7, #1
 80099c0:	2f16      	cmp	r7, #22
 80099c2:	d851      	bhi.n	8009a68 <_dtoa_r+0x210>
 80099c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009b34 <_dtoa_r+0x2dc>)
 80099c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099d2:	f7f7 f8ab 	bl	8000b2c <__aeabi_dcmplt>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d048      	beq.n	8009a6c <_dtoa_r+0x214>
 80099da:	3f01      	subs	r7, #1
 80099dc:	2300      	movs	r3, #0
 80099de:	9312      	str	r3, [sp, #72]	@ 0x48
 80099e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099e2:	1b9b      	subs	r3, r3, r6
 80099e4:	1e5a      	subs	r2, r3, #1
 80099e6:	bf44      	itt	mi
 80099e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80099ec:	2300      	movmi	r3, #0
 80099ee:	9208      	str	r2, [sp, #32]
 80099f0:	bf54      	ite	pl
 80099f2:	f04f 0800 	movpl.w	r8, #0
 80099f6:	9308      	strmi	r3, [sp, #32]
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	db39      	blt.n	8009a70 <_dtoa_r+0x218>
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009a00:	443b      	add	r3, r7
 8009a02:	9308      	str	r3, [sp, #32]
 8009a04:	2300      	movs	r3, #0
 8009a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	2b09      	cmp	r3, #9
 8009a0c:	d864      	bhi.n	8009ad8 <_dtoa_r+0x280>
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	bfc4      	itt	gt
 8009a12:	3b04      	subgt	r3, #4
 8009a14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a18:	f1a3 0302 	sub.w	r3, r3, #2
 8009a1c:	bfcc      	ite	gt
 8009a1e:	2400      	movgt	r4, #0
 8009a20:	2401      	movle	r4, #1
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d863      	bhi.n	8009aee <_dtoa_r+0x296>
 8009a26:	e8df f003 	tbb	[pc, r3]
 8009a2a:	372a      	.short	0x372a
 8009a2c:	5535      	.short	0x5535
 8009a2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009a32:	441e      	add	r6, r3
 8009a34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	bfc1      	itttt	gt
 8009a3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a40:	409f      	lslgt	r7, r3
 8009a42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a4a:	bfd6      	itet	le
 8009a4c:	f1c3 0320 	rsble	r3, r3, #32
 8009a50:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a54:	fa04 f003 	lslle.w	r0, r4, r3
 8009a58:	f7f6 fd7c 	bl	8000554 <__aeabi_ui2d>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a62:	3e01      	subs	r6, #1
 8009a64:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a66:	e777      	b.n	8009958 <_dtoa_r+0x100>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7b8      	b.n	80099de <_dtoa_r+0x186>
 8009a6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a6e:	e7b7      	b.n	80099e0 <_dtoa_r+0x188>
 8009a70:	427b      	negs	r3, r7
 8009a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a74:	2300      	movs	r3, #0
 8009a76:	eba8 0807 	sub.w	r8, r8, r7
 8009a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a7c:	e7c4      	b.n	8009a08 <_dtoa_r+0x1b0>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dc35      	bgt.n	8009af4 <_dtoa_r+0x29c>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	9307      	str	r3, [sp, #28]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a92:	e00b      	b.n	8009aac <_dtoa_r+0x254>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e7f3      	b.n	8009a80 <_dtoa_r+0x228>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9e:	18fb      	adds	r3, r7, r3
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	bfb8      	it	lt
 8009aaa:	2301      	movlt	r3, #1
 8009aac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	f102 0514 	add.w	r5, r2, #20
 8009ab8:	429d      	cmp	r5, r3
 8009aba:	d91f      	bls.n	8009afc <_dtoa_r+0x2a4>
 8009abc:	6041      	str	r1, [r0, #4]
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f001 f8da 	bl	800ac78 <_Balloc>
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d13c      	bne.n	8009b44 <_dtoa_r+0x2ec>
 8009aca:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <_dtoa_r+0x2e0>)
 8009acc:	4602      	mov	r2, r0
 8009ace:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ad2:	e6d8      	b.n	8009886 <_dtoa_r+0x2e>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e7e0      	b.n	8009a9a <_dtoa_r+0x242>
 8009ad8:	2401      	movs	r4, #1
 8009ada:	2300      	movs	r3, #0
 8009adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ade:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2312      	movs	r3, #18
 8009aec:	e7d0      	b.n	8009a90 <_dtoa_r+0x238>
 8009aee:	2301      	movs	r3, #1
 8009af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009af2:	e7f5      	b.n	8009ae0 <_dtoa_r+0x288>
 8009af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	9307      	str	r3, [sp, #28]
 8009afa:	e7d7      	b.n	8009aac <_dtoa_r+0x254>
 8009afc:	3101      	adds	r1, #1
 8009afe:	0052      	lsls	r2, r2, #1
 8009b00:	e7d8      	b.n	8009ab4 <_dtoa_r+0x25c>
 8009b02:	bf00      	nop
 8009b04:	f3af 8000 	nop.w
 8009b08:	636f4361 	.word	0x636f4361
 8009b0c:	3fd287a7 	.word	0x3fd287a7
 8009b10:	8b60c8b3 	.word	0x8b60c8b3
 8009b14:	3fc68a28 	.word	0x3fc68a28
 8009b18:	509f79fb 	.word	0x509f79fb
 8009b1c:	3fd34413 	.word	0x3fd34413
 8009b20:	0800c1b6 	.word	0x0800c1b6
 8009b24:	0800c1cd 	.word	0x0800c1cd
 8009b28:	7ff00000 	.word	0x7ff00000
 8009b2c:	0800c179 	.word	0x0800c179
 8009b30:	3ff80000 	.word	0x3ff80000
 8009b34:	0800c328 	.word	0x0800c328
 8009b38:	0800c225 	.word	0x0800c225
 8009b3c:	0800c1b2 	.word	0x0800c1b2
 8009b40:	0800c178 	.word	0x0800c178
 8009b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b48:	6018      	str	r0, [r3, #0]
 8009b4a:	9b07      	ldr	r3, [sp, #28]
 8009b4c:	2b0e      	cmp	r3, #14
 8009b4e:	f200 80a4 	bhi.w	8009c9a <_dtoa_r+0x442>
 8009b52:	2c00      	cmp	r4, #0
 8009b54:	f000 80a1 	beq.w	8009c9a <_dtoa_r+0x442>
 8009b58:	2f00      	cmp	r7, #0
 8009b5a:	dd33      	ble.n	8009bc4 <_dtoa_r+0x36c>
 8009b5c:	4bad      	ldr	r3, [pc, #692]	@ (8009e14 <_dtoa_r+0x5bc>)
 8009b5e:	f007 020f 	and.w	r2, r7, #15
 8009b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b66:	ed93 7b00 	vldr	d7, [r3]
 8009b6a:	05f8      	lsls	r0, r7, #23
 8009b6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b74:	d516      	bpl.n	8009ba4 <_dtoa_r+0x34c>
 8009b76:	4ba8      	ldr	r3, [pc, #672]	@ (8009e18 <_dtoa_r+0x5c0>)
 8009b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b80:	f7f6 fe8c 	bl	800089c <__aeabi_ddiv>
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	f004 040f 	and.w	r4, r4, #15
 8009b8c:	2603      	movs	r6, #3
 8009b8e:	4da2      	ldr	r5, [pc, #648]	@ (8009e18 <_dtoa_r+0x5c0>)
 8009b90:	b954      	cbnz	r4, 8009ba8 <_dtoa_r+0x350>
 8009b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	f7f6 fe7f 	bl	800089c <__aeabi_ddiv>
 8009b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba2:	e028      	b.n	8009bf6 <_dtoa_r+0x39e>
 8009ba4:	2602      	movs	r6, #2
 8009ba6:	e7f2      	b.n	8009b8e <_dtoa_r+0x336>
 8009ba8:	07e1      	lsls	r1, r4, #31
 8009baa:	d508      	bpl.n	8009bbe <_dtoa_r+0x366>
 8009bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bb4:	f7f6 fd48 	bl	8000648 <__aeabi_dmul>
 8009bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bbc:	3601      	adds	r6, #1
 8009bbe:	1064      	asrs	r4, r4, #1
 8009bc0:	3508      	adds	r5, #8
 8009bc2:	e7e5      	b.n	8009b90 <_dtoa_r+0x338>
 8009bc4:	f000 80d2 	beq.w	8009d6c <_dtoa_r+0x514>
 8009bc8:	427c      	negs	r4, r7
 8009bca:	4b92      	ldr	r3, [pc, #584]	@ (8009e14 <_dtoa_r+0x5bc>)
 8009bcc:	4d92      	ldr	r5, [pc, #584]	@ (8009e18 <_dtoa_r+0x5c0>)
 8009bce:	f004 020f 	and.w	r2, r4, #15
 8009bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bde:	f7f6 fd33 	bl	8000648 <__aeabi_dmul>
 8009be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be6:	1124      	asrs	r4, r4, #4
 8009be8:	2300      	movs	r3, #0
 8009bea:	2602      	movs	r6, #2
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	f040 80b2 	bne.w	8009d56 <_dtoa_r+0x4fe>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1d3      	bne.n	8009b9e <_dtoa_r+0x346>
 8009bf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80b7 	beq.w	8009d70 <_dtoa_r+0x518>
 8009c02:	4b86      	ldr	r3, [pc, #536]	@ (8009e1c <_dtoa_r+0x5c4>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 ff8f 	bl	8000b2c <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f000 80ae 	beq.w	8009d70 <_dtoa_r+0x518>
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80aa 	beq.w	8009d70 <_dtoa_r+0x518>
 8009c1c:	9b00      	ldr	r3, [sp, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	dd37      	ble.n	8009c92 <_dtoa_r+0x43a>
 8009c22:	1e7b      	subs	r3, r7, #1
 8009c24:	9304      	str	r3, [sp, #16]
 8009c26:	4620      	mov	r0, r4
 8009c28:	4b7d      	ldr	r3, [pc, #500]	@ (8009e20 <_dtoa_r+0x5c8>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 fd0b 	bl	8000648 <__aeabi_dmul>
 8009c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c36:	9c00      	ldr	r4, [sp, #0]
 8009c38:	3601      	adds	r6, #1
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7f6 fc9a 	bl	8000574 <__aeabi_i2d>
 8009c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c44:	f7f6 fd00 	bl	8000648 <__aeabi_dmul>
 8009c48:	4b76      	ldr	r3, [pc, #472]	@ (8009e24 <_dtoa_r+0x5cc>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f7f6 fb46 	bl	80002dc <__adddf3>
 8009c50:	4605      	mov	r5, r0
 8009c52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c56:	2c00      	cmp	r4, #0
 8009c58:	f040 808d 	bne.w	8009d76 <_dtoa_r+0x51e>
 8009c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c60:	4b71      	ldr	r3, [pc, #452]	@ (8009e28 <_dtoa_r+0x5d0>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	f7f6 fb38 	bl	80002d8 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c70:	462a      	mov	r2, r5
 8009c72:	4633      	mov	r3, r6
 8009c74:	f7f6 ff78 	bl	8000b68 <__aeabi_dcmpgt>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f040 828b 	bne.w	800a194 <_dtoa_r+0x93c>
 8009c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c82:	462a      	mov	r2, r5
 8009c84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c88:	f7f6 ff50 	bl	8000b2c <__aeabi_dcmplt>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f040 8128 	bne.w	8009ee2 <_dtoa_r+0x68a>
 8009c92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009c96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f2c0 815a 	blt.w	8009f56 <_dtoa_r+0x6fe>
 8009ca2:	2f0e      	cmp	r7, #14
 8009ca4:	f300 8157 	bgt.w	8009f56 <_dtoa_r+0x6fe>
 8009ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e14 <_dtoa_r+0x5bc>)
 8009caa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cae:	ed93 7b00 	vldr	d7, [r3]
 8009cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	ed8d 7b00 	vstr	d7, [sp]
 8009cba:	da03      	bge.n	8009cc4 <_dtoa_r+0x46c>
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f340 8101 	ble.w	8009ec6 <_dtoa_r+0x66e>
 8009cc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cc8:	4656      	mov	r6, sl
 8009cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 fde3 	bl	800089c <__aeabi_ddiv>
 8009cd6:	f7f6 ff67 	bl	8000ba8 <__aeabi_d2iz>
 8009cda:	4680      	mov	r8, r0
 8009cdc:	f7f6 fc4a 	bl	8000574 <__aeabi_i2d>
 8009ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce4:	f7f6 fcb0 	bl	8000648 <__aeabi_dmul>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cf4:	f7f6 faf0 	bl	80002d8 <__aeabi_dsub>
 8009cf8:	f806 4b01 	strb.w	r4, [r6], #1
 8009cfc:	9d07      	ldr	r5, [sp, #28]
 8009cfe:	eba6 040a 	sub.w	r4, r6, sl
 8009d02:	42a5      	cmp	r5, r4
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	f040 8117 	bne.w	8009f3a <_dtoa_r+0x6e2>
 8009d0c:	f7f6 fae6 	bl	80002dc <__adddf3>
 8009d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	f7f6 ff26 	bl	8000b68 <__aeabi_dcmpgt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f040 80f9 	bne.w	8009f14 <_dtoa_r+0x6bc>
 8009d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 fef5 	bl	8000b18 <__aeabi_dcmpeq>
 8009d2e:	b118      	cbz	r0, 8009d38 <_dtoa_r+0x4e0>
 8009d30:	f018 0f01 	tst.w	r8, #1
 8009d34:	f040 80ee 	bne.w	8009f14 <_dtoa_r+0x6bc>
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 ffdc 	bl	800acf8 <_Bfree>
 8009d40:	2300      	movs	r3, #0
 8009d42:	7033      	strb	r3, [r6, #0]
 8009d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d46:	3701      	adds	r7, #1
 8009d48:	601f      	str	r7, [r3, #0]
 8009d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 831d 	beq.w	800a38c <_dtoa_r+0xb34>
 8009d52:	601e      	str	r6, [r3, #0]
 8009d54:	e31a      	b.n	800a38c <_dtoa_r+0xb34>
 8009d56:	07e2      	lsls	r2, r4, #31
 8009d58:	d505      	bpl.n	8009d66 <_dtoa_r+0x50e>
 8009d5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d5e:	f7f6 fc73 	bl	8000648 <__aeabi_dmul>
 8009d62:	3601      	adds	r6, #1
 8009d64:	2301      	movs	r3, #1
 8009d66:	1064      	asrs	r4, r4, #1
 8009d68:	3508      	adds	r5, #8
 8009d6a:	e73f      	b.n	8009bec <_dtoa_r+0x394>
 8009d6c:	2602      	movs	r6, #2
 8009d6e:	e742      	b.n	8009bf6 <_dtoa_r+0x39e>
 8009d70:	9c07      	ldr	r4, [sp, #28]
 8009d72:	9704      	str	r7, [sp, #16]
 8009d74:	e761      	b.n	8009c3a <_dtoa_r+0x3e2>
 8009d76:	4b27      	ldr	r3, [pc, #156]	@ (8009e14 <_dtoa_r+0x5bc>)
 8009d78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d82:	4454      	add	r4, sl
 8009d84:	2900      	cmp	r1, #0
 8009d86:	d053      	beq.n	8009e30 <_dtoa_r+0x5d8>
 8009d88:	4928      	ldr	r1, [pc, #160]	@ (8009e2c <_dtoa_r+0x5d4>)
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f7f6 fd86 	bl	800089c <__aeabi_ddiv>
 8009d90:	4633      	mov	r3, r6
 8009d92:	462a      	mov	r2, r5
 8009d94:	f7f6 faa0 	bl	80002d8 <__aeabi_dsub>
 8009d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d9c:	4656      	mov	r6, sl
 8009d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da2:	f7f6 ff01 	bl	8000ba8 <__aeabi_d2iz>
 8009da6:	4605      	mov	r5, r0
 8009da8:	f7f6 fbe4 	bl	8000574 <__aeabi_i2d>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db4:	f7f6 fa90 	bl	80002d8 <__aeabi_dsub>
 8009db8:	3530      	adds	r5, #48	@ 0x30
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc2:	f806 5b01 	strb.w	r5, [r6], #1
 8009dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dca:	f7f6 feaf 	bl	8000b2c <__aeabi_dcmplt>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d171      	bne.n	8009eb6 <_dtoa_r+0x65e>
 8009dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dd6:	4911      	ldr	r1, [pc, #68]	@ (8009e1c <_dtoa_r+0x5c4>)
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f7f6 fa7d 	bl	80002d8 <__aeabi_dsub>
 8009dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009de2:	f7f6 fea3 	bl	8000b2c <__aeabi_dcmplt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f040 8095 	bne.w	8009f16 <_dtoa_r+0x6be>
 8009dec:	42a6      	cmp	r6, r4
 8009dee:	f43f af50 	beq.w	8009c92 <_dtoa_r+0x43a>
 8009df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009df6:	4b0a      	ldr	r3, [pc, #40]	@ (8009e20 <_dtoa_r+0x5c8>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f7f6 fc25 	bl	8000648 <__aeabi_dmul>
 8009dfe:	4b08      	ldr	r3, [pc, #32]	@ (8009e20 <_dtoa_r+0x5c8>)
 8009e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e04:	2200      	movs	r2, #0
 8009e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0a:	f7f6 fc1d 	bl	8000648 <__aeabi_dmul>
 8009e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e12:	e7c4      	b.n	8009d9e <_dtoa_r+0x546>
 8009e14:	0800c328 	.word	0x0800c328
 8009e18:	0800c300 	.word	0x0800c300
 8009e1c:	3ff00000 	.word	0x3ff00000
 8009e20:	40240000 	.word	0x40240000
 8009e24:	401c0000 	.word	0x401c0000
 8009e28:	40140000 	.word	0x40140000
 8009e2c:	3fe00000 	.word	0x3fe00000
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7f6 fc08 	bl	8000648 <__aeabi_dmul>
 8009e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009e3e:	4656      	mov	r6, sl
 8009e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e44:	f7f6 feb0 	bl	8000ba8 <__aeabi_d2iz>
 8009e48:	4605      	mov	r5, r0
 8009e4a:	f7f6 fb93 	bl	8000574 <__aeabi_i2d>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e56:	f7f6 fa3f 	bl	80002d8 <__aeabi_dsub>
 8009e5a:	3530      	adds	r5, #48	@ 0x30
 8009e5c:	f806 5b01 	strb.w	r5, [r6], #1
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	42a6      	cmp	r6, r4
 8009e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	d124      	bne.n	8009eba <_dtoa_r+0x662>
 8009e70:	4bac      	ldr	r3, [pc, #688]	@ (800a124 <_dtoa_r+0x8cc>)
 8009e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e76:	f7f6 fa31 	bl	80002dc <__adddf3>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e82:	f7f6 fe71 	bl	8000b68 <__aeabi_dcmpgt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d145      	bne.n	8009f16 <_dtoa_r+0x6be>
 8009e8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e8e:	49a5      	ldr	r1, [pc, #660]	@ (800a124 <_dtoa_r+0x8cc>)
 8009e90:	2000      	movs	r0, #0
 8009e92:	f7f6 fa21 	bl	80002d8 <__aeabi_dsub>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e9e:	f7f6 fe45 	bl	8000b2c <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f43f aef5 	beq.w	8009c92 <_dtoa_r+0x43a>
 8009ea8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009eaa:	1e73      	subs	r3, r6, #1
 8009eac:	9315      	str	r3, [sp, #84]	@ 0x54
 8009eae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009eb2:	2b30      	cmp	r3, #48	@ 0x30
 8009eb4:	d0f8      	beq.n	8009ea8 <_dtoa_r+0x650>
 8009eb6:	9f04      	ldr	r7, [sp, #16]
 8009eb8:	e73e      	b.n	8009d38 <_dtoa_r+0x4e0>
 8009eba:	4b9b      	ldr	r3, [pc, #620]	@ (800a128 <_dtoa_r+0x8d0>)
 8009ebc:	f7f6 fbc4 	bl	8000648 <__aeabi_dmul>
 8009ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec4:	e7bc      	b.n	8009e40 <_dtoa_r+0x5e8>
 8009ec6:	d10c      	bne.n	8009ee2 <_dtoa_r+0x68a>
 8009ec8:	4b98      	ldr	r3, [pc, #608]	@ (800a12c <_dtoa_r+0x8d4>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ed0:	f7f6 fbba 	bl	8000648 <__aeabi_dmul>
 8009ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed8:	f7f6 fe3c 	bl	8000b54 <__aeabi_dcmpge>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f000 8157 	beq.w	800a190 <_dtoa_r+0x938>
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	4625      	mov	r5, r4
 8009ee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	4656      	mov	r6, sl
 8009eee:	2700      	movs	r7, #0
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 ff00 	bl	800acf8 <_Bfree>
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	d0dc      	beq.n	8009eb6 <_dtoa_r+0x65e>
 8009efc:	b12f      	cbz	r7, 8009f0a <_dtoa_r+0x6b2>
 8009efe:	42af      	cmp	r7, r5
 8009f00:	d003      	beq.n	8009f0a <_dtoa_r+0x6b2>
 8009f02:	4639      	mov	r1, r7
 8009f04:	4658      	mov	r0, fp
 8009f06:	f000 fef7 	bl	800acf8 <_Bfree>
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 fef3 	bl	800acf8 <_Bfree>
 8009f12:	e7d0      	b.n	8009eb6 <_dtoa_r+0x65e>
 8009f14:	9704      	str	r7, [sp, #16]
 8009f16:	4633      	mov	r3, r6
 8009f18:	461e      	mov	r6, r3
 8009f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f1e:	2a39      	cmp	r2, #57	@ 0x39
 8009f20:	d107      	bne.n	8009f32 <_dtoa_r+0x6da>
 8009f22:	459a      	cmp	sl, r3
 8009f24:	d1f8      	bne.n	8009f18 <_dtoa_r+0x6c0>
 8009f26:	9a04      	ldr	r2, [sp, #16]
 8009f28:	3201      	adds	r2, #1
 8009f2a:	9204      	str	r2, [sp, #16]
 8009f2c:	2230      	movs	r2, #48	@ 0x30
 8009f2e:	f88a 2000 	strb.w	r2, [sl]
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	3201      	adds	r2, #1
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e7bd      	b.n	8009eb6 <_dtoa_r+0x65e>
 8009f3a:	4b7b      	ldr	r3, [pc, #492]	@ (800a128 <_dtoa_r+0x8d0>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f7f6 fb83 	bl	8000648 <__aeabi_dmul>
 8009f42:	2200      	movs	r2, #0
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	f7f6 fde5 	bl	8000b18 <__aeabi_dcmpeq>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f43f aebb 	beq.w	8009cca <_dtoa_r+0x472>
 8009f54:	e6f0      	b.n	8009d38 <_dtoa_r+0x4e0>
 8009f56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	f000 80db 	beq.w	800a114 <_dtoa_r+0x8bc>
 8009f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f60:	2a01      	cmp	r2, #1
 8009f62:	f300 80bf 	bgt.w	800a0e4 <_dtoa_r+0x88c>
 8009f66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	f000 80b7 	beq.w	800a0dc <_dtoa_r+0x884>
 8009f6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f74:	4646      	mov	r6, r8
 8009f76:	9a08      	ldr	r2, [sp, #32]
 8009f78:	2101      	movs	r1, #1
 8009f7a:	441a      	add	r2, r3
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	4498      	add	r8, r3
 8009f80:	9208      	str	r2, [sp, #32]
 8009f82:	f000 ffb7 	bl	800aef4 <__i2b>
 8009f86:	4605      	mov	r5, r0
 8009f88:	b15e      	cbz	r6, 8009fa2 <_dtoa_r+0x74a>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dd08      	ble.n	8009fa2 <_dtoa_r+0x74a>
 8009f90:	42b3      	cmp	r3, r6
 8009f92:	9a08      	ldr	r2, [sp, #32]
 8009f94:	bfa8      	it	ge
 8009f96:	4633      	movge	r3, r6
 8009f98:	eba8 0803 	sub.w	r8, r8, r3
 8009f9c:	1af6      	subs	r6, r6, r3
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	9308      	str	r3, [sp, #32]
 8009fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fa4:	b1f3      	cbz	r3, 8009fe4 <_dtoa_r+0x78c>
 8009fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80b7 	beq.w	800a11c <_dtoa_r+0x8c4>
 8009fae:	b18c      	cbz	r4, 8009fd4 <_dtoa_r+0x77c>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f001 f85d 	bl	800b074 <__pow5mult>
 8009fba:	464a      	mov	r2, r9
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	4658      	mov	r0, fp
 8009fc2:	f000 ffad 	bl	800af20 <__multiply>
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	9004      	str	r0, [sp, #16]
 8009fca:	4658      	mov	r0, fp
 8009fcc:	f000 fe94 	bl	800acf8 <_Bfree>
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	4699      	mov	r9, r3
 8009fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fd6:	1b1a      	subs	r2, r3, r4
 8009fd8:	d004      	beq.n	8009fe4 <_dtoa_r+0x78c>
 8009fda:	4649      	mov	r1, r9
 8009fdc:	4658      	mov	r0, fp
 8009fde:	f001 f849 	bl	800b074 <__pow5mult>
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	4658      	mov	r0, fp
 8009fe8:	f000 ff84 	bl	800aef4 <__i2b>
 8009fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fee:	4604      	mov	r4, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 81cf 	beq.w	800a394 <_dtoa_r+0xb3c>
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f001 f83a 	bl	800b074 <__pow5mult>
 800a000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a002:	2b01      	cmp	r3, #1
 800a004:	4604      	mov	r4, r0
 800a006:	f300 8095 	bgt.w	800a134 <_dtoa_r+0x8dc>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f040 8087 	bne.w	800a120 <_dtoa_r+0x8c8>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f040 8089 	bne.w	800a130 <_dtoa_r+0x8d8>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a024:	0d1b      	lsrs	r3, r3, #20
 800a026:	051b      	lsls	r3, r3, #20
 800a028:	b12b      	cbz	r3, 800a036 <_dtoa_r+0x7de>
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	3301      	adds	r3, #1
 800a02e:	9308      	str	r3, [sp, #32]
 800a030:	f108 0801 	add.w	r8, r8, #1
 800a034:	2301      	movs	r3, #1
 800a036:	930a      	str	r3, [sp, #40]	@ 0x28
 800a038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 81b0 	beq.w	800a3a0 <_dtoa_r+0xb48>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a046:	6918      	ldr	r0, [r3, #16]
 800a048:	f000 ff08 	bl	800ae5c <__hi0bits>
 800a04c:	f1c0 0020 	rsb	r0, r0, #32
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	4418      	add	r0, r3
 800a054:	f010 001f 	ands.w	r0, r0, #31
 800a058:	d077      	beq.n	800a14a <_dtoa_r+0x8f2>
 800a05a:	f1c0 0320 	rsb	r3, r0, #32
 800a05e:	2b04      	cmp	r3, #4
 800a060:	dd6b      	ble.n	800a13a <_dtoa_r+0x8e2>
 800a062:	9b08      	ldr	r3, [sp, #32]
 800a064:	f1c0 001c 	rsb	r0, r0, #28
 800a068:	4403      	add	r3, r0
 800a06a:	4480      	add	r8, r0
 800a06c:	4406      	add	r6, r0
 800a06e:	9308      	str	r3, [sp, #32]
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	dd05      	ble.n	800a082 <_dtoa_r+0x82a>
 800a076:	4649      	mov	r1, r9
 800a078:	4642      	mov	r2, r8
 800a07a:	4658      	mov	r0, fp
 800a07c:	f001 f854 	bl	800b128 <__lshift>
 800a080:	4681      	mov	r9, r0
 800a082:	9b08      	ldr	r3, [sp, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd05      	ble.n	800a094 <_dtoa_r+0x83c>
 800a088:	4621      	mov	r1, r4
 800a08a:	461a      	mov	r2, r3
 800a08c:	4658      	mov	r0, fp
 800a08e:	f001 f84b 	bl	800b128 <__lshift>
 800a092:	4604      	mov	r4, r0
 800a094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a096:	2b00      	cmp	r3, #0
 800a098:	d059      	beq.n	800a14e <_dtoa_r+0x8f6>
 800a09a:	4621      	mov	r1, r4
 800a09c:	4648      	mov	r0, r9
 800a09e:	f001 f8af 	bl	800b200 <__mcmp>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	da53      	bge.n	800a14e <_dtoa_r+0x8f6>
 800a0a6:	1e7b      	subs	r3, r7, #1
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	220a      	movs	r2, #10
 800a0b0:	4658      	mov	r0, fp
 800a0b2:	f000 fe43 	bl	800ad3c <__multadd>
 800a0b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 8172 	beq.w	800a3a4 <_dtoa_r+0xb4c>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fe38 	bl	800ad3c <__multadd>
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	dc67      	bgt.n	800a1a4 <_dtoa_r+0x94c>
 800a0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	dc41      	bgt.n	800a15e <_dtoa_r+0x906>
 800a0da:	e063      	b.n	800a1a4 <_dtoa_r+0x94c>
 800a0dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a0e2:	e746      	b.n	8009f72 <_dtoa_r+0x71a>
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	1e5c      	subs	r4, r3, #1
 800a0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ea:	42a3      	cmp	r3, r4
 800a0ec:	bfbf      	itttt	lt
 800a0ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a0f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a0f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a0f4:	1ae3      	sublt	r3, r4, r3
 800a0f6:	bfb4      	ite	lt
 800a0f8:	18d2      	addlt	r2, r2, r3
 800a0fa:	1b1c      	subge	r4, r3, r4
 800a0fc:	9b07      	ldr	r3, [sp, #28]
 800a0fe:	bfbc      	itt	lt
 800a100:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a102:	2400      	movlt	r4, #0
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfb5      	itete	lt
 800a108:	eba8 0603 	sublt.w	r6, r8, r3
 800a10c:	9b07      	ldrge	r3, [sp, #28]
 800a10e:	2300      	movlt	r3, #0
 800a110:	4646      	movge	r6, r8
 800a112:	e730      	b.n	8009f76 <_dtoa_r+0x71e>
 800a114:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a116:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a118:	4646      	mov	r6, r8
 800a11a:	e735      	b.n	8009f88 <_dtoa_r+0x730>
 800a11c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a11e:	e75c      	b.n	8009fda <_dtoa_r+0x782>
 800a120:	2300      	movs	r3, #0
 800a122:	e788      	b.n	800a036 <_dtoa_r+0x7de>
 800a124:	3fe00000 	.word	0x3fe00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	40140000 	.word	0x40140000
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	e780      	b.n	800a036 <_dtoa_r+0x7de>
 800a134:	2300      	movs	r3, #0
 800a136:	930a      	str	r3, [sp, #40]	@ 0x28
 800a138:	e782      	b.n	800a040 <_dtoa_r+0x7e8>
 800a13a:	d099      	beq.n	800a070 <_dtoa_r+0x818>
 800a13c:	9a08      	ldr	r2, [sp, #32]
 800a13e:	331c      	adds	r3, #28
 800a140:	441a      	add	r2, r3
 800a142:	4498      	add	r8, r3
 800a144:	441e      	add	r6, r3
 800a146:	9208      	str	r2, [sp, #32]
 800a148:	e792      	b.n	800a070 <_dtoa_r+0x818>
 800a14a:	4603      	mov	r3, r0
 800a14c:	e7f6      	b.n	800a13c <_dtoa_r+0x8e4>
 800a14e:	9b07      	ldr	r3, [sp, #28]
 800a150:	9704      	str	r7, [sp, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dc20      	bgt.n	800a198 <_dtoa_r+0x940>
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	dd1e      	ble.n	800a19c <_dtoa_r+0x944>
 800a15e:	9b00      	ldr	r3, [sp, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f47f aec0 	bne.w	8009ee6 <_dtoa_r+0x68e>
 800a166:	4621      	mov	r1, r4
 800a168:	2205      	movs	r2, #5
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fde6 	bl	800ad3c <__multadd>
 800a170:	4601      	mov	r1, r0
 800a172:	4604      	mov	r4, r0
 800a174:	4648      	mov	r0, r9
 800a176:	f001 f843 	bl	800b200 <__mcmp>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	f77f aeb3 	ble.w	8009ee6 <_dtoa_r+0x68e>
 800a180:	4656      	mov	r6, sl
 800a182:	2331      	movs	r3, #49	@ 0x31
 800a184:	f806 3b01 	strb.w	r3, [r6], #1
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	3301      	adds	r3, #1
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	e6ae      	b.n	8009eee <_dtoa_r+0x696>
 800a190:	9c07      	ldr	r4, [sp, #28]
 800a192:	9704      	str	r7, [sp, #16]
 800a194:	4625      	mov	r5, r4
 800a196:	e7f3      	b.n	800a180 <_dtoa_r+0x928>
 800a198:	9b07      	ldr	r3, [sp, #28]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8104 	beq.w	800a3ac <_dtoa_r+0xb54>
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	dd05      	ble.n	800a1b4 <_dtoa_r+0x95c>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	4658      	mov	r0, fp
 800a1ae:	f000 ffbb 	bl	800b128 <__lshift>
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d05a      	beq.n	800a270 <_dtoa_r+0xa18>
 800a1ba:	6869      	ldr	r1, [r5, #4]
 800a1bc:	4658      	mov	r0, fp
 800a1be:	f000 fd5b 	bl	800ac78 <_Balloc>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b928      	cbnz	r0, 800a1d2 <_dtoa_r+0x97a>
 800a1c6:	4b84      	ldr	r3, [pc, #528]	@ (800a3d8 <_dtoa_r+0xb80>)
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1ce:	f7ff bb5a 	b.w	8009886 <_dtoa_r+0x2e>
 800a1d2:	692a      	ldr	r2, [r5, #16]
 800a1d4:	3202      	adds	r2, #2
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	f105 010c 	add.w	r1, r5, #12
 800a1dc:	300c      	adds	r0, #12
 800a1de:	f7ff fa94 	bl	800970a <memcpy>
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	f000 ff9e 	bl	800b128 <__lshift>
 800a1ec:	f10a 0301 	add.w	r3, sl, #1
 800a1f0:	9307      	str	r3, [sp, #28]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	4453      	add	r3, sl
 800a1f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f8:	9b02      	ldr	r3, [sp, #8]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	462f      	mov	r7, r5
 800a200:	930a      	str	r3, [sp, #40]	@ 0x28
 800a202:	4605      	mov	r5, r0
 800a204:	9b07      	ldr	r3, [sp, #28]
 800a206:	4621      	mov	r1, r4
 800a208:	3b01      	subs	r3, #1
 800a20a:	4648      	mov	r0, r9
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	f7ff fa99 	bl	8009744 <quorem>
 800a212:	4639      	mov	r1, r7
 800a214:	9002      	str	r0, [sp, #8]
 800a216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a21a:	4648      	mov	r0, r9
 800a21c:	f000 fff0 	bl	800b200 <__mcmp>
 800a220:	462a      	mov	r2, r5
 800a222:	9008      	str	r0, [sp, #32]
 800a224:	4621      	mov	r1, r4
 800a226:	4658      	mov	r0, fp
 800a228:	f001 f806 	bl	800b238 <__mdiff>
 800a22c:	68c2      	ldr	r2, [r0, #12]
 800a22e:	4606      	mov	r6, r0
 800a230:	bb02      	cbnz	r2, 800a274 <_dtoa_r+0xa1c>
 800a232:	4601      	mov	r1, r0
 800a234:	4648      	mov	r0, r9
 800a236:	f000 ffe3 	bl	800b200 <__mcmp>
 800a23a:	4602      	mov	r2, r0
 800a23c:	4631      	mov	r1, r6
 800a23e:	4658      	mov	r0, fp
 800a240:	920e      	str	r2, [sp, #56]	@ 0x38
 800a242:	f000 fd59 	bl	800acf8 <_Bfree>
 800a246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a24a:	9e07      	ldr	r6, [sp, #28]
 800a24c:	ea43 0102 	orr.w	r1, r3, r2
 800a250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a252:	4319      	orrs	r1, r3
 800a254:	d110      	bne.n	800a278 <_dtoa_r+0xa20>
 800a256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a25a:	d029      	beq.n	800a2b0 <_dtoa_r+0xa58>
 800a25c:	9b08      	ldr	r3, [sp, #32]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd02      	ble.n	800a268 <_dtoa_r+0xa10>
 800a262:	9b02      	ldr	r3, [sp, #8]
 800a264:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a268:	9b00      	ldr	r3, [sp, #0]
 800a26a:	f883 8000 	strb.w	r8, [r3]
 800a26e:	e63f      	b.n	8009ef0 <_dtoa_r+0x698>
 800a270:	4628      	mov	r0, r5
 800a272:	e7bb      	b.n	800a1ec <_dtoa_r+0x994>
 800a274:	2201      	movs	r2, #1
 800a276:	e7e1      	b.n	800a23c <_dtoa_r+0x9e4>
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	db04      	blt.n	800a288 <_dtoa_r+0xa30>
 800a27e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a280:	430b      	orrs	r3, r1
 800a282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a284:	430b      	orrs	r3, r1
 800a286:	d120      	bne.n	800a2ca <_dtoa_r+0xa72>
 800a288:	2a00      	cmp	r2, #0
 800a28a:	dded      	ble.n	800a268 <_dtoa_r+0xa10>
 800a28c:	4649      	mov	r1, r9
 800a28e:	2201      	movs	r2, #1
 800a290:	4658      	mov	r0, fp
 800a292:	f000 ff49 	bl	800b128 <__lshift>
 800a296:	4621      	mov	r1, r4
 800a298:	4681      	mov	r9, r0
 800a29a:	f000 ffb1 	bl	800b200 <__mcmp>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	dc03      	bgt.n	800a2aa <_dtoa_r+0xa52>
 800a2a2:	d1e1      	bne.n	800a268 <_dtoa_r+0xa10>
 800a2a4:	f018 0f01 	tst.w	r8, #1
 800a2a8:	d0de      	beq.n	800a268 <_dtoa_r+0xa10>
 800a2aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2ae:	d1d8      	bne.n	800a262 <_dtoa_r+0xa0a>
 800a2b0:	9a00      	ldr	r2, [sp, #0]
 800a2b2:	2339      	movs	r3, #57	@ 0x39
 800a2b4:	7013      	strb	r3, [r2, #0]
 800a2b6:	4633      	mov	r3, r6
 800a2b8:	461e      	mov	r6, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2c0:	2a39      	cmp	r2, #57	@ 0x39
 800a2c2:	d052      	beq.n	800a36a <_dtoa_r+0xb12>
 800a2c4:	3201      	adds	r2, #1
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	e612      	b.n	8009ef0 <_dtoa_r+0x698>
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	dd07      	ble.n	800a2de <_dtoa_r+0xa86>
 800a2ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2d2:	d0ed      	beq.n	800a2b0 <_dtoa_r+0xa58>
 800a2d4:	9a00      	ldr	r2, [sp, #0]
 800a2d6:	f108 0301 	add.w	r3, r8, #1
 800a2da:	7013      	strb	r3, [r2, #0]
 800a2dc:	e608      	b.n	8009ef0 <_dtoa_r+0x698>
 800a2de:	9b07      	ldr	r3, [sp, #28]
 800a2e0:	9a07      	ldr	r2, [sp, #28]
 800a2e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a2e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d028      	beq.n	800a33e <_dtoa_r+0xae6>
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	220a      	movs	r2, #10
 800a2f2:	4658      	mov	r0, fp
 800a2f4:	f000 fd22 	bl	800ad3c <__multadd>
 800a2f8:	42af      	cmp	r7, r5
 800a2fa:	4681      	mov	r9, r0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	f04f 020a 	mov.w	r2, #10
 800a304:	4639      	mov	r1, r7
 800a306:	4658      	mov	r0, fp
 800a308:	d107      	bne.n	800a31a <_dtoa_r+0xac2>
 800a30a:	f000 fd17 	bl	800ad3c <__multadd>
 800a30e:	4607      	mov	r7, r0
 800a310:	4605      	mov	r5, r0
 800a312:	9b07      	ldr	r3, [sp, #28]
 800a314:	3301      	adds	r3, #1
 800a316:	9307      	str	r3, [sp, #28]
 800a318:	e774      	b.n	800a204 <_dtoa_r+0x9ac>
 800a31a:	f000 fd0f 	bl	800ad3c <__multadd>
 800a31e:	4629      	mov	r1, r5
 800a320:	4607      	mov	r7, r0
 800a322:	2300      	movs	r3, #0
 800a324:	220a      	movs	r2, #10
 800a326:	4658      	mov	r0, fp
 800a328:	f000 fd08 	bl	800ad3c <__multadd>
 800a32c:	4605      	mov	r5, r0
 800a32e:	e7f0      	b.n	800a312 <_dtoa_r+0xaba>
 800a330:	9b00      	ldr	r3, [sp, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	bfcc      	ite	gt
 800a336:	461e      	movgt	r6, r3
 800a338:	2601      	movle	r6, #1
 800a33a:	4456      	add	r6, sl
 800a33c:	2700      	movs	r7, #0
 800a33e:	4649      	mov	r1, r9
 800a340:	2201      	movs	r2, #1
 800a342:	4658      	mov	r0, fp
 800a344:	f000 fef0 	bl	800b128 <__lshift>
 800a348:	4621      	mov	r1, r4
 800a34a:	4681      	mov	r9, r0
 800a34c:	f000 ff58 	bl	800b200 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	dcb0      	bgt.n	800a2b6 <_dtoa_r+0xa5e>
 800a354:	d102      	bne.n	800a35c <_dtoa_r+0xb04>
 800a356:	f018 0f01 	tst.w	r8, #1
 800a35a:	d1ac      	bne.n	800a2b6 <_dtoa_r+0xa5e>
 800a35c:	4633      	mov	r3, r6
 800a35e:	461e      	mov	r6, r3
 800a360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a364:	2a30      	cmp	r2, #48	@ 0x30
 800a366:	d0fa      	beq.n	800a35e <_dtoa_r+0xb06>
 800a368:	e5c2      	b.n	8009ef0 <_dtoa_r+0x698>
 800a36a:	459a      	cmp	sl, r3
 800a36c:	d1a4      	bne.n	800a2b8 <_dtoa_r+0xa60>
 800a36e:	9b04      	ldr	r3, [sp, #16]
 800a370:	3301      	adds	r3, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	2331      	movs	r3, #49	@ 0x31
 800a376:	f88a 3000 	strb.w	r3, [sl]
 800a37a:	e5b9      	b.n	8009ef0 <_dtoa_r+0x698>
 800a37c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a37e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a3dc <_dtoa_r+0xb84>
 800a382:	b11b      	cbz	r3, 800a38c <_dtoa_r+0xb34>
 800a384:	f10a 0308 	add.w	r3, sl, #8
 800a388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	4650      	mov	r0, sl
 800a38e:	b019      	add	sp, #100	@ 0x64
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a396:	2b01      	cmp	r3, #1
 800a398:	f77f ae37 	ble.w	800a00a <_dtoa_r+0x7b2>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e655      	b.n	800a050 <_dtoa_r+0x7f8>
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f77f aed6 	ble.w	800a158 <_dtoa_r+0x900>
 800a3ac:	4656      	mov	r6, sl
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	4648      	mov	r0, r9
 800a3b2:	f7ff f9c7 	bl	8009744 <quorem>
 800a3b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3ba:	f806 8b01 	strb.w	r8, [r6], #1
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	eba6 020a 	sub.w	r2, r6, sl
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	ddb3      	ble.n	800a330 <_dtoa_r+0xad8>
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	4658      	mov	r0, fp
 800a3d0:	f000 fcb4 	bl	800ad3c <__multadd>
 800a3d4:	4681      	mov	r9, r0
 800a3d6:	e7ea      	b.n	800a3ae <_dtoa_r+0xb56>
 800a3d8:	0800c225 	.word	0x0800c225
 800a3dc:	0800c1a9 	.word	0x0800c1a9

0800a3e0 <_free_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d041      	beq.n	800a46c <_free_r+0x8c>
 800a3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ec:	1f0c      	subs	r4, r1, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bfb8      	it	lt
 800a3f2:	18e4      	addlt	r4, r4, r3
 800a3f4:	f000 fc34 	bl	800ac60 <__malloc_lock>
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a470 <_free_r+0x90>)
 800a3fa:	6813      	ldr	r3, [r2, #0]
 800a3fc:	b933      	cbnz	r3, 800a40c <_free_r+0x2c>
 800a3fe:	6063      	str	r3, [r4, #4]
 800a400:	6014      	str	r4, [r2, #0]
 800a402:	4628      	mov	r0, r5
 800a404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a408:	f000 bc30 	b.w	800ac6c <__malloc_unlock>
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d908      	bls.n	800a422 <_free_r+0x42>
 800a410:	6820      	ldr	r0, [r4, #0]
 800a412:	1821      	adds	r1, r4, r0
 800a414:	428b      	cmp	r3, r1
 800a416:	bf01      	itttt	eq
 800a418:	6819      	ldreq	r1, [r3, #0]
 800a41a:	685b      	ldreq	r3, [r3, #4]
 800a41c:	1809      	addeq	r1, r1, r0
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	e7ed      	b.n	800a3fe <_free_r+0x1e>
 800a422:	461a      	mov	r2, r3
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	b10b      	cbz	r3, 800a42c <_free_r+0x4c>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d9fa      	bls.n	800a422 <_free_r+0x42>
 800a42c:	6811      	ldr	r1, [r2, #0]
 800a42e:	1850      	adds	r0, r2, r1
 800a430:	42a0      	cmp	r0, r4
 800a432:	d10b      	bne.n	800a44c <_free_r+0x6c>
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	4401      	add	r1, r0
 800a438:	1850      	adds	r0, r2, r1
 800a43a:	4283      	cmp	r3, r0
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	d1e0      	bne.n	800a402 <_free_r+0x22>
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	6053      	str	r3, [r2, #4]
 800a446:	4408      	add	r0, r1
 800a448:	6010      	str	r0, [r2, #0]
 800a44a:	e7da      	b.n	800a402 <_free_r+0x22>
 800a44c:	d902      	bls.n	800a454 <_free_r+0x74>
 800a44e:	230c      	movs	r3, #12
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	e7d6      	b.n	800a402 <_free_r+0x22>
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	1821      	adds	r1, r4, r0
 800a458:	428b      	cmp	r3, r1
 800a45a:	bf04      	itt	eq
 800a45c:	6819      	ldreq	r1, [r3, #0]
 800a45e:	685b      	ldreq	r3, [r3, #4]
 800a460:	6063      	str	r3, [r4, #4]
 800a462:	bf04      	itt	eq
 800a464:	1809      	addeq	r1, r1, r0
 800a466:	6021      	streq	r1, [r4, #0]
 800a468:	6054      	str	r4, [r2, #4]
 800a46a:	e7ca      	b.n	800a402 <_free_r+0x22>
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	bf00      	nop
 800a470:	200006ac 	.word	0x200006ac

0800a474 <rshift>:
 800a474:	6903      	ldr	r3, [r0, #16]
 800a476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a47a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a47e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a482:	f100 0414 	add.w	r4, r0, #20
 800a486:	dd45      	ble.n	800a514 <rshift+0xa0>
 800a488:	f011 011f 	ands.w	r1, r1, #31
 800a48c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a494:	d10c      	bne.n	800a4b0 <rshift+0x3c>
 800a496:	f100 0710 	add.w	r7, r0, #16
 800a49a:	4629      	mov	r1, r5
 800a49c:	42b1      	cmp	r1, r6
 800a49e:	d334      	bcc.n	800a50a <rshift+0x96>
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	1eea      	subs	r2, r5, #3
 800a4a6:	4296      	cmp	r6, r2
 800a4a8:	bf38      	it	cc
 800a4aa:	2300      	movcc	r3, #0
 800a4ac:	4423      	add	r3, r4
 800a4ae:	e015      	b.n	800a4dc <rshift+0x68>
 800a4b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4b4:	f1c1 0820 	rsb	r8, r1, #32
 800a4b8:	40cf      	lsrs	r7, r1
 800a4ba:	f105 0e04 	add.w	lr, r5, #4
 800a4be:	46a1      	mov	r9, r4
 800a4c0:	4576      	cmp	r6, lr
 800a4c2:	46f4      	mov	ip, lr
 800a4c4:	d815      	bhi.n	800a4f2 <rshift+0x7e>
 800a4c6:	1a9a      	subs	r2, r3, r2
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	3a04      	subs	r2, #4
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	42ae      	cmp	r6, r5
 800a4d0:	bf38      	it	cc
 800a4d2:	2200      	movcc	r2, #0
 800a4d4:	18a3      	adds	r3, r4, r2
 800a4d6:	50a7      	str	r7, [r4, r2]
 800a4d8:	b107      	cbz	r7, 800a4dc <rshift+0x68>
 800a4da:	3304      	adds	r3, #4
 800a4dc:	1b1a      	subs	r2, r3, r4
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4e4:	bf08      	it	eq
 800a4e6:	2300      	moveq	r3, #0
 800a4e8:	6102      	str	r2, [r0, #16]
 800a4ea:	bf08      	it	eq
 800a4ec:	6143      	streq	r3, [r0, #20]
 800a4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f2:	f8dc c000 	ldr.w	ip, [ip]
 800a4f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4fa:	ea4c 0707 	orr.w	r7, ip, r7
 800a4fe:	f849 7b04 	str.w	r7, [r9], #4
 800a502:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a506:	40cf      	lsrs	r7, r1
 800a508:	e7da      	b.n	800a4c0 <rshift+0x4c>
 800a50a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a50e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a512:	e7c3      	b.n	800a49c <rshift+0x28>
 800a514:	4623      	mov	r3, r4
 800a516:	e7e1      	b.n	800a4dc <rshift+0x68>

0800a518 <__hexdig_fun>:
 800a518:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d802      	bhi.n	800a526 <__hexdig_fun+0xe>
 800a520:	3820      	subs	r0, #32
 800a522:	b2c0      	uxtb	r0, r0
 800a524:	4770      	bx	lr
 800a526:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d801      	bhi.n	800a532 <__hexdig_fun+0x1a>
 800a52e:	3847      	subs	r0, #71	@ 0x47
 800a530:	e7f7      	b.n	800a522 <__hexdig_fun+0xa>
 800a532:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a536:	2b05      	cmp	r3, #5
 800a538:	d801      	bhi.n	800a53e <__hexdig_fun+0x26>
 800a53a:	3827      	subs	r0, #39	@ 0x27
 800a53c:	e7f1      	b.n	800a522 <__hexdig_fun+0xa>
 800a53e:	2000      	movs	r0, #0
 800a540:	4770      	bx	lr
	...

0800a544 <__gethex>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	b085      	sub	sp, #20
 800a54a:	468a      	mov	sl, r1
 800a54c:	9302      	str	r3, [sp, #8]
 800a54e:	680b      	ldr	r3, [r1, #0]
 800a550:	9001      	str	r0, [sp, #4]
 800a552:	4690      	mov	r8, r2
 800a554:	1c9c      	adds	r4, r3, #2
 800a556:	46a1      	mov	r9, r4
 800a558:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a55c:	2830      	cmp	r0, #48	@ 0x30
 800a55e:	d0fa      	beq.n	800a556 <__gethex+0x12>
 800a560:	eba9 0303 	sub.w	r3, r9, r3
 800a564:	f1a3 0b02 	sub.w	fp, r3, #2
 800a568:	f7ff ffd6 	bl	800a518 <__hexdig_fun>
 800a56c:	4605      	mov	r5, r0
 800a56e:	2800      	cmp	r0, #0
 800a570:	d168      	bne.n	800a644 <__gethex+0x100>
 800a572:	49a0      	ldr	r1, [pc, #640]	@ (800a7f4 <__gethex+0x2b0>)
 800a574:	2201      	movs	r2, #1
 800a576:	4648      	mov	r0, r9
 800a578:	f7ff f83e 	bl	80095f8 <strncmp>
 800a57c:	4607      	mov	r7, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	d167      	bne.n	800a652 <__gethex+0x10e>
 800a582:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a586:	4626      	mov	r6, r4
 800a588:	f7ff ffc6 	bl	800a518 <__hexdig_fun>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d062      	beq.n	800a656 <__gethex+0x112>
 800a590:	4623      	mov	r3, r4
 800a592:	7818      	ldrb	r0, [r3, #0]
 800a594:	2830      	cmp	r0, #48	@ 0x30
 800a596:	4699      	mov	r9, r3
 800a598:	f103 0301 	add.w	r3, r3, #1
 800a59c:	d0f9      	beq.n	800a592 <__gethex+0x4e>
 800a59e:	f7ff ffbb 	bl	800a518 <__hexdig_fun>
 800a5a2:	fab0 f580 	clz	r5, r0
 800a5a6:	096d      	lsrs	r5, r5, #5
 800a5a8:	f04f 0b01 	mov.w	fp, #1
 800a5ac:	464a      	mov	r2, r9
 800a5ae:	4616      	mov	r6, r2
 800a5b0:	3201      	adds	r2, #1
 800a5b2:	7830      	ldrb	r0, [r6, #0]
 800a5b4:	f7ff ffb0 	bl	800a518 <__hexdig_fun>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d1f8      	bne.n	800a5ae <__gethex+0x6a>
 800a5bc:	498d      	ldr	r1, [pc, #564]	@ (800a7f4 <__gethex+0x2b0>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f7ff f819 	bl	80095f8 <strncmp>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d13f      	bne.n	800a64a <__gethex+0x106>
 800a5ca:	b944      	cbnz	r4, 800a5de <__gethex+0x9a>
 800a5cc:	1c74      	adds	r4, r6, #1
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4616      	mov	r6, r2
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	7830      	ldrb	r0, [r6, #0]
 800a5d6:	f7ff ff9f 	bl	800a518 <__hexdig_fun>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d1f8      	bne.n	800a5d0 <__gethex+0x8c>
 800a5de:	1ba4      	subs	r4, r4, r6
 800a5e0:	00a7      	lsls	r7, r4, #2
 800a5e2:	7833      	ldrb	r3, [r6, #0]
 800a5e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a5e8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ea:	d13e      	bne.n	800a66a <__gethex+0x126>
 800a5ec:	7873      	ldrb	r3, [r6, #1]
 800a5ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800a5f0:	d033      	beq.n	800a65a <__gethex+0x116>
 800a5f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a5f4:	d034      	beq.n	800a660 <__gethex+0x11c>
 800a5f6:	1c71      	adds	r1, r6, #1
 800a5f8:	2400      	movs	r4, #0
 800a5fa:	7808      	ldrb	r0, [r1, #0]
 800a5fc:	f7ff ff8c 	bl	800a518 <__hexdig_fun>
 800a600:	1e43      	subs	r3, r0, #1
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b18      	cmp	r3, #24
 800a606:	d830      	bhi.n	800a66a <__gethex+0x126>
 800a608:	f1a0 0210 	sub.w	r2, r0, #16
 800a60c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a610:	f7ff ff82 	bl	800a518 <__hexdig_fun>
 800a614:	f100 3cff 	add.w	ip, r0, #4294967295
 800a618:	fa5f fc8c 	uxtb.w	ip, ip
 800a61c:	f1bc 0f18 	cmp.w	ip, #24
 800a620:	f04f 030a 	mov.w	r3, #10
 800a624:	d91e      	bls.n	800a664 <__gethex+0x120>
 800a626:	b104      	cbz	r4, 800a62a <__gethex+0xe6>
 800a628:	4252      	negs	r2, r2
 800a62a:	4417      	add	r7, r2
 800a62c:	f8ca 1000 	str.w	r1, [sl]
 800a630:	b1ed      	cbz	r5, 800a66e <__gethex+0x12a>
 800a632:	f1bb 0f00 	cmp.w	fp, #0
 800a636:	bf0c      	ite	eq
 800a638:	2506      	moveq	r5, #6
 800a63a:	2500      	movne	r5, #0
 800a63c:	4628      	mov	r0, r5
 800a63e:	b005      	add	sp, #20
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	2500      	movs	r5, #0
 800a646:	462c      	mov	r4, r5
 800a648:	e7b0      	b.n	800a5ac <__gethex+0x68>
 800a64a:	2c00      	cmp	r4, #0
 800a64c:	d1c7      	bne.n	800a5de <__gethex+0x9a>
 800a64e:	4627      	mov	r7, r4
 800a650:	e7c7      	b.n	800a5e2 <__gethex+0x9e>
 800a652:	464e      	mov	r6, r9
 800a654:	462f      	mov	r7, r5
 800a656:	2501      	movs	r5, #1
 800a658:	e7c3      	b.n	800a5e2 <__gethex+0x9e>
 800a65a:	2400      	movs	r4, #0
 800a65c:	1cb1      	adds	r1, r6, #2
 800a65e:	e7cc      	b.n	800a5fa <__gethex+0xb6>
 800a660:	2401      	movs	r4, #1
 800a662:	e7fb      	b.n	800a65c <__gethex+0x118>
 800a664:	fb03 0002 	mla	r0, r3, r2, r0
 800a668:	e7ce      	b.n	800a608 <__gethex+0xc4>
 800a66a:	4631      	mov	r1, r6
 800a66c:	e7de      	b.n	800a62c <__gethex+0xe8>
 800a66e:	eba6 0309 	sub.w	r3, r6, r9
 800a672:	3b01      	subs	r3, #1
 800a674:	4629      	mov	r1, r5
 800a676:	2b07      	cmp	r3, #7
 800a678:	dc0a      	bgt.n	800a690 <__gethex+0x14c>
 800a67a:	9801      	ldr	r0, [sp, #4]
 800a67c:	f000 fafc 	bl	800ac78 <_Balloc>
 800a680:	4604      	mov	r4, r0
 800a682:	b940      	cbnz	r0, 800a696 <__gethex+0x152>
 800a684:	4b5c      	ldr	r3, [pc, #368]	@ (800a7f8 <__gethex+0x2b4>)
 800a686:	4602      	mov	r2, r0
 800a688:	21e4      	movs	r1, #228	@ 0xe4
 800a68a:	485c      	ldr	r0, [pc, #368]	@ (800a7fc <__gethex+0x2b8>)
 800a68c:	f001 fc22 	bl	800bed4 <__assert_func>
 800a690:	3101      	adds	r1, #1
 800a692:	105b      	asrs	r3, r3, #1
 800a694:	e7ef      	b.n	800a676 <__gethex+0x132>
 800a696:	f100 0a14 	add.w	sl, r0, #20
 800a69a:	2300      	movs	r3, #0
 800a69c:	4655      	mov	r5, sl
 800a69e:	469b      	mov	fp, r3
 800a6a0:	45b1      	cmp	r9, r6
 800a6a2:	d337      	bcc.n	800a714 <__gethex+0x1d0>
 800a6a4:	f845 bb04 	str.w	fp, [r5], #4
 800a6a8:	eba5 050a 	sub.w	r5, r5, sl
 800a6ac:	10ad      	asrs	r5, r5, #2
 800a6ae:	6125      	str	r5, [r4, #16]
 800a6b0:	4658      	mov	r0, fp
 800a6b2:	f000 fbd3 	bl	800ae5c <__hi0bits>
 800a6b6:	016d      	lsls	r5, r5, #5
 800a6b8:	f8d8 6000 	ldr.w	r6, [r8]
 800a6bc:	1a2d      	subs	r5, r5, r0
 800a6be:	42b5      	cmp	r5, r6
 800a6c0:	dd54      	ble.n	800a76c <__gethex+0x228>
 800a6c2:	1bad      	subs	r5, r5, r6
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 ff67 	bl	800b59a <__any_on>
 800a6cc:	4681      	mov	r9, r0
 800a6ce:	b178      	cbz	r0, 800a6f0 <__gethex+0x1ac>
 800a6d0:	1e6b      	subs	r3, r5, #1
 800a6d2:	1159      	asrs	r1, r3, #5
 800a6d4:	f003 021f 	and.w	r2, r3, #31
 800a6d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a6dc:	f04f 0901 	mov.w	r9, #1
 800a6e0:	fa09 f202 	lsl.w	r2, r9, r2
 800a6e4:	420a      	tst	r2, r1
 800a6e6:	d003      	beq.n	800a6f0 <__gethex+0x1ac>
 800a6e8:	454b      	cmp	r3, r9
 800a6ea:	dc36      	bgt.n	800a75a <__gethex+0x216>
 800a6ec:	f04f 0902 	mov.w	r9, #2
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff febe 	bl	800a474 <rshift>
 800a6f8:	442f      	add	r7, r5
 800a6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6fe:	42bb      	cmp	r3, r7
 800a700:	da42      	bge.n	800a788 <__gethex+0x244>
 800a702:	9801      	ldr	r0, [sp, #4]
 800a704:	4621      	mov	r1, r4
 800a706:	f000 faf7 	bl	800acf8 <_Bfree>
 800a70a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a70c:	2300      	movs	r3, #0
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	25a3      	movs	r5, #163	@ 0xa3
 800a712:	e793      	b.n	800a63c <__gethex+0xf8>
 800a714:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a718:	2a2e      	cmp	r2, #46	@ 0x2e
 800a71a:	d012      	beq.n	800a742 <__gethex+0x1fe>
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d104      	bne.n	800a72a <__gethex+0x1e6>
 800a720:	f845 bb04 	str.w	fp, [r5], #4
 800a724:	f04f 0b00 	mov.w	fp, #0
 800a728:	465b      	mov	r3, fp
 800a72a:	7830      	ldrb	r0, [r6, #0]
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	f7ff fef3 	bl	800a518 <__hexdig_fun>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	f000 000f 	and.w	r0, r0, #15
 800a738:	4098      	lsls	r0, r3
 800a73a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a73e:	3304      	adds	r3, #4
 800a740:	e7ae      	b.n	800a6a0 <__gethex+0x15c>
 800a742:	45b1      	cmp	r9, r6
 800a744:	d8ea      	bhi.n	800a71c <__gethex+0x1d8>
 800a746:	492b      	ldr	r1, [pc, #172]	@ (800a7f4 <__gethex+0x2b0>)
 800a748:	9303      	str	r3, [sp, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7fe ff53 	bl	80095f8 <strncmp>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	2800      	cmp	r0, #0
 800a756:	d1e1      	bne.n	800a71c <__gethex+0x1d8>
 800a758:	e7a2      	b.n	800a6a0 <__gethex+0x15c>
 800a75a:	1ea9      	subs	r1, r5, #2
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 ff1c 	bl	800b59a <__any_on>
 800a762:	2800      	cmp	r0, #0
 800a764:	d0c2      	beq.n	800a6ec <__gethex+0x1a8>
 800a766:	f04f 0903 	mov.w	r9, #3
 800a76a:	e7c1      	b.n	800a6f0 <__gethex+0x1ac>
 800a76c:	da09      	bge.n	800a782 <__gethex+0x23e>
 800a76e:	1b75      	subs	r5, r6, r5
 800a770:	4621      	mov	r1, r4
 800a772:	9801      	ldr	r0, [sp, #4]
 800a774:	462a      	mov	r2, r5
 800a776:	f000 fcd7 	bl	800b128 <__lshift>
 800a77a:	1b7f      	subs	r7, r7, r5
 800a77c:	4604      	mov	r4, r0
 800a77e:	f100 0a14 	add.w	sl, r0, #20
 800a782:	f04f 0900 	mov.w	r9, #0
 800a786:	e7b8      	b.n	800a6fa <__gethex+0x1b6>
 800a788:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a78c:	42bd      	cmp	r5, r7
 800a78e:	dd6f      	ble.n	800a870 <__gethex+0x32c>
 800a790:	1bed      	subs	r5, r5, r7
 800a792:	42ae      	cmp	r6, r5
 800a794:	dc34      	bgt.n	800a800 <__gethex+0x2bc>
 800a796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d022      	beq.n	800a7e4 <__gethex+0x2a0>
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d024      	beq.n	800a7ec <__gethex+0x2a8>
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d115      	bne.n	800a7d2 <__gethex+0x28e>
 800a7a6:	42ae      	cmp	r6, r5
 800a7a8:	d113      	bne.n	800a7d2 <__gethex+0x28e>
 800a7aa:	2e01      	cmp	r6, #1
 800a7ac:	d10b      	bne.n	800a7c6 <__gethex+0x282>
 800a7ae:	9a02      	ldr	r2, [sp, #8]
 800a7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	6123      	str	r3, [r4, #16]
 800a7ba:	f8ca 3000 	str.w	r3, [sl]
 800a7be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7c0:	2562      	movs	r5, #98	@ 0x62
 800a7c2:	601c      	str	r4, [r3, #0]
 800a7c4:	e73a      	b.n	800a63c <__gethex+0xf8>
 800a7c6:	1e71      	subs	r1, r6, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fee6 	bl	800b59a <__any_on>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d1ed      	bne.n	800a7ae <__gethex+0x26a>
 800a7d2:	9801      	ldr	r0, [sp, #4]
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f000 fa8f 	bl	800acf8 <_Bfree>
 800a7da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	2550      	movs	r5, #80	@ 0x50
 800a7e2:	e72b      	b.n	800a63c <__gethex+0xf8>
 800a7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f3      	bne.n	800a7d2 <__gethex+0x28e>
 800a7ea:	e7e0      	b.n	800a7ae <__gethex+0x26a>
 800a7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1dd      	bne.n	800a7ae <__gethex+0x26a>
 800a7f2:	e7ee      	b.n	800a7d2 <__gethex+0x28e>
 800a7f4:	0800c110 	.word	0x0800c110
 800a7f8:	0800c225 	.word	0x0800c225
 800a7fc:	0800c236 	.word	0x0800c236
 800a800:	1e6f      	subs	r7, r5, #1
 800a802:	f1b9 0f00 	cmp.w	r9, #0
 800a806:	d130      	bne.n	800a86a <__gethex+0x326>
 800a808:	b127      	cbz	r7, 800a814 <__gethex+0x2d0>
 800a80a:	4639      	mov	r1, r7
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fec4 	bl	800b59a <__any_on>
 800a812:	4681      	mov	r9, r0
 800a814:	117a      	asrs	r2, r7, #5
 800a816:	2301      	movs	r3, #1
 800a818:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a81c:	f007 071f 	and.w	r7, r7, #31
 800a820:	40bb      	lsls	r3, r7
 800a822:	4213      	tst	r3, r2
 800a824:	4629      	mov	r1, r5
 800a826:	4620      	mov	r0, r4
 800a828:	bf18      	it	ne
 800a82a:	f049 0902 	orrne.w	r9, r9, #2
 800a82e:	f7ff fe21 	bl	800a474 <rshift>
 800a832:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a836:	1b76      	subs	r6, r6, r5
 800a838:	2502      	movs	r5, #2
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	d047      	beq.n	800a8d0 <__gethex+0x38c>
 800a840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d015      	beq.n	800a874 <__gethex+0x330>
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d017      	beq.n	800a87c <__gethex+0x338>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d109      	bne.n	800a864 <__gethex+0x320>
 800a850:	f019 0f02 	tst.w	r9, #2
 800a854:	d006      	beq.n	800a864 <__gethex+0x320>
 800a856:	f8da 3000 	ldr.w	r3, [sl]
 800a85a:	ea49 0903 	orr.w	r9, r9, r3
 800a85e:	f019 0f01 	tst.w	r9, #1
 800a862:	d10e      	bne.n	800a882 <__gethex+0x33e>
 800a864:	f045 0510 	orr.w	r5, r5, #16
 800a868:	e032      	b.n	800a8d0 <__gethex+0x38c>
 800a86a:	f04f 0901 	mov.w	r9, #1
 800a86e:	e7d1      	b.n	800a814 <__gethex+0x2d0>
 800a870:	2501      	movs	r5, #1
 800a872:	e7e2      	b.n	800a83a <__gethex+0x2f6>
 800a874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a876:	f1c3 0301 	rsb	r3, r3, #1
 800a87a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f0      	beq.n	800a864 <__gethex+0x320>
 800a882:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a886:	f104 0314 	add.w	r3, r4, #20
 800a88a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a88e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a892:	f04f 0c00 	mov.w	ip, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8a0:	d01b      	beq.n	800a8da <__gethex+0x396>
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	6002      	str	r2, [r0, #0]
 800a8a6:	2d02      	cmp	r5, #2
 800a8a8:	f104 0314 	add.w	r3, r4, #20
 800a8ac:	d13c      	bne.n	800a928 <__gethex+0x3e4>
 800a8ae:	f8d8 2000 	ldr.w	r2, [r8]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	42b2      	cmp	r2, r6
 800a8b6:	d109      	bne.n	800a8cc <__gethex+0x388>
 800a8b8:	1171      	asrs	r1, r6, #5
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8c0:	f006 061f 	and.w	r6, r6, #31
 800a8c4:	fa02 f606 	lsl.w	r6, r2, r6
 800a8c8:	421e      	tst	r6, r3
 800a8ca:	d13a      	bne.n	800a942 <__gethex+0x3fe>
 800a8cc:	f045 0520 	orr.w	r5, r5, #32
 800a8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d2:	601c      	str	r4, [r3, #0]
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	601f      	str	r7, [r3, #0]
 800a8d8:	e6b0      	b.n	800a63c <__gethex+0xf8>
 800a8da:	4299      	cmp	r1, r3
 800a8dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8e0:	d8d9      	bhi.n	800a896 <__gethex+0x352>
 800a8e2:	68a3      	ldr	r3, [r4, #8]
 800a8e4:	459b      	cmp	fp, r3
 800a8e6:	db17      	blt.n	800a918 <__gethex+0x3d4>
 800a8e8:	6861      	ldr	r1, [r4, #4]
 800a8ea:	9801      	ldr	r0, [sp, #4]
 800a8ec:	3101      	adds	r1, #1
 800a8ee:	f000 f9c3 	bl	800ac78 <_Balloc>
 800a8f2:	4681      	mov	r9, r0
 800a8f4:	b918      	cbnz	r0, 800a8fe <__gethex+0x3ba>
 800a8f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a960 <__gethex+0x41c>)
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	2184      	movs	r1, #132	@ 0x84
 800a8fc:	e6c5      	b.n	800a68a <__gethex+0x146>
 800a8fe:	6922      	ldr	r2, [r4, #16]
 800a900:	3202      	adds	r2, #2
 800a902:	f104 010c 	add.w	r1, r4, #12
 800a906:	0092      	lsls	r2, r2, #2
 800a908:	300c      	adds	r0, #12
 800a90a:	f7fe fefe 	bl	800970a <memcpy>
 800a90e:	4621      	mov	r1, r4
 800a910:	9801      	ldr	r0, [sp, #4]
 800a912:	f000 f9f1 	bl	800acf8 <_Bfree>
 800a916:	464c      	mov	r4, r9
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a920:	6122      	str	r2, [r4, #16]
 800a922:	2201      	movs	r2, #1
 800a924:	615a      	str	r2, [r3, #20]
 800a926:	e7be      	b.n	800a8a6 <__gethex+0x362>
 800a928:	6922      	ldr	r2, [r4, #16]
 800a92a:	455a      	cmp	r2, fp
 800a92c:	dd0b      	ble.n	800a946 <__gethex+0x402>
 800a92e:	2101      	movs	r1, #1
 800a930:	4620      	mov	r0, r4
 800a932:	f7ff fd9f 	bl	800a474 <rshift>
 800a936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a93a:	3701      	adds	r7, #1
 800a93c:	42bb      	cmp	r3, r7
 800a93e:	f6ff aee0 	blt.w	800a702 <__gethex+0x1be>
 800a942:	2501      	movs	r5, #1
 800a944:	e7c2      	b.n	800a8cc <__gethex+0x388>
 800a946:	f016 061f 	ands.w	r6, r6, #31
 800a94a:	d0fa      	beq.n	800a942 <__gethex+0x3fe>
 800a94c:	4453      	add	r3, sl
 800a94e:	f1c6 0620 	rsb	r6, r6, #32
 800a952:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a956:	f000 fa81 	bl	800ae5c <__hi0bits>
 800a95a:	42b0      	cmp	r0, r6
 800a95c:	dbe7      	blt.n	800a92e <__gethex+0x3ea>
 800a95e:	e7f0      	b.n	800a942 <__gethex+0x3fe>
 800a960:	0800c225 	.word	0x0800c225

0800a964 <L_shift>:
 800a964:	f1c2 0208 	rsb	r2, r2, #8
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	b570      	push	{r4, r5, r6, lr}
 800a96c:	f1c2 0620 	rsb	r6, r2, #32
 800a970:	6843      	ldr	r3, [r0, #4]
 800a972:	6804      	ldr	r4, [r0, #0]
 800a974:	fa03 f506 	lsl.w	r5, r3, r6
 800a978:	432c      	orrs	r4, r5
 800a97a:	40d3      	lsrs	r3, r2
 800a97c:	6004      	str	r4, [r0, #0]
 800a97e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a982:	4288      	cmp	r0, r1
 800a984:	d3f4      	bcc.n	800a970 <L_shift+0xc>
 800a986:	bd70      	pop	{r4, r5, r6, pc}

0800a988 <__match>:
 800a988:	b530      	push	{r4, r5, lr}
 800a98a:	6803      	ldr	r3, [r0, #0]
 800a98c:	3301      	adds	r3, #1
 800a98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a992:	b914      	cbnz	r4, 800a99a <__match+0x12>
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	2001      	movs	r0, #1
 800a998:	bd30      	pop	{r4, r5, pc}
 800a99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a99e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a9a2:	2d19      	cmp	r5, #25
 800a9a4:	bf98      	it	ls
 800a9a6:	3220      	addls	r2, #32
 800a9a8:	42a2      	cmp	r2, r4
 800a9aa:	d0f0      	beq.n	800a98e <__match+0x6>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e7f3      	b.n	800a998 <__match+0x10>

0800a9b0 <__hexnan>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	680b      	ldr	r3, [r1, #0]
 800a9b6:	6801      	ldr	r1, [r0, #0]
 800a9b8:	115e      	asrs	r6, r3, #5
 800a9ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9be:	f013 031f 	ands.w	r3, r3, #31
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	bf18      	it	ne
 800a9c6:	3604      	addne	r6, #4
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	1f37      	subs	r7, r6, #4
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	4690      	mov	r8, r2
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9d6:	46b9      	mov	r9, r7
 800a9d8:	463c      	mov	r4, r7
 800a9da:	9502      	str	r5, [sp, #8]
 800a9dc:	46ab      	mov	fp, r5
 800a9de:	784a      	ldrb	r2, [r1, #1]
 800a9e0:	1c4b      	adds	r3, r1, #1
 800a9e2:	9303      	str	r3, [sp, #12]
 800a9e4:	b342      	cbz	r2, 800aa38 <__hexnan+0x88>
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	9204      	str	r2, [sp, #16]
 800a9ec:	f7ff fd94 	bl	800a518 <__hexdig_fun>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d151      	bne.n	800aa98 <__hexnan+0xe8>
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	9905      	ldr	r1, [sp, #20]
 800a9f8:	2a20      	cmp	r2, #32
 800a9fa:	d818      	bhi.n	800aa2e <__hexnan+0x7e>
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	459b      	cmp	fp, r3
 800aa00:	dd13      	ble.n	800aa2a <__hexnan+0x7a>
 800aa02:	454c      	cmp	r4, r9
 800aa04:	d206      	bcs.n	800aa14 <__hexnan+0x64>
 800aa06:	2d07      	cmp	r5, #7
 800aa08:	dc04      	bgt.n	800aa14 <__hexnan+0x64>
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff ffa8 	bl	800a964 <L_shift>
 800aa14:	4544      	cmp	r4, r8
 800aa16:	d952      	bls.n	800aabe <__hexnan+0x10e>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa22:	f8cd b008 	str.w	fp, [sp, #8]
 800aa26:	464c      	mov	r4, r9
 800aa28:	461d      	mov	r5, r3
 800aa2a:	9903      	ldr	r1, [sp, #12]
 800aa2c:	e7d7      	b.n	800a9de <__hexnan+0x2e>
 800aa2e:	2a29      	cmp	r2, #41	@ 0x29
 800aa30:	d157      	bne.n	800aae2 <__hexnan+0x132>
 800aa32:	3102      	adds	r1, #2
 800aa34:	f8ca 1000 	str.w	r1, [sl]
 800aa38:	f1bb 0f00 	cmp.w	fp, #0
 800aa3c:	d051      	beq.n	800aae2 <__hexnan+0x132>
 800aa3e:	454c      	cmp	r4, r9
 800aa40:	d206      	bcs.n	800aa50 <__hexnan+0xa0>
 800aa42:	2d07      	cmp	r5, #7
 800aa44:	dc04      	bgt.n	800aa50 <__hexnan+0xa0>
 800aa46:	462a      	mov	r2, r5
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff ff8a 	bl	800a964 <L_shift>
 800aa50:	4544      	cmp	r4, r8
 800aa52:	d936      	bls.n	800aac2 <__hexnan+0x112>
 800aa54:	f1a8 0204 	sub.w	r2, r8, #4
 800aa58:	4623      	mov	r3, r4
 800aa5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa62:	429f      	cmp	r7, r3
 800aa64:	d2f9      	bcs.n	800aa5a <__hexnan+0xaa>
 800aa66:	1b3b      	subs	r3, r7, r4
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	3401      	adds	r4, #1
 800aa70:	3e03      	subs	r6, #3
 800aa72:	42b4      	cmp	r4, r6
 800aa74:	bf88      	it	hi
 800aa76:	2304      	movhi	r3, #4
 800aa78:	4443      	add	r3, r8
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f843 2b04 	str.w	r2, [r3], #4
 800aa80:	429f      	cmp	r7, r3
 800aa82:	d2fb      	bcs.n	800aa7c <__hexnan+0xcc>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	b91b      	cbnz	r3, 800aa90 <__hexnan+0xe0>
 800aa88:	4547      	cmp	r7, r8
 800aa8a:	d128      	bne.n	800aade <__hexnan+0x12e>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	2005      	movs	r0, #5
 800aa92:	b007      	add	sp, #28
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	3501      	adds	r5, #1
 800aa9a:	2d08      	cmp	r5, #8
 800aa9c:	f10b 0b01 	add.w	fp, fp, #1
 800aaa0:	dd06      	ble.n	800aab0 <__hexnan+0x100>
 800aaa2:	4544      	cmp	r4, r8
 800aaa4:	d9c1      	bls.n	800aa2a <__hexnan+0x7a>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaac:	2501      	movs	r5, #1
 800aaae:	3c04      	subs	r4, #4
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	f000 000f 	and.w	r0, r0, #15
 800aab6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aaba:	6020      	str	r0, [r4, #0]
 800aabc:	e7b5      	b.n	800aa2a <__hexnan+0x7a>
 800aabe:	2508      	movs	r5, #8
 800aac0:	e7b3      	b.n	800aa2a <__hexnan+0x7a>
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0dd      	beq.n	800aa84 <__hexnan+0xd4>
 800aac8:	f1c3 0320 	rsb	r3, r3, #32
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	40da      	lsrs	r2, r3
 800aad2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aad6:	4013      	ands	r3, r2
 800aad8:	f846 3c04 	str.w	r3, [r6, #-4]
 800aadc:	e7d2      	b.n	800aa84 <__hexnan+0xd4>
 800aade:	3f04      	subs	r7, #4
 800aae0:	e7d0      	b.n	800aa84 <__hexnan+0xd4>
 800aae2:	2004      	movs	r0, #4
 800aae4:	e7d5      	b.n	800aa92 <__hexnan+0xe2>
	...

0800aae8 <malloc>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	@ (800aaf4 <malloc+0xc>)
 800aaea:	4601      	mov	r1, r0
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f000 b825 	b.w	800ab3c <_malloc_r>
 800aaf2:	bf00      	nop
 800aaf4:	20000190 	.word	0x20000190

0800aaf8 <sbrk_aligned>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	4e0f      	ldr	r6, [pc, #60]	@ (800ab38 <sbrk_aligned+0x40>)
 800aafc:	460c      	mov	r4, r1
 800aafe:	6831      	ldr	r1, [r6, #0]
 800ab00:	4605      	mov	r5, r0
 800ab02:	b911      	cbnz	r1, 800ab0a <sbrk_aligned+0x12>
 800ab04:	f001 f9d6 	bl	800beb4 <_sbrk_r>
 800ab08:	6030      	str	r0, [r6, #0]
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f001 f9d1 	bl	800beb4 <_sbrk_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d103      	bne.n	800ab1e <sbrk_aligned+0x26>
 800ab16:	f04f 34ff 	mov.w	r4, #4294967295
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	1cc4      	adds	r4, r0, #3
 800ab20:	f024 0403 	bic.w	r4, r4, #3
 800ab24:	42a0      	cmp	r0, r4
 800ab26:	d0f8      	beq.n	800ab1a <sbrk_aligned+0x22>
 800ab28:	1a21      	subs	r1, r4, r0
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f001 f9c2 	bl	800beb4 <_sbrk_r>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d1f2      	bne.n	800ab1a <sbrk_aligned+0x22>
 800ab34:	e7ef      	b.n	800ab16 <sbrk_aligned+0x1e>
 800ab36:	bf00      	nop
 800ab38:	200006a8 	.word	0x200006a8

0800ab3c <_malloc_r>:
 800ab3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab40:	1ccd      	adds	r5, r1, #3
 800ab42:	f025 0503 	bic.w	r5, r5, #3
 800ab46:	3508      	adds	r5, #8
 800ab48:	2d0c      	cmp	r5, #12
 800ab4a:	bf38      	it	cc
 800ab4c:	250c      	movcc	r5, #12
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	4606      	mov	r6, r0
 800ab52:	db01      	blt.n	800ab58 <_malloc_r+0x1c>
 800ab54:	42a9      	cmp	r1, r5
 800ab56:	d904      	bls.n	800ab62 <_malloc_r+0x26>
 800ab58:	230c      	movs	r3, #12
 800ab5a:	6033      	str	r3, [r6, #0]
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac38 <_malloc_r+0xfc>
 800ab66:	f000 f87b 	bl	800ac60 <__malloc_lock>
 800ab6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6e:	461c      	mov	r4, r3
 800ab70:	bb44      	cbnz	r4, 800abc4 <_malloc_r+0x88>
 800ab72:	4629      	mov	r1, r5
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7ff ffbf 	bl	800aaf8 <sbrk_aligned>
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	d158      	bne.n	800ac32 <_malloc_r+0xf6>
 800ab80:	f8d8 4000 	ldr.w	r4, [r8]
 800ab84:	4627      	mov	r7, r4
 800ab86:	2f00      	cmp	r7, #0
 800ab88:	d143      	bne.n	800ac12 <_malloc_r+0xd6>
 800ab8a:	2c00      	cmp	r4, #0
 800ab8c:	d04b      	beq.n	800ac26 <_malloc_r+0xea>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	4639      	mov	r1, r7
 800ab92:	4630      	mov	r0, r6
 800ab94:	eb04 0903 	add.w	r9, r4, r3
 800ab98:	f001 f98c 	bl	800beb4 <_sbrk_r>
 800ab9c:	4581      	cmp	r9, r0
 800ab9e:	d142      	bne.n	800ac26 <_malloc_r+0xea>
 800aba0:	6821      	ldr	r1, [r4, #0]
 800aba2:	1a6d      	subs	r5, r5, r1
 800aba4:	4629      	mov	r1, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	f7ff ffa6 	bl	800aaf8 <sbrk_aligned>
 800abac:	3001      	adds	r0, #1
 800abae:	d03a      	beq.n	800ac26 <_malloc_r+0xea>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	442b      	add	r3, r5
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	f8d8 3000 	ldr.w	r3, [r8]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	bb62      	cbnz	r2, 800ac18 <_malloc_r+0xdc>
 800abbe:	f8c8 7000 	str.w	r7, [r8]
 800abc2:	e00f      	b.n	800abe4 <_malloc_r+0xa8>
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	1b52      	subs	r2, r2, r5
 800abc8:	d420      	bmi.n	800ac0c <_malloc_r+0xd0>
 800abca:	2a0b      	cmp	r2, #11
 800abcc:	d917      	bls.n	800abfe <_malloc_r+0xc2>
 800abce:	1961      	adds	r1, r4, r5
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	6025      	str	r5, [r4, #0]
 800abd4:	bf18      	it	ne
 800abd6:	6059      	strne	r1, [r3, #4]
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	bf08      	it	eq
 800abdc:	f8c8 1000 	streq.w	r1, [r8]
 800abe0:	5162      	str	r2, [r4, r5]
 800abe2:	604b      	str	r3, [r1, #4]
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 f841 	bl	800ac6c <__malloc_unlock>
 800abea:	f104 000b 	add.w	r0, r4, #11
 800abee:	1d23      	adds	r3, r4, #4
 800abf0:	f020 0007 	bic.w	r0, r0, #7
 800abf4:	1ac2      	subs	r2, r0, r3
 800abf6:	bf1c      	itt	ne
 800abf8:	1a1b      	subne	r3, r3, r0
 800abfa:	50a3      	strne	r3, [r4, r2]
 800abfc:	e7af      	b.n	800ab5e <_malloc_r+0x22>
 800abfe:	6862      	ldr	r2, [r4, #4]
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	bf0c      	ite	eq
 800ac04:	f8c8 2000 	streq.w	r2, [r8]
 800ac08:	605a      	strne	r2, [r3, #4]
 800ac0a:	e7eb      	b.n	800abe4 <_malloc_r+0xa8>
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	6864      	ldr	r4, [r4, #4]
 800ac10:	e7ae      	b.n	800ab70 <_malloc_r+0x34>
 800ac12:	463c      	mov	r4, r7
 800ac14:	687f      	ldr	r7, [r7, #4]
 800ac16:	e7b6      	b.n	800ab86 <_malloc_r+0x4a>
 800ac18:	461a      	mov	r2, r3
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	d1fb      	bne.n	800ac18 <_malloc_r+0xdc>
 800ac20:	2300      	movs	r3, #0
 800ac22:	6053      	str	r3, [r2, #4]
 800ac24:	e7de      	b.n	800abe4 <_malloc_r+0xa8>
 800ac26:	230c      	movs	r3, #12
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f81e 	bl	800ac6c <__malloc_unlock>
 800ac30:	e794      	b.n	800ab5c <_malloc_r+0x20>
 800ac32:	6005      	str	r5, [r0, #0]
 800ac34:	e7d6      	b.n	800abe4 <_malloc_r+0xa8>
 800ac36:	bf00      	nop
 800ac38:	200006ac 	.word	0x200006ac

0800ac3c <__ascii_mbtowc>:
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	b901      	cbnz	r1, 800ac42 <__ascii_mbtowc+0x6>
 800ac40:	a901      	add	r1, sp, #4
 800ac42:	b142      	cbz	r2, 800ac56 <__ascii_mbtowc+0x1a>
 800ac44:	b14b      	cbz	r3, 800ac5a <__ascii_mbtowc+0x1e>
 800ac46:	7813      	ldrb	r3, [r2, #0]
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	1e10      	subs	r0, r2, #0
 800ac4e:	bf18      	it	ne
 800ac50:	2001      	movne	r0, #1
 800ac52:	b002      	add	sp, #8
 800ac54:	4770      	bx	lr
 800ac56:	4610      	mov	r0, r2
 800ac58:	e7fb      	b.n	800ac52 <__ascii_mbtowc+0x16>
 800ac5a:	f06f 0001 	mvn.w	r0, #1
 800ac5e:	e7f8      	b.n	800ac52 <__ascii_mbtowc+0x16>

0800ac60 <__malloc_lock>:
 800ac60:	4801      	ldr	r0, [pc, #4]	@ (800ac68 <__malloc_lock+0x8>)
 800ac62:	f7fe bd50 	b.w	8009706 <__retarget_lock_acquire_recursive>
 800ac66:	bf00      	nop
 800ac68:	200006a4 	.word	0x200006a4

0800ac6c <__malloc_unlock>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	@ (800ac74 <__malloc_unlock+0x8>)
 800ac6e:	f7fe bd4b 	b.w	8009708 <__retarget_lock_release_recursive>
 800ac72:	bf00      	nop
 800ac74:	200006a4 	.word	0x200006a4

0800ac78 <_Balloc>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	69c6      	ldr	r6, [r0, #28]
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	b976      	cbnz	r6, 800aca0 <_Balloc+0x28>
 800ac82:	2010      	movs	r0, #16
 800ac84:	f7ff ff30 	bl	800aae8 <malloc>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	61e0      	str	r0, [r4, #28]
 800ac8c:	b920      	cbnz	r0, 800ac98 <_Balloc+0x20>
 800ac8e:	4b18      	ldr	r3, [pc, #96]	@ (800acf0 <_Balloc+0x78>)
 800ac90:	4818      	ldr	r0, [pc, #96]	@ (800acf4 <_Balloc+0x7c>)
 800ac92:	216b      	movs	r1, #107	@ 0x6b
 800ac94:	f001 f91e 	bl	800bed4 <__assert_func>
 800ac98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac9c:	6006      	str	r6, [r0, #0]
 800ac9e:	60c6      	str	r6, [r0, #12]
 800aca0:	69e6      	ldr	r6, [r4, #28]
 800aca2:	68f3      	ldr	r3, [r6, #12]
 800aca4:	b183      	cbz	r3, 800acc8 <_Balloc+0x50>
 800aca6:	69e3      	ldr	r3, [r4, #28]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acae:	b9b8      	cbnz	r0, 800ace0 <_Balloc+0x68>
 800acb0:	2101      	movs	r1, #1
 800acb2:	fa01 f605 	lsl.w	r6, r1, r5
 800acb6:	1d72      	adds	r2, r6, #5
 800acb8:	0092      	lsls	r2, r2, #2
 800acba:	4620      	mov	r0, r4
 800acbc:	f001 f928 	bl	800bf10 <_calloc_r>
 800acc0:	b160      	cbz	r0, 800acdc <_Balloc+0x64>
 800acc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acc6:	e00e      	b.n	800ace6 <_Balloc+0x6e>
 800acc8:	2221      	movs	r2, #33	@ 0x21
 800acca:	2104      	movs	r1, #4
 800accc:	4620      	mov	r0, r4
 800acce:	f001 f91f 	bl	800bf10 <_calloc_r>
 800acd2:	69e3      	ldr	r3, [r4, #28]
 800acd4:	60f0      	str	r0, [r6, #12]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e4      	bne.n	800aca6 <_Balloc+0x2e>
 800acdc:	2000      	movs	r0, #0
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	6802      	ldr	r2, [r0, #0]
 800ace2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ace6:	2300      	movs	r3, #0
 800ace8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acec:	e7f7      	b.n	800acde <_Balloc+0x66>
 800acee:	bf00      	nop
 800acf0:	0800c1b6 	.word	0x0800c1b6
 800acf4:	0800c296 	.word	0x0800c296

0800acf8 <_Bfree>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	69c6      	ldr	r6, [r0, #28]
 800acfc:	4605      	mov	r5, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	b976      	cbnz	r6, 800ad20 <_Bfree+0x28>
 800ad02:	2010      	movs	r0, #16
 800ad04:	f7ff fef0 	bl	800aae8 <malloc>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	61e8      	str	r0, [r5, #28]
 800ad0c:	b920      	cbnz	r0, 800ad18 <_Bfree+0x20>
 800ad0e:	4b09      	ldr	r3, [pc, #36]	@ (800ad34 <_Bfree+0x3c>)
 800ad10:	4809      	ldr	r0, [pc, #36]	@ (800ad38 <_Bfree+0x40>)
 800ad12:	218f      	movs	r1, #143	@ 0x8f
 800ad14:	f001 f8de 	bl	800bed4 <__assert_func>
 800ad18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad1c:	6006      	str	r6, [r0, #0]
 800ad1e:	60c6      	str	r6, [r0, #12]
 800ad20:	b13c      	cbz	r4, 800ad32 <_Bfree+0x3a>
 800ad22:	69eb      	ldr	r3, [r5, #28]
 800ad24:	6862      	ldr	r2, [r4, #4]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad2c:	6021      	str	r1, [r4, #0]
 800ad2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	0800c1b6 	.word	0x0800c1b6
 800ad38:	0800c296 	.word	0x0800c296

0800ad3c <__multadd>:
 800ad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad40:	690d      	ldr	r5, [r1, #16]
 800ad42:	4607      	mov	r7, r0
 800ad44:	460c      	mov	r4, r1
 800ad46:	461e      	mov	r6, r3
 800ad48:	f101 0c14 	add.w	ip, r1, #20
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad52:	b299      	uxth	r1, r3
 800ad54:	fb02 6101 	mla	r1, r2, r1, r6
 800ad58:	0c1e      	lsrs	r6, r3, #16
 800ad5a:	0c0b      	lsrs	r3, r1, #16
 800ad5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad60:	b289      	uxth	r1, r1
 800ad62:	3001      	adds	r0, #1
 800ad64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad68:	4285      	cmp	r5, r0
 800ad6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad72:	dcec      	bgt.n	800ad4e <__multadd+0x12>
 800ad74:	b30e      	cbz	r6, 800adba <__multadd+0x7e>
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	42ab      	cmp	r3, r5
 800ad7a:	dc19      	bgt.n	800adb0 <__multadd+0x74>
 800ad7c:	6861      	ldr	r1, [r4, #4]
 800ad7e:	4638      	mov	r0, r7
 800ad80:	3101      	adds	r1, #1
 800ad82:	f7ff ff79 	bl	800ac78 <_Balloc>
 800ad86:	4680      	mov	r8, r0
 800ad88:	b928      	cbnz	r0, 800ad96 <__multadd+0x5a>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	@ (800adc0 <__multadd+0x84>)
 800ad8e:	480d      	ldr	r0, [pc, #52]	@ (800adc4 <__multadd+0x88>)
 800ad90:	21ba      	movs	r1, #186	@ 0xba
 800ad92:	f001 f89f 	bl	800bed4 <__assert_func>
 800ad96:	6922      	ldr	r2, [r4, #16]
 800ad98:	3202      	adds	r2, #2
 800ad9a:	f104 010c 	add.w	r1, r4, #12
 800ad9e:	0092      	lsls	r2, r2, #2
 800ada0:	300c      	adds	r0, #12
 800ada2:	f7fe fcb2 	bl	800970a <memcpy>
 800ada6:	4621      	mov	r1, r4
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ffa5 	bl	800acf8 <_Bfree>
 800adae:	4644      	mov	r4, r8
 800adb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adb4:	3501      	adds	r5, #1
 800adb6:	615e      	str	r6, [r3, #20]
 800adb8:	6125      	str	r5, [r4, #16]
 800adba:	4620      	mov	r0, r4
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	0800c225 	.word	0x0800c225
 800adc4:	0800c296 	.word	0x0800c296

0800adc8 <__s2b>:
 800adc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	460c      	mov	r4, r1
 800adce:	4615      	mov	r5, r2
 800add0:	461f      	mov	r7, r3
 800add2:	2209      	movs	r2, #9
 800add4:	3308      	adds	r3, #8
 800add6:	4606      	mov	r6, r0
 800add8:	fb93 f3f2 	sdiv	r3, r3, r2
 800addc:	2100      	movs	r1, #0
 800adde:	2201      	movs	r2, #1
 800ade0:	429a      	cmp	r2, r3
 800ade2:	db09      	blt.n	800adf8 <__s2b+0x30>
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7ff ff47 	bl	800ac78 <_Balloc>
 800adea:	b940      	cbnz	r0, 800adfe <__s2b+0x36>
 800adec:	4602      	mov	r2, r0
 800adee:	4b19      	ldr	r3, [pc, #100]	@ (800ae54 <__s2b+0x8c>)
 800adf0:	4819      	ldr	r0, [pc, #100]	@ (800ae58 <__s2b+0x90>)
 800adf2:	21d3      	movs	r1, #211	@ 0xd3
 800adf4:	f001 f86e 	bl	800bed4 <__assert_func>
 800adf8:	0052      	lsls	r2, r2, #1
 800adfa:	3101      	adds	r1, #1
 800adfc:	e7f0      	b.n	800ade0 <__s2b+0x18>
 800adfe:	9b08      	ldr	r3, [sp, #32]
 800ae00:	6143      	str	r3, [r0, #20]
 800ae02:	2d09      	cmp	r5, #9
 800ae04:	f04f 0301 	mov.w	r3, #1
 800ae08:	6103      	str	r3, [r0, #16]
 800ae0a:	dd16      	ble.n	800ae3a <__s2b+0x72>
 800ae0c:	f104 0909 	add.w	r9, r4, #9
 800ae10:	46c8      	mov	r8, r9
 800ae12:	442c      	add	r4, r5
 800ae14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae18:	4601      	mov	r1, r0
 800ae1a:	3b30      	subs	r3, #48	@ 0x30
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ff8c 	bl	800ad3c <__multadd>
 800ae24:	45a0      	cmp	r8, r4
 800ae26:	d1f5      	bne.n	800ae14 <__s2b+0x4c>
 800ae28:	f1a5 0408 	sub.w	r4, r5, #8
 800ae2c:	444c      	add	r4, r9
 800ae2e:	1b2d      	subs	r5, r5, r4
 800ae30:	1963      	adds	r3, r4, r5
 800ae32:	42bb      	cmp	r3, r7
 800ae34:	db04      	blt.n	800ae40 <__s2b+0x78>
 800ae36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae3a:	340a      	adds	r4, #10
 800ae3c:	2509      	movs	r5, #9
 800ae3e:	e7f6      	b.n	800ae2e <__s2b+0x66>
 800ae40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae44:	4601      	mov	r1, r0
 800ae46:	3b30      	subs	r3, #48	@ 0x30
 800ae48:	220a      	movs	r2, #10
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff ff76 	bl	800ad3c <__multadd>
 800ae50:	e7ee      	b.n	800ae30 <__s2b+0x68>
 800ae52:	bf00      	nop
 800ae54:	0800c225 	.word	0x0800c225
 800ae58:	0800c296 	.word	0x0800c296

0800ae5c <__hi0bits>:
 800ae5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae60:	4603      	mov	r3, r0
 800ae62:	bf36      	itet	cc
 800ae64:	0403      	lslcc	r3, r0, #16
 800ae66:	2000      	movcs	r0, #0
 800ae68:	2010      	movcc	r0, #16
 800ae6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae6e:	bf3c      	itt	cc
 800ae70:	021b      	lslcc	r3, r3, #8
 800ae72:	3008      	addcc	r0, #8
 800ae74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae78:	bf3c      	itt	cc
 800ae7a:	011b      	lslcc	r3, r3, #4
 800ae7c:	3004      	addcc	r0, #4
 800ae7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae82:	bf3c      	itt	cc
 800ae84:	009b      	lslcc	r3, r3, #2
 800ae86:	3002      	addcc	r0, #2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	db05      	blt.n	800ae98 <__hi0bits+0x3c>
 800ae8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae90:	f100 0001 	add.w	r0, r0, #1
 800ae94:	bf08      	it	eq
 800ae96:	2020      	moveq	r0, #32
 800ae98:	4770      	bx	lr

0800ae9a <__lo0bits>:
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	f013 0007 	ands.w	r0, r3, #7
 800aea2:	d00b      	beq.n	800aebc <__lo0bits+0x22>
 800aea4:	07d9      	lsls	r1, r3, #31
 800aea6:	d421      	bmi.n	800aeec <__lo0bits+0x52>
 800aea8:	0798      	lsls	r0, r3, #30
 800aeaa:	bf49      	itett	mi
 800aeac:	085b      	lsrmi	r3, r3, #1
 800aeae:	089b      	lsrpl	r3, r3, #2
 800aeb0:	2001      	movmi	r0, #1
 800aeb2:	6013      	strmi	r3, [r2, #0]
 800aeb4:	bf5c      	itt	pl
 800aeb6:	6013      	strpl	r3, [r2, #0]
 800aeb8:	2002      	movpl	r0, #2
 800aeba:	4770      	bx	lr
 800aebc:	b299      	uxth	r1, r3
 800aebe:	b909      	cbnz	r1, 800aec4 <__lo0bits+0x2a>
 800aec0:	0c1b      	lsrs	r3, r3, #16
 800aec2:	2010      	movs	r0, #16
 800aec4:	b2d9      	uxtb	r1, r3
 800aec6:	b909      	cbnz	r1, 800aecc <__lo0bits+0x32>
 800aec8:	3008      	adds	r0, #8
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	0719      	lsls	r1, r3, #28
 800aece:	bf04      	itt	eq
 800aed0:	091b      	lsreq	r3, r3, #4
 800aed2:	3004      	addeq	r0, #4
 800aed4:	0799      	lsls	r1, r3, #30
 800aed6:	bf04      	itt	eq
 800aed8:	089b      	lsreq	r3, r3, #2
 800aeda:	3002      	addeq	r0, #2
 800aedc:	07d9      	lsls	r1, r3, #31
 800aede:	d403      	bmi.n	800aee8 <__lo0bits+0x4e>
 800aee0:	085b      	lsrs	r3, r3, #1
 800aee2:	f100 0001 	add.w	r0, r0, #1
 800aee6:	d003      	beq.n	800aef0 <__lo0bits+0x56>
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	4770      	bx	lr
 800aeec:	2000      	movs	r0, #0
 800aeee:	4770      	bx	lr
 800aef0:	2020      	movs	r0, #32
 800aef2:	4770      	bx	lr

0800aef4 <__i2b>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	2101      	movs	r1, #1
 800aefa:	f7ff febd 	bl	800ac78 <_Balloc>
 800aefe:	4602      	mov	r2, r0
 800af00:	b928      	cbnz	r0, 800af0e <__i2b+0x1a>
 800af02:	4b05      	ldr	r3, [pc, #20]	@ (800af18 <__i2b+0x24>)
 800af04:	4805      	ldr	r0, [pc, #20]	@ (800af1c <__i2b+0x28>)
 800af06:	f240 1145 	movw	r1, #325	@ 0x145
 800af0a:	f000 ffe3 	bl	800bed4 <__assert_func>
 800af0e:	2301      	movs	r3, #1
 800af10:	6144      	str	r4, [r0, #20]
 800af12:	6103      	str	r3, [r0, #16]
 800af14:	bd10      	pop	{r4, pc}
 800af16:	bf00      	nop
 800af18:	0800c225 	.word	0x0800c225
 800af1c:	0800c296 	.word	0x0800c296

0800af20 <__multiply>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	4614      	mov	r4, r2
 800af26:	690a      	ldr	r2, [r1, #16]
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	bfa8      	it	ge
 800af2e:	4623      	movge	r3, r4
 800af30:	460f      	mov	r7, r1
 800af32:	bfa4      	itt	ge
 800af34:	460c      	movge	r4, r1
 800af36:	461f      	movge	r7, r3
 800af38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	6861      	ldr	r1, [r4, #4]
 800af44:	eb0a 0609 	add.w	r6, sl, r9
 800af48:	42b3      	cmp	r3, r6
 800af4a:	b085      	sub	sp, #20
 800af4c:	bfb8      	it	lt
 800af4e:	3101      	addlt	r1, #1
 800af50:	f7ff fe92 	bl	800ac78 <_Balloc>
 800af54:	b930      	cbnz	r0, 800af64 <__multiply+0x44>
 800af56:	4602      	mov	r2, r0
 800af58:	4b44      	ldr	r3, [pc, #272]	@ (800b06c <__multiply+0x14c>)
 800af5a:	4845      	ldr	r0, [pc, #276]	@ (800b070 <__multiply+0x150>)
 800af5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af60:	f000 ffb8 	bl	800bed4 <__assert_func>
 800af64:	f100 0514 	add.w	r5, r0, #20
 800af68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af6c:	462b      	mov	r3, r5
 800af6e:	2200      	movs	r2, #0
 800af70:	4543      	cmp	r3, r8
 800af72:	d321      	bcc.n	800afb8 <__multiply+0x98>
 800af74:	f107 0114 	add.w	r1, r7, #20
 800af78:	f104 0214 	add.w	r2, r4, #20
 800af7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	1b13      	subs	r3, r2, r4
 800af88:	3b15      	subs	r3, #21
 800af8a:	f023 0303 	bic.w	r3, r3, #3
 800af8e:	3304      	adds	r3, #4
 800af90:	f104 0715 	add.w	r7, r4, #21
 800af94:	42ba      	cmp	r2, r7
 800af96:	bf38      	it	cc
 800af98:	2304      	movcc	r3, #4
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	9b02      	ldr	r3, [sp, #8]
 800af9e:	9103      	str	r1, [sp, #12]
 800afa0:	428b      	cmp	r3, r1
 800afa2:	d80c      	bhi.n	800afbe <__multiply+0x9e>
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	dd03      	ble.n	800afb0 <__multiply+0x90>
 800afa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afac:	2b00      	cmp	r3, #0
 800afae:	d05b      	beq.n	800b068 <__multiply+0x148>
 800afb0:	6106      	str	r6, [r0, #16]
 800afb2:	b005      	add	sp, #20
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	f843 2b04 	str.w	r2, [r3], #4
 800afbc:	e7d8      	b.n	800af70 <__multiply+0x50>
 800afbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800afc2:	f1ba 0f00 	cmp.w	sl, #0
 800afc6:	d024      	beq.n	800b012 <__multiply+0xf2>
 800afc8:	f104 0e14 	add.w	lr, r4, #20
 800afcc:	46a9      	mov	r9, r5
 800afce:	f04f 0c00 	mov.w	ip, #0
 800afd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afd6:	f8d9 3000 	ldr.w	r3, [r9]
 800afda:	fa1f fb87 	uxth.w	fp, r7
 800afde:	b29b      	uxth	r3, r3
 800afe0:	fb0a 330b 	mla	r3, sl, fp, r3
 800afe4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afe8:	f8d9 7000 	ldr.w	r7, [r9]
 800afec:	4463      	add	r3, ip
 800afee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aff2:	fb0a c70b 	mla	r7, sl, fp, ip
 800aff6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800affa:	b29b      	uxth	r3, r3
 800affc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b000:	4572      	cmp	r2, lr
 800b002:	f849 3b04 	str.w	r3, [r9], #4
 800b006:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b00a:	d8e2      	bhi.n	800afd2 <__multiply+0xb2>
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	f845 c003 	str.w	ip, [r5, r3]
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b018:	3104      	adds	r1, #4
 800b01a:	f1b9 0f00 	cmp.w	r9, #0
 800b01e:	d021      	beq.n	800b064 <__multiply+0x144>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	f104 0c14 	add.w	ip, r4, #20
 800b026:	46ae      	mov	lr, r5
 800b028:	f04f 0a00 	mov.w	sl, #0
 800b02c:	f8bc b000 	ldrh.w	fp, [ip]
 800b030:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b034:	fb09 770b 	mla	r7, r9, fp, r7
 800b038:	4457      	add	r7, sl
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b040:	f84e 3b04 	str.w	r3, [lr], #4
 800b044:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b04c:	f8be 3000 	ldrh.w	r3, [lr]
 800b050:	fb09 330a 	mla	r3, r9, sl, r3
 800b054:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b058:	4562      	cmp	r2, ip
 800b05a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b05e:	d8e5      	bhi.n	800b02c <__multiply+0x10c>
 800b060:	9f01      	ldr	r7, [sp, #4]
 800b062:	51eb      	str	r3, [r5, r7]
 800b064:	3504      	adds	r5, #4
 800b066:	e799      	b.n	800af9c <__multiply+0x7c>
 800b068:	3e01      	subs	r6, #1
 800b06a:	e79b      	b.n	800afa4 <__multiply+0x84>
 800b06c:	0800c225 	.word	0x0800c225
 800b070:	0800c296 	.word	0x0800c296

0800b074 <__pow5mult>:
 800b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b078:	4615      	mov	r5, r2
 800b07a:	f012 0203 	ands.w	r2, r2, #3
 800b07e:	4607      	mov	r7, r0
 800b080:	460e      	mov	r6, r1
 800b082:	d007      	beq.n	800b094 <__pow5mult+0x20>
 800b084:	4c25      	ldr	r4, [pc, #148]	@ (800b11c <__pow5mult+0xa8>)
 800b086:	3a01      	subs	r2, #1
 800b088:	2300      	movs	r3, #0
 800b08a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b08e:	f7ff fe55 	bl	800ad3c <__multadd>
 800b092:	4606      	mov	r6, r0
 800b094:	10ad      	asrs	r5, r5, #2
 800b096:	d03d      	beq.n	800b114 <__pow5mult+0xa0>
 800b098:	69fc      	ldr	r4, [r7, #28]
 800b09a:	b97c      	cbnz	r4, 800b0bc <__pow5mult+0x48>
 800b09c:	2010      	movs	r0, #16
 800b09e:	f7ff fd23 	bl	800aae8 <malloc>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	61f8      	str	r0, [r7, #28]
 800b0a6:	b928      	cbnz	r0, 800b0b4 <__pow5mult+0x40>
 800b0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b120 <__pow5mult+0xac>)
 800b0aa:	481e      	ldr	r0, [pc, #120]	@ (800b124 <__pow5mult+0xb0>)
 800b0ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0b0:	f000 ff10 	bl	800bed4 <__assert_func>
 800b0b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0b8:	6004      	str	r4, [r0, #0]
 800b0ba:	60c4      	str	r4, [r0, #12]
 800b0bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0c4:	b94c      	cbnz	r4, 800b0da <__pow5mult+0x66>
 800b0c6:	f240 2171 	movw	r1, #625	@ 0x271
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f7ff ff12 	bl	800aef4 <__i2b>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	f04f 0900 	mov.w	r9, #0
 800b0de:	07eb      	lsls	r3, r5, #31
 800b0e0:	d50a      	bpl.n	800b0f8 <__pow5mult+0x84>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f7ff ff1a 	bl	800af20 <__multiply>
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f7ff fe01 	bl	800acf8 <_Bfree>
 800b0f6:	4646      	mov	r6, r8
 800b0f8:	106d      	asrs	r5, r5, #1
 800b0fa:	d00b      	beq.n	800b114 <__pow5mult+0xa0>
 800b0fc:	6820      	ldr	r0, [r4, #0]
 800b0fe:	b938      	cbnz	r0, 800b110 <__pow5mult+0x9c>
 800b100:	4622      	mov	r2, r4
 800b102:	4621      	mov	r1, r4
 800b104:	4638      	mov	r0, r7
 800b106:	f7ff ff0b 	bl	800af20 <__multiply>
 800b10a:	6020      	str	r0, [r4, #0]
 800b10c:	f8c0 9000 	str.w	r9, [r0]
 800b110:	4604      	mov	r4, r0
 800b112:	e7e4      	b.n	800b0de <__pow5mult+0x6a>
 800b114:	4630      	mov	r0, r6
 800b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11a:	bf00      	nop
 800b11c:	0800c2f0 	.word	0x0800c2f0
 800b120:	0800c1b6 	.word	0x0800c1b6
 800b124:	0800c296 	.word	0x0800c296

0800b128 <__lshift>:
 800b128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b12c:	460c      	mov	r4, r1
 800b12e:	6849      	ldr	r1, [r1, #4]
 800b130:	6923      	ldr	r3, [r4, #16]
 800b132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	4607      	mov	r7, r0
 800b13a:	4691      	mov	r9, r2
 800b13c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b140:	f108 0601 	add.w	r6, r8, #1
 800b144:	42b3      	cmp	r3, r6
 800b146:	db0b      	blt.n	800b160 <__lshift+0x38>
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff fd95 	bl	800ac78 <_Balloc>
 800b14e:	4605      	mov	r5, r0
 800b150:	b948      	cbnz	r0, 800b166 <__lshift+0x3e>
 800b152:	4602      	mov	r2, r0
 800b154:	4b28      	ldr	r3, [pc, #160]	@ (800b1f8 <__lshift+0xd0>)
 800b156:	4829      	ldr	r0, [pc, #164]	@ (800b1fc <__lshift+0xd4>)
 800b158:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b15c:	f000 feba 	bl	800bed4 <__assert_func>
 800b160:	3101      	adds	r1, #1
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	e7ee      	b.n	800b144 <__lshift+0x1c>
 800b166:	2300      	movs	r3, #0
 800b168:	f100 0114 	add.w	r1, r0, #20
 800b16c:	f100 0210 	add.w	r2, r0, #16
 800b170:	4618      	mov	r0, r3
 800b172:	4553      	cmp	r3, sl
 800b174:	db33      	blt.n	800b1de <__lshift+0xb6>
 800b176:	6920      	ldr	r0, [r4, #16]
 800b178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b17c:	f104 0314 	add.w	r3, r4, #20
 800b180:	f019 091f 	ands.w	r9, r9, #31
 800b184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b188:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b18c:	d02b      	beq.n	800b1e6 <__lshift+0xbe>
 800b18e:	f1c9 0e20 	rsb	lr, r9, #32
 800b192:	468a      	mov	sl, r1
 800b194:	2200      	movs	r2, #0
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	fa00 f009 	lsl.w	r0, r0, r9
 800b19c:	4310      	orrs	r0, r2
 800b19e:	f84a 0b04 	str.w	r0, [sl], #4
 800b1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a6:	459c      	cmp	ip, r3
 800b1a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1ac:	d8f3      	bhi.n	800b196 <__lshift+0x6e>
 800b1ae:	ebac 0304 	sub.w	r3, ip, r4
 800b1b2:	3b15      	subs	r3, #21
 800b1b4:	f023 0303 	bic.w	r3, r3, #3
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	f104 0015 	add.w	r0, r4, #21
 800b1be:	4584      	cmp	ip, r0
 800b1c0:	bf38      	it	cc
 800b1c2:	2304      	movcc	r3, #4
 800b1c4:	50ca      	str	r2, [r1, r3]
 800b1c6:	b10a      	cbz	r2, 800b1cc <__lshift+0xa4>
 800b1c8:	f108 0602 	add.w	r6, r8, #2
 800b1cc:	3e01      	subs	r6, #1
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	612e      	str	r6, [r5, #16]
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f7ff fd90 	bl	800acf8 <_Bfree>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	e7c5      	b.n	800b172 <__lshift+0x4a>
 800b1e6:	3904      	subs	r1, #4
 800b1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1f0:	459c      	cmp	ip, r3
 800b1f2:	d8f9      	bhi.n	800b1e8 <__lshift+0xc0>
 800b1f4:	e7ea      	b.n	800b1cc <__lshift+0xa4>
 800b1f6:	bf00      	nop
 800b1f8:	0800c225 	.word	0x0800c225
 800b1fc:	0800c296 	.word	0x0800c296

0800b200 <__mcmp>:
 800b200:	690a      	ldr	r2, [r1, #16]
 800b202:	4603      	mov	r3, r0
 800b204:	6900      	ldr	r0, [r0, #16]
 800b206:	1a80      	subs	r0, r0, r2
 800b208:	b530      	push	{r4, r5, lr}
 800b20a:	d10e      	bne.n	800b22a <__mcmp+0x2a>
 800b20c:	3314      	adds	r3, #20
 800b20e:	3114      	adds	r1, #20
 800b210:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b214:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b218:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b21c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b220:	4295      	cmp	r5, r2
 800b222:	d003      	beq.n	800b22c <__mcmp+0x2c>
 800b224:	d205      	bcs.n	800b232 <__mcmp+0x32>
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	bd30      	pop	{r4, r5, pc}
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	d3f3      	bcc.n	800b218 <__mcmp+0x18>
 800b230:	e7fb      	b.n	800b22a <__mcmp+0x2a>
 800b232:	2001      	movs	r0, #1
 800b234:	e7f9      	b.n	800b22a <__mcmp+0x2a>
	...

0800b238 <__mdiff>:
 800b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	4689      	mov	r9, r1
 800b23e:	4606      	mov	r6, r0
 800b240:	4611      	mov	r1, r2
 800b242:	4648      	mov	r0, r9
 800b244:	4614      	mov	r4, r2
 800b246:	f7ff ffdb 	bl	800b200 <__mcmp>
 800b24a:	1e05      	subs	r5, r0, #0
 800b24c:	d112      	bne.n	800b274 <__mdiff+0x3c>
 800b24e:	4629      	mov	r1, r5
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fd11 	bl	800ac78 <_Balloc>
 800b256:	4602      	mov	r2, r0
 800b258:	b928      	cbnz	r0, 800b266 <__mdiff+0x2e>
 800b25a:	4b3f      	ldr	r3, [pc, #252]	@ (800b358 <__mdiff+0x120>)
 800b25c:	f240 2137 	movw	r1, #567	@ 0x237
 800b260:	483e      	ldr	r0, [pc, #248]	@ (800b35c <__mdiff+0x124>)
 800b262:	f000 fe37 	bl	800bed4 <__assert_func>
 800b266:	2301      	movs	r3, #1
 800b268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b26c:	4610      	mov	r0, r2
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b274:	bfbc      	itt	lt
 800b276:	464b      	movlt	r3, r9
 800b278:	46a1      	movlt	r9, r4
 800b27a:	4630      	mov	r0, r6
 800b27c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b280:	bfba      	itte	lt
 800b282:	461c      	movlt	r4, r3
 800b284:	2501      	movlt	r5, #1
 800b286:	2500      	movge	r5, #0
 800b288:	f7ff fcf6 	bl	800ac78 <_Balloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	b918      	cbnz	r0, 800b298 <__mdiff+0x60>
 800b290:	4b31      	ldr	r3, [pc, #196]	@ (800b358 <__mdiff+0x120>)
 800b292:	f240 2145 	movw	r1, #581	@ 0x245
 800b296:	e7e3      	b.n	800b260 <__mdiff+0x28>
 800b298:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b29c:	6926      	ldr	r6, [r4, #16]
 800b29e:	60c5      	str	r5, [r0, #12]
 800b2a0:	f109 0310 	add.w	r3, r9, #16
 800b2a4:	f109 0514 	add.w	r5, r9, #20
 800b2a8:	f104 0e14 	add.w	lr, r4, #20
 800b2ac:	f100 0b14 	add.w	fp, r0, #20
 800b2b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	46d9      	mov	r9, fp
 800b2bc:	f04f 0c00 	mov.w	ip, #0
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	fa1f f38a 	uxth.w	r3, sl
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	b283      	uxth	r3, r0
 800b2d4:	1acb      	subs	r3, r1, r3
 800b2d6:	0c00      	lsrs	r0, r0, #16
 800b2d8:	4463      	add	r3, ip
 800b2da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2e8:	4576      	cmp	r6, lr
 800b2ea:	f849 3b04 	str.w	r3, [r9], #4
 800b2ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2f2:	d8e5      	bhi.n	800b2c0 <__mdiff+0x88>
 800b2f4:	1b33      	subs	r3, r6, r4
 800b2f6:	3b15      	subs	r3, #21
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	3415      	adds	r4, #21
 800b2fe:	3304      	adds	r3, #4
 800b300:	42a6      	cmp	r6, r4
 800b302:	bf38      	it	cc
 800b304:	2304      	movcc	r3, #4
 800b306:	441d      	add	r5, r3
 800b308:	445b      	add	r3, fp
 800b30a:	461e      	mov	r6, r3
 800b30c:	462c      	mov	r4, r5
 800b30e:	4544      	cmp	r4, r8
 800b310:	d30e      	bcc.n	800b330 <__mdiff+0xf8>
 800b312:	f108 0103 	add.w	r1, r8, #3
 800b316:	1b49      	subs	r1, r1, r5
 800b318:	f021 0103 	bic.w	r1, r1, #3
 800b31c:	3d03      	subs	r5, #3
 800b31e:	45a8      	cmp	r8, r5
 800b320:	bf38      	it	cc
 800b322:	2100      	movcc	r1, #0
 800b324:	440b      	add	r3, r1
 800b326:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b32a:	b191      	cbz	r1, 800b352 <__mdiff+0x11a>
 800b32c:	6117      	str	r7, [r2, #16]
 800b32e:	e79d      	b.n	800b26c <__mdiff+0x34>
 800b330:	f854 1b04 	ldr.w	r1, [r4], #4
 800b334:	46e6      	mov	lr, ip
 800b336:	0c08      	lsrs	r0, r1, #16
 800b338:	fa1c fc81 	uxtah	ip, ip, r1
 800b33c:	4471      	add	r1, lr
 800b33e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b342:	b289      	uxth	r1, r1
 800b344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b348:	f846 1b04 	str.w	r1, [r6], #4
 800b34c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b350:	e7dd      	b.n	800b30e <__mdiff+0xd6>
 800b352:	3f01      	subs	r7, #1
 800b354:	e7e7      	b.n	800b326 <__mdiff+0xee>
 800b356:	bf00      	nop
 800b358:	0800c225 	.word	0x0800c225
 800b35c:	0800c296 	.word	0x0800c296

0800b360 <__ulp>:
 800b360:	b082      	sub	sp, #8
 800b362:	ed8d 0b00 	vstr	d0, [sp]
 800b366:	9a01      	ldr	r2, [sp, #4]
 800b368:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a8 <__ulp+0x48>)
 800b36a:	4013      	ands	r3, r2
 800b36c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b370:	2b00      	cmp	r3, #0
 800b372:	dc08      	bgt.n	800b386 <__ulp+0x26>
 800b374:	425b      	negs	r3, r3
 800b376:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b37a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b37e:	da04      	bge.n	800b38a <__ulp+0x2a>
 800b380:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b384:	4113      	asrs	r3, r2
 800b386:	2200      	movs	r2, #0
 800b388:	e008      	b.n	800b39c <__ulp+0x3c>
 800b38a:	f1a2 0314 	sub.w	r3, r2, #20
 800b38e:	2b1e      	cmp	r3, #30
 800b390:	bfda      	itte	le
 800b392:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b396:	40da      	lsrle	r2, r3
 800b398:	2201      	movgt	r2, #1
 800b39a:	2300      	movs	r3, #0
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	ec41 0b10 	vmov	d0, r0, r1
 800b3a4:	b002      	add	sp, #8
 800b3a6:	4770      	bx	lr
 800b3a8:	7ff00000 	.word	0x7ff00000

0800b3ac <__b2d>:
 800b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b0:	6906      	ldr	r6, [r0, #16]
 800b3b2:	f100 0814 	add.w	r8, r0, #20
 800b3b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3ba:	1f37      	subs	r7, r6, #4
 800b3bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7ff fd4b 	bl	800ae5c <__hi0bits>
 800b3c6:	f1c0 0320 	rsb	r3, r0, #32
 800b3ca:	280a      	cmp	r0, #10
 800b3cc:	600b      	str	r3, [r1, #0]
 800b3ce:	491b      	ldr	r1, [pc, #108]	@ (800b43c <__b2d+0x90>)
 800b3d0:	dc15      	bgt.n	800b3fe <__b2d+0x52>
 800b3d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3da:	45b8      	cmp	r8, r7
 800b3dc:	ea43 0501 	orr.w	r5, r3, r1
 800b3e0:	bf34      	ite	cc
 800b3e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3e6:	2300      	movcs	r3, #0
 800b3e8:	3015      	adds	r0, #21
 800b3ea:	fa02 f000 	lsl.w	r0, r2, r0
 800b3ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3f2:	4303      	orrs	r3, r0
 800b3f4:	461c      	mov	r4, r3
 800b3f6:	ec45 4b10 	vmov	d0, r4, r5
 800b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fe:	45b8      	cmp	r8, r7
 800b400:	bf3a      	itte	cc
 800b402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b406:	f1a6 0708 	subcc.w	r7, r6, #8
 800b40a:	2300      	movcs	r3, #0
 800b40c:	380b      	subs	r0, #11
 800b40e:	d012      	beq.n	800b436 <__b2d+0x8a>
 800b410:	f1c0 0120 	rsb	r1, r0, #32
 800b414:	fa23 f401 	lsr.w	r4, r3, r1
 800b418:	4082      	lsls	r2, r0
 800b41a:	4322      	orrs	r2, r4
 800b41c:	4547      	cmp	r7, r8
 800b41e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b422:	bf8c      	ite	hi
 800b424:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b428:	2200      	movls	r2, #0
 800b42a:	4083      	lsls	r3, r0
 800b42c:	40ca      	lsrs	r2, r1
 800b42e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b432:	4313      	orrs	r3, r2
 800b434:	e7de      	b.n	800b3f4 <__b2d+0x48>
 800b436:	ea42 0501 	orr.w	r5, r2, r1
 800b43a:	e7db      	b.n	800b3f4 <__b2d+0x48>
 800b43c:	3ff00000 	.word	0x3ff00000

0800b440 <__d2b>:
 800b440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b444:	460f      	mov	r7, r1
 800b446:	2101      	movs	r1, #1
 800b448:	ec59 8b10 	vmov	r8, r9, d0
 800b44c:	4616      	mov	r6, r2
 800b44e:	f7ff fc13 	bl	800ac78 <_Balloc>
 800b452:	4604      	mov	r4, r0
 800b454:	b930      	cbnz	r0, 800b464 <__d2b+0x24>
 800b456:	4602      	mov	r2, r0
 800b458:	4b23      	ldr	r3, [pc, #140]	@ (800b4e8 <__d2b+0xa8>)
 800b45a:	4824      	ldr	r0, [pc, #144]	@ (800b4ec <__d2b+0xac>)
 800b45c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b460:	f000 fd38 	bl	800bed4 <__assert_func>
 800b464:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b46c:	b10d      	cbz	r5, 800b472 <__d2b+0x32>
 800b46e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	f1b8 0300 	subs.w	r3, r8, #0
 800b478:	d023      	beq.n	800b4c2 <__d2b+0x82>
 800b47a:	4668      	mov	r0, sp
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	f7ff fd0c 	bl	800ae9a <__lo0bits>
 800b482:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b486:	b1d0      	cbz	r0, 800b4be <__d2b+0x7e>
 800b488:	f1c0 0320 	rsb	r3, r0, #32
 800b48c:	fa02 f303 	lsl.w	r3, r2, r3
 800b490:	430b      	orrs	r3, r1
 800b492:	40c2      	lsrs	r2, r0
 800b494:	6163      	str	r3, [r4, #20]
 800b496:	9201      	str	r2, [sp, #4]
 800b498:	9b01      	ldr	r3, [sp, #4]
 800b49a:	61a3      	str	r3, [r4, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	bf0c      	ite	eq
 800b4a0:	2201      	moveq	r2, #1
 800b4a2:	2202      	movne	r2, #2
 800b4a4:	6122      	str	r2, [r4, #16]
 800b4a6:	b1a5      	cbz	r5, 800b4d2 <__d2b+0x92>
 800b4a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b4ac:	4405      	add	r5, r0
 800b4ae:	603d      	str	r5, [r7, #0]
 800b4b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b4b4:	6030      	str	r0, [r6, #0]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	b003      	add	sp, #12
 800b4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4be:	6161      	str	r1, [r4, #20]
 800b4c0:	e7ea      	b.n	800b498 <__d2b+0x58>
 800b4c2:	a801      	add	r0, sp, #4
 800b4c4:	f7ff fce9 	bl	800ae9a <__lo0bits>
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	6163      	str	r3, [r4, #20]
 800b4cc:	3020      	adds	r0, #32
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	e7e8      	b.n	800b4a4 <__d2b+0x64>
 800b4d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4da:	6038      	str	r0, [r7, #0]
 800b4dc:	6918      	ldr	r0, [r3, #16]
 800b4de:	f7ff fcbd 	bl	800ae5c <__hi0bits>
 800b4e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4e6:	e7e5      	b.n	800b4b4 <__d2b+0x74>
 800b4e8:	0800c225 	.word	0x0800c225
 800b4ec:	0800c296 	.word	0x0800c296

0800b4f0 <__ratio>:
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	e9cd 1000 	strd	r1, r0, [sp]
 800b4fa:	a902      	add	r1, sp, #8
 800b4fc:	f7ff ff56 	bl	800b3ac <__b2d>
 800b500:	9800      	ldr	r0, [sp, #0]
 800b502:	a903      	add	r1, sp, #12
 800b504:	ec55 4b10 	vmov	r4, r5, d0
 800b508:	f7ff ff50 	bl	800b3ac <__b2d>
 800b50c:	9b01      	ldr	r3, [sp, #4]
 800b50e:	6919      	ldr	r1, [r3, #16]
 800b510:	9b00      	ldr	r3, [sp, #0]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	1ac9      	subs	r1, r1, r3
 800b516:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	ec5b ab10 	vmov	sl, fp, d0
 800b520:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfce      	itee	gt
 800b528:	462a      	movgt	r2, r5
 800b52a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b52e:	465a      	movle	r2, fp
 800b530:	462f      	mov	r7, r5
 800b532:	46d9      	mov	r9, fp
 800b534:	bfcc      	ite	gt
 800b536:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b53a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b53e:	464b      	mov	r3, r9
 800b540:	4652      	mov	r2, sl
 800b542:	4620      	mov	r0, r4
 800b544:	4639      	mov	r1, r7
 800b546:	f7f5 f9a9 	bl	800089c <__aeabi_ddiv>
 800b54a:	ec41 0b10 	vmov	d0, r0, r1
 800b54e:	b005      	add	sp, #20
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b554 <__copybits>:
 800b554:	3901      	subs	r1, #1
 800b556:	b570      	push	{r4, r5, r6, lr}
 800b558:	1149      	asrs	r1, r1, #5
 800b55a:	6914      	ldr	r4, [r2, #16]
 800b55c:	3101      	adds	r1, #1
 800b55e:	f102 0314 	add.w	r3, r2, #20
 800b562:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b566:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b56a:	1f05      	subs	r5, r0, #4
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d30c      	bcc.n	800b58a <__copybits+0x36>
 800b570:	1aa3      	subs	r3, r4, r2
 800b572:	3b11      	subs	r3, #17
 800b574:	f023 0303 	bic.w	r3, r3, #3
 800b578:	3211      	adds	r2, #17
 800b57a:	42a2      	cmp	r2, r4
 800b57c:	bf88      	it	hi
 800b57e:	2300      	movhi	r3, #0
 800b580:	4418      	add	r0, r3
 800b582:	2300      	movs	r3, #0
 800b584:	4288      	cmp	r0, r1
 800b586:	d305      	bcc.n	800b594 <__copybits+0x40>
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b58e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b592:	e7eb      	b.n	800b56c <__copybits+0x18>
 800b594:	f840 3b04 	str.w	r3, [r0], #4
 800b598:	e7f4      	b.n	800b584 <__copybits+0x30>

0800b59a <__any_on>:
 800b59a:	f100 0214 	add.w	r2, r0, #20
 800b59e:	6900      	ldr	r0, [r0, #16]
 800b5a0:	114b      	asrs	r3, r1, #5
 800b5a2:	4298      	cmp	r0, r3
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	db11      	blt.n	800b5cc <__any_on+0x32>
 800b5a8:	dd0a      	ble.n	800b5c0 <__any_on+0x26>
 800b5aa:	f011 011f 	ands.w	r1, r1, #31
 800b5ae:	d007      	beq.n	800b5c0 <__any_on+0x26>
 800b5b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5b4:	fa24 f001 	lsr.w	r0, r4, r1
 800b5b8:	fa00 f101 	lsl.w	r1, r0, r1
 800b5bc:	428c      	cmp	r4, r1
 800b5be:	d10b      	bne.n	800b5d8 <__any_on+0x3e>
 800b5c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d803      	bhi.n	800b5d0 <__any_on+0x36>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	bd10      	pop	{r4, pc}
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	e7f7      	b.n	800b5c0 <__any_on+0x26>
 800b5d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d0f5      	beq.n	800b5c4 <__any_on+0x2a>
 800b5d8:	2001      	movs	r0, #1
 800b5da:	e7f6      	b.n	800b5ca <__any_on+0x30>

0800b5dc <_strtol_l.constprop.0>:
 800b5dc:	2b24      	cmp	r3, #36	@ 0x24
 800b5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e2:	4686      	mov	lr, r0
 800b5e4:	4690      	mov	r8, r2
 800b5e6:	d801      	bhi.n	800b5ec <_strtol_l.constprop.0+0x10>
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d106      	bne.n	800b5fa <_strtol_l.constprop.0+0x1e>
 800b5ec:	f7fe f860 	bl	80096b0 <__errno>
 800b5f0:	2316      	movs	r3, #22
 800b5f2:	6003      	str	r3, [r0, #0]
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fa:	4834      	ldr	r0, [pc, #208]	@ (800b6cc <_strtol_l.constprop.0+0xf0>)
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	462a      	mov	r2, r5
 800b600:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b604:	5d06      	ldrb	r6, [r0, r4]
 800b606:	f016 0608 	ands.w	r6, r6, #8
 800b60a:	d1f8      	bne.n	800b5fe <_strtol_l.constprop.0+0x22>
 800b60c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b60e:	d12d      	bne.n	800b66c <_strtol_l.constprop.0+0x90>
 800b610:	782c      	ldrb	r4, [r5, #0]
 800b612:	2601      	movs	r6, #1
 800b614:	1c95      	adds	r5, r2, #2
 800b616:	f033 0210 	bics.w	r2, r3, #16
 800b61a:	d109      	bne.n	800b630 <_strtol_l.constprop.0+0x54>
 800b61c:	2c30      	cmp	r4, #48	@ 0x30
 800b61e:	d12a      	bne.n	800b676 <_strtol_l.constprop.0+0x9a>
 800b620:	782a      	ldrb	r2, [r5, #0]
 800b622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b626:	2a58      	cmp	r2, #88	@ 0x58
 800b628:	d125      	bne.n	800b676 <_strtol_l.constprop.0+0x9a>
 800b62a:	786c      	ldrb	r4, [r5, #1]
 800b62c:	2310      	movs	r3, #16
 800b62e:	3502      	adds	r5, #2
 800b630:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b634:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b638:	2200      	movs	r2, #0
 800b63a:	fbbc f9f3 	udiv	r9, ip, r3
 800b63e:	4610      	mov	r0, r2
 800b640:	fb03 ca19 	mls	sl, r3, r9, ip
 800b644:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b648:	2f09      	cmp	r7, #9
 800b64a:	d81b      	bhi.n	800b684 <_strtol_l.constprop.0+0xa8>
 800b64c:	463c      	mov	r4, r7
 800b64e:	42a3      	cmp	r3, r4
 800b650:	dd27      	ble.n	800b6a2 <_strtol_l.constprop.0+0xc6>
 800b652:	1c57      	adds	r7, r2, #1
 800b654:	d007      	beq.n	800b666 <_strtol_l.constprop.0+0x8a>
 800b656:	4581      	cmp	r9, r0
 800b658:	d320      	bcc.n	800b69c <_strtol_l.constprop.0+0xc0>
 800b65a:	d101      	bne.n	800b660 <_strtol_l.constprop.0+0x84>
 800b65c:	45a2      	cmp	sl, r4
 800b65e:	db1d      	blt.n	800b69c <_strtol_l.constprop.0+0xc0>
 800b660:	fb00 4003 	mla	r0, r0, r3, r4
 800b664:	2201      	movs	r2, #1
 800b666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b66a:	e7eb      	b.n	800b644 <_strtol_l.constprop.0+0x68>
 800b66c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b66e:	bf04      	itt	eq
 800b670:	782c      	ldrbeq	r4, [r5, #0]
 800b672:	1c95      	addeq	r5, r2, #2
 800b674:	e7cf      	b.n	800b616 <_strtol_l.constprop.0+0x3a>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1da      	bne.n	800b630 <_strtol_l.constprop.0+0x54>
 800b67a:	2c30      	cmp	r4, #48	@ 0x30
 800b67c:	bf0c      	ite	eq
 800b67e:	2308      	moveq	r3, #8
 800b680:	230a      	movne	r3, #10
 800b682:	e7d5      	b.n	800b630 <_strtol_l.constprop.0+0x54>
 800b684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b688:	2f19      	cmp	r7, #25
 800b68a:	d801      	bhi.n	800b690 <_strtol_l.constprop.0+0xb4>
 800b68c:	3c37      	subs	r4, #55	@ 0x37
 800b68e:	e7de      	b.n	800b64e <_strtol_l.constprop.0+0x72>
 800b690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b694:	2f19      	cmp	r7, #25
 800b696:	d804      	bhi.n	800b6a2 <_strtol_l.constprop.0+0xc6>
 800b698:	3c57      	subs	r4, #87	@ 0x57
 800b69a:	e7d8      	b.n	800b64e <_strtol_l.constprop.0+0x72>
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	e7e1      	b.n	800b666 <_strtol_l.constprop.0+0x8a>
 800b6a2:	1c53      	adds	r3, r2, #1
 800b6a4:	d108      	bne.n	800b6b8 <_strtol_l.constprop.0+0xdc>
 800b6a6:	2322      	movs	r3, #34	@ 0x22
 800b6a8:	f8ce 3000 	str.w	r3, [lr]
 800b6ac:	4660      	mov	r0, ip
 800b6ae:	f1b8 0f00 	cmp.w	r8, #0
 800b6b2:	d0a0      	beq.n	800b5f6 <_strtol_l.constprop.0+0x1a>
 800b6b4:	1e69      	subs	r1, r5, #1
 800b6b6:	e006      	b.n	800b6c6 <_strtol_l.constprop.0+0xea>
 800b6b8:	b106      	cbz	r6, 800b6bc <_strtol_l.constprop.0+0xe0>
 800b6ba:	4240      	negs	r0, r0
 800b6bc:	f1b8 0f00 	cmp.w	r8, #0
 800b6c0:	d099      	beq.n	800b5f6 <_strtol_l.constprop.0+0x1a>
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	d1f6      	bne.n	800b6b4 <_strtol_l.constprop.0+0xd8>
 800b6c6:	f8c8 1000 	str.w	r1, [r8]
 800b6ca:	e794      	b.n	800b5f6 <_strtol_l.constprop.0+0x1a>
 800b6cc:	0800c3f1 	.word	0x0800c3f1

0800b6d0 <_strtol_r>:
 800b6d0:	f7ff bf84 	b.w	800b5dc <_strtol_l.constprop.0>

0800b6d4 <__ascii_wctomb>:
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	b141      	cbz	r1, 800b6ec <__ascii_wctomb+0x18>
 800b6da:	2aff      	cmp	r2, #255	@ 0xff
 800b6dc:	d904      	bls.n	800b6e8 <__ascii_wctomb+0x14>
 800b6de:	228a      	movs	r2, #138	@ 0x8a
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e6:	4770      	bx	lr
 800b6e8:	700a      	strb	r2, [r1, #0]
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	4770      	bx	lr

0800b6ee <__ssputs_r>:
 800b6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f2:	688e      	ldr	r6, [r1, #8]
 800b6f4:	461f      	mov	r7, r3
 800b6f6:	42be      	cmp	r6, r7
 800b6f8:	680b      	ldr	r3, [r1, #0]
 800b6fa:	4682      	mov	sl, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	4690      	mov	r8, r2
 800b700:	d82d      	bhi.n	800b75e <__ssputs_r+0x70>
 800b702:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b706:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b70a:	d026      	beq.n	800b75a <__ssputs_r+0x6c>
 800b70c:	6965      	ldr	r5, [r4, #20]
 800b70e:	6909      	ldr	r1, [r1, #16]
 800b710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b714:	eba3 0901 	sub.w	r9, r3, r1
 800b718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b71c:	1c7b      	adds	r3, r7, #1
 800b71e:	444b      	add	r3, r9
 800b720:	106d      	asrs	r5, r5, #1
 800b722:	429d      	cmp	r5, r3
 800b724:	bf38      	it	cc
 800b726:	461d      	movcc	r5, r3
 800b728:	0553      	lsls	r3, r2, #21
 800b72a:	d527      	bpl.n	800b77c <__ssputs_r+0x8e>
 800b72c:	4629      	mov	r1, r5
 800b72e:	f7ff fa05 	bl	800ab3c <_malloc_r>
 800b732:	4606      	mov	r6, r0
 800b734:	b360      	cbz	r0, 800b790 <__ssputs_r+0xa2>
 800b736:	6921      	ldr	r1, [r4, #16]
 800b738:	464a      	mov	r2, r9
 800b73a:	f7fd ffe6 	bl	800970a <memcpy>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	6126      	str	r6, [r4, #16]
 800b74c:	6165      	str	r5, [r4, #20]
 800b74e:	444e      	add	r6, r9
 800b750:	eba5 0509 	sub.w	r5, r5, r9
 800b754:	6026      	str	r6, [r4, #0]
 800b756:	60a5      	str	r5, [r4, #8]
 800b758:	463e      	mov	r6, r7
 800b75a:	42be      	cmp	r6, r7
 800b75c:	d900      	bls.n	800b760 <__ssputs_r+0x72>
 800b75e:	463e      	mov	r6, r7
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	4632      	mov	r2, r6
 800b764:	4641      	mov	r1, r8
 800b766:	f000 fb69 	bl	800be3c <memmove>
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	1b9b      	subs	r3, r3, r6
 800b76e:	60a3      	str	r3, [r4, #8]
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	4433      	add	r3, r6
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	2000      	movs	r0, #0
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	462a      	mov	r2, r5
 800b77e:	f000 fbdb 	bl	800bf38 <_realloc_r>
 800b782:	4606      	mov	r6, r0
 800b784:	2800      	cmp	r0, #0
 800b786:	d1e0      	bne.n	800b74a <__ssputs_r+0x5c>
 800b788:	6921      	ldr	r1, [r4, #16]
 800b78a:	4650      	mov	r0, sl
 800b78c:	f7fe fe28 	bl	800a3e0 <_free_r>
 800b790:	230c      	movs	r3, #12
 800b792:	f8ca 3000 	str.w	r3, [sl]
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b79c:	81a3      	strh	r3, [r4, #12]
 800b79e:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a2:	e7e9      	b.n	800b778 <__ssputs_r+0x8a>

0800b7a4 <_svfiprintf_r>:
 800b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	4698      	mov	r8, r3
 800b7aa:	898b      	ldrh	r3, [r1, #12]
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	b09d      	sub	sp, #116	@ 0x74
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	d510      	bpl.n	800b7da <_svfiprintf_r+0x36>
 800b7b8:	690b      	ldr	r3, [r1, #16]
 800b7ba:	b973      	cbnz	r3, 800b7da <_svfiprintf_r+0x36>
 800b7bc:	2140      	movs	r1, #64	@ 0x40
 800b7be:	f7ff f9bd 	bl	800ab3c <_malloc_r>
 800b7c2:	6028      	str	r0, [r5, #0]
 800b7c4:	6128      	str	r0, [r5, #16]
 800b7c6:	b930      	cbnz	r0, 800b7d6 <_svfiprintf_r+0x32>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	b01d      	add	sp, #116	@ 0x74
 800b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d6:	2340      	movs	r3, #64	@ 0x40
 800b7d8:	616b      	str	r3, [r5, #20]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7de:	2320      	movs	r3, #32
 800b7e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e8:	2330      	movs	r3, #48	@ 0x30
 800b7ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b988 <_svfiprintf_r+0x1e4>
 800b7ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f2:	f04f 0901 	mov.w	r9, #1
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fe:	b10a      	cbz	r2, 800b804 <_svfiprintf_r+0x60>
 800b800:	2a25      	cmp	r2, #37	@ 0x25
 800b802:	d1f9      	bne.n	800b7f8 <_svfiprintf_r+0x54>
 800b804:	ebba 0b04 	subs.w	fp, sl, r4
 800b808:	d00b      	beq.n	800b822 <_svfiprintf_r+0x7e>
 800b80a:	465b      	mov	r3, fp
 800b80c:	4622      	mov	r2, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ff6c 	bl	800b6ee <__ssputs_r>
 800b816:	3001      	adds	r0, #1
 800b818:	f000 80a7 	beq.w	800b96a <_svfiprintf_r+0x1c6>
 800b81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b81e:	445a      	add	r2, fp
 800b820:	9209      	str	r2, [sp, #36]	@ 0x24
 800b822:	f89a 3000 	ldrb.w	r3, [sl]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 809f 	beq.w	800b96a <_svfiprintf_r+0x1c6>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b836:	f10a 0a01 	add.w	sl, sl, #1
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b842:	931a      	str	r3, [sp, #104]	@ 0x68
 800b844:	4654      	mov	r4, sl
 800b846:	2205      	movs	r2, #5
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	484e      	ldr	r0, [pc, #312]	@ (800b988 <_svfiprintf_r+0x1e4>)
 800b84e:	f7f4 fce7 	bl	8000220 <memchr>
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	b9d8      	cbnz	r0, 800b88e <_svfiprintf_r+0xea>
 800b856:	06d0      	lsls	r0, r2, #27
 800b858:	bf44      	itt	mi
 800b85a:	2320      	movmi	r3, #32
 800b85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b860:	0711      	lsls	r1, r2, #28
 800b862:	bf44      	itt	mi
 800b864:	232b      	movmi	r3, #43	@ 0x2b
 800b866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b86a:	f89a 3000 	ldrb.w	r3, [sl]
 800b86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b870:	d015      	beq.n	800b89e <_svfiprintf_r+0xfa>
 800b872:	9a07      	ldr	r2, [sp, #28]
 800b874:	4654      	mov	r4, sl
 800b876:	2000      	movs	r0, #0
 800b878:	f04f 0c0a 	mov.w	ip, #10
 800b87c:	4621      	mov	r1, r4
 800b87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b882:	3b30      	subs	r3, #48	@ 0x30
 800b884:	2b09      	cmp	r3, #9
 800b886:	d94b      	bls.n	800b920 <_svfiprintf_r+0x17c>
 800b888:	b1b0      	cbz	r0, 800b8b8 <_svfiprintf_r+0x114>
 800b88a:	9207      	str	r2, [sp, #28]
 800b88c:	e014      	b.n	800b8b8 <_svfiprintf_r+0x114>
 800b88e:	eba0 0308 	sub.w	r3, r0, r8
 800b892:	fa09 f303 	lsl.w	r3, r9, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	46a2      	mov	sl, r4
 800b89c:	e7d2      	b.n	800b844 <_svfiprintf_r+0xa0>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfbb      	ittet	lt
 800b8aa:	425b      	neglt	r3, r3
 800b8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b0:	9307      	strge	r3, [sp, #28]
 800b8b2:	9307      	strlt	r3, [sp, #28]
 800b8b4:	bfb8      	it	lt
 800b8b6:	9204      	strlt	r2, [sp, #16]
 800b8b8:	7823      	ldrb	r3, [r4, #0]
 800b8ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8bc:	d10a      	bne.n	800b8d4 <_svfiprintf_r+0x130>
 800b8be:	7863      	ldrb	r3, [r4, #1]
 800b8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c2:	d132      	bne.n	800b92a <_svfiprintf_r+0x186>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	1d1a      	adds	r2, r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	9203      	str	r2, [sp, #12]
 800b8cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8d0:	3402      	adds	r4, #2
 800b8d2:	9305      	str	r3, [sp, #20]
 800b8d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b998 <_svfiprintf_r+0x1f4>
 800b8d8:	7821      	ldrb	r1, [r4, #0]
 800b8da:	2203      	movs	r2, #3
 800b8dc:	4650      	mov	r0, sl
 800b8de:	f7f4 fc9f 	bl	8000220 <memchr>
 800b8e2:	b138      	cbz	r0, 800b8f4 <_svfiprintf_r+0x150>
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ea:	2240      	movs	r2, #64	@ 0x40
 800b8ec:	4082      	lsls	r2, r0
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f8:	4824      	ldr	r0, [pc, #144]	@ (800b98c <_svfiprintf_r+0x1e8>)
 800b8fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8fe:	2206      	movs	r2, #6
 800b900:	f7f4 fc8e 	bl	8000220 <memchr>
 800b904:	2800      	cmp	r0, #0
 800b906:	d036      	beq.n	800b976 <_svfiprintf_r+0x1d2>
 800b908:	4b21      	ldr	r3, [pc, #132]	@ (800b990 <_svfiprintf_r+0x1ec>)
 800b90a:	bb1b      	cbnz	r3, 800b954 <_svfiprintf_r+0x1b0>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	3307      	adds	r3, #7
 800b910:	f023 0307 	bic.w	r3, r3, #7
 800b914:	3308      	adds	r3, #8
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91a:	4433      	add	r3, r6
 800b91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91e:	e76a      	b.n	800b7f6 <_svfiprintf_r+0x52>
 800b920:	fb0c 3202 	mla	r2, ip, r2, r3
 800b924:	460c      	mov	r4, r1
 800b926:	2001      	movs	r0, #1
 800b928:	e7a8      	b.n	800b87c <_svfiprintf_r+0xd8>
 800b92a:	2300      	movs	r3, #0
 800b92c:	3401      	adds	r4, #1
 800b92e:	9305      	str	r3, [sp, #20]
 800b930:	4619      	mov	r1, r3
 800b932:	f04f 0c0a 	mov.w	ip, #10
 800b936:	4620      	mov	r0, r4
 800b938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93c:	3a30      	subs	r2, #48	@ 0x30
 800b93e:	2a09      	cmp	r2, #9
 800b940:	d903      	bls.n	800b94a <_svfiprintf_r+0x1a6>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0c6      	beq.n	800b8d4 <_svfiprintf_r+0x130>
 800b946:	9105      	str	r1, [sp, #20]
 800b948:	e7c4      	b.n	800b8d4 <_svfiprintf_r+0x130>
 800b94a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94e:	4604      	mov	r4, r0
 800b950:	2301      	movs	r3, #1
 800b952:	e7f0      	b.n	800b936 <_svfiprintf_r+0x192>
 800b954:	ab03      	add	r3, sp, #12
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	462a      	mov	r2, r5
 800b95a:	4b0e      	ldr	r3, [pc, #56]	@ (800b994 <_svfiprintf_r+0x1f0>)
 800b95c:	a904      	add	r1, sp, #16
 800b95e:	4638      	mov	r0, r7
 800b960:	f7fc fd90 	bl	8008484 <_printf_float>
 800b964:	1c42      	adds	r2, r0, #1
 800b966:	4606      	mov	r6, r0
 800b968:	d1d6      	bne.n	800b918 <_svfiprintf_r+0x174>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	065b      	lsls	r3, r3, #25
 800b96e:	f53f af2d 	bmi.w	800b7cc <_svfiprintf_r+0x28>
 800b972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b974:	e72c      	b.n	800b7d0 <_svfiprintf_r+0x2c>
 800b976:	ab03      	add	r3, sp, #12
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	462a      	mov	r2, r5
 800b97c:	4b05      	ldr	r3, [pc, #20]	@ (800b994 <_svfiprintf_r+0x1f0>)
 800b97e:	a904      	add	r1, sp, #16
 800b980:	4638      	mov	r0, r7
 800b982:	f7fd f817 	bl	80089b4 <_printf_i>
 800b986:	e7ed      	b.n	800b964 <_svfiprintf_r+0x1c0>
 800b988:	0800c4f1 	.word	0x0800c4f1
 800b98c:	0800c4fb 	.word	0x0800c4fb
 800b990:	08008485 	.word	0x08008485
 800b994:	0800b6ef 	.word	0x0800b6ef
 800b998:	0800c4f7 	.word	0x0800c4f7

0800b99c <__sfputc_r>:
 800b99c:	6893      	ldr	r3, [r2, #8]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	b410      	push	{r4}
 800b9a4:	6093      	str	r3, [r2, #8]
 800b9a6:	da08      	bge.n	800b9ba <__sfputc_r+0x1e>
 800b9a8:	6994      	ldr	r4, [r2, #24]
 800b9aa:	42a3      	cmp	r3, r4
 800b9ac:	db01      	blt.n	800b9b2 <__sfputc_r+0x16>
 800b9ae:	290a      	cmp	r1, #10
 800b9b0:	d103      	bne.n	800b9ba <__sfputc_r+0x1e>
 800b9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9b6:	f7fd bd82 	b.w	80094be <__swbuf_r>
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	1c58      	adds	r0, r3, #1
 800b9be:	6010      	str	r0, [r2, #0]
 800b9c0:	7019      	strb	r1, [r3, #0]
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <__sfputs_r>:
 800b9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	460f      	mov	r7, r1
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	18d5      	adds	r5, r2, r3
 800b9d4:	42ac      	cmp	r4, r5
 800b9d6:	d101      	bne.n	800b9dc <__sfputs_r+0x12>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	e007      	b.n	800b9ec <__sfputs_r+0x22>
 800b9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e0:	463a      	mov	r2, r7
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7ff ffda 	bl	800b99c <__sfputc_r>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d1f3      	bne.n	800b9d4 <__sfputs_r+0xa>
 800b9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9f0 <_vfiprintf_r>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	b09d      	sub	sp, #116	@ 0x74
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	4698      	mov	r8, r3
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	b118      	cbz	r0, 800ba08 <_vfiprintf_r+0x18>
 800ba00:	6a03      	ldr	r3, [r0, #32]
 800ba02:	b90b      	cbnz	r3, 800ba08 <_vfiprintf_r+0x18>
 800ba04:	f7fd fb96 	bl	8009134 <__sinit>
 800ba08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba0a:	07d9      	lsls	r1, r3, #31
 800ba0c:	d405      	bmi.n	800ba1a <_vfiprintf_r+0x2a>
 800ba0e:	89ab      	ldrh	r3, [r5, #12]
 800ba10:	059a      	lsls	r2, r3, #22
 800ba12:	d402      	bmi.n	800ba1a <_vfiprintf_r+0x2a>
 800ba14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba16:	f7fd fe76 	bl	8009706 <__retarget_lock_acquire_recursive>
 800ba1a:	89ab      	ldrh	r3, [r5, #12]
 800ba1c:	071b      	lsls	r3, r3, #28
 800ba1e:	d501      	bpl.n	800ba24 <_vfiprintf_r+0x34>
 800ba20:	692b      	ldr	r3, [r5, #16]
 800ba22:	b99b      	cbnz	r3, 800ba4c <_vfiprintf_r+0x5c>
 800ba24:	4629      	mov	r1, r5
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7fd fd88 	bl	800953c <__swsetup_r>
 800ba2c:	b170      	cbz	r0, 800ba4c <_vfiprintf_r+0x5c>
 800ba2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba30:	07dc      	lsls	r4, r3, #31
 800ba32:	d504      	bpl.n	800ba3e <_vfiprintf_r+0x4e>
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	b01d      	add	sp, #116	@ 0x74
 800ba3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3e:	89ab      	ldrh	r3, [r5, #12]
 800ba40:	0598      	lsls	r0, r3, #22
 800ba42:	d4f7      	bmi.n	800ba34 <_vfiprintf_r+0x44>
 800ba44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba46:	f7fd fe5f 	bl	8009708 <__retarget_lock_release_recursive>
 800ba4a:	e7f3      	b.n	800ba34 <_vfiprintf_r+0x44>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba50:	2320      	movs	r3, #32
 800ba52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba5a:	2330      	movs	r3, #48	@ 0x30
 800ba5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc0c <_vfiprintf_r+0x21c>
 800ba60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba64:	f04f 0901 	mov.w	r9, #1
 800ba68:	4623      	mov	r3, r4
 800ba6a:	469a      	mov	sl, r3
 800ba6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba70:	b10a      	cbz	r2, 800ba76 <_vfiprintf_r+0x86>
 800ba72:	2a25      	cmp	r2, #37	@ 0x25
 800ba74:	d1f9      	bne.n	800ba6a <_vfiprintf_r+0x7a>
 800ba76:	ebba 0b04 	subs.w	fp, sl, r4
 800ba7a:	d00b      	beq.n	800ba94 <_vfiprintf_r+0xa4>
 800ba7c:	465b      	mov	r3, fp
 800ba7e:	4622      	mov	r2, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7ff ffa1 	bl	800b9ca <__sfputs_r>
 800ba88:	3001      	adds	r0, #1
 800ba8a:	f000 80a7 	beq.w	800bbdc <_vfiprintf_r+0x1ec>
 800ba8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba90:	445a      	add	r2, fp
 800ba92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba94:	f89a 3000 	ldrb.w	r3, [sl]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 809f 	beq.w	800bbdc <_vfiprintf_r+0x1ec>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f04f 32ff 	mov.w	r2, #4294967295
 800baa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baa8:	f10a 0a01 	add.w	sl, sl, #1
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	9307      	str	r3, [sp, #28]
 800bab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bab6:	4654      	mov	r4, sl
 800bab8:	2205      	movs	r2, #5
 800baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babe:	4853      	ldr	r0, [pc, #332]	@ (800bc0c <_vfiprintf_r+0x21c>)
 800bac0:	f7f4 fbae 	bl	8000220 <memchr>
 800bac4:	9a04      	ldr	r2, [sp, #16]
 800bac6:	b9d8      	cbnz	r0, 800bb00 <_vfiprintf_r+0x110>
 800bac8:	06d1      	lsls	r1, r2, #27
 800baca:	bf44      	itt	mi
 800bacc:	2320      	movmi	r3, #32
 800bace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bad2:	0713      	lsls	r3, r2, #28
 800bad4:	bf44      	itt	mi
 800bad6:	232b      	movmi	r3, #43	@ 0x2b
 800bad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800badc:	f89a 3000 	ldrb.w	r3, [sl]
 800bae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bae2:	d015      	beq.n	800bb10 <_vfiprintf_r+0x120>
 800bae4:	9a07      	ldr	r2, [sp, #28]
 800bae6:	4654      	mov	r4, sl
 800bae8:	2000      	movs	r0, #0
 800baea:	f04f 0c0a 	mov.w	ip, #10
 800baee:	4621      	mov	r1, r4
 800baf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baf4:	3b30      	subs	r3, #48	@ 0x30
 800baf6:	2b09      	cmp	r3, #9
 800baf8:	d94b      	bls.n	800bb92 <_vfiprintf_r+0x1a2>
 800bafa:	b1b0      	cbz	r0, 800bb2a <_vfiprintf_r+0x13a>
 800bafc:	9207      	str	r2, [sp, #28]
 800bafe:	e014      	b.n	800bb2a <_vfiprintf_r+0x13a>
 800bb00:	eba0 0308 	sub.w	r3, r0, r8
 800bb04:	fa09 f303 	lsl.w	r3, r9, r3
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	46a2      	mov	sl, r4
 800bb0e:	e7d2      	b.n	800bab6 <_vfiprintf_r+0xc6>
 800bb10:	9b03      	ldr	r3, [sp, #12]
 800bb12:	1d19      	adds	r1, r3, #4
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	9103      	str	r1, [sp, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bfbb      	ittet	lt
 800bb1c:	425b      	neglt	r3, r3
 800bb1e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb22:	9307      	strge	r3, [sp, #28]
 800bb24:	9307      	strlt	r3, [sp, #28]
 800bb26:	bfb8      	it	lt
 800bb28:	9204      	strlt	r2, [sp, #16]
 800bb2a:	7823      	ldrb	r3, [r4, #0]
 800bb2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb2e:	d10a      	bne.n	800bb46 <_vfiprintf_r+0x156>
 800bb30:	7863      	ldrb	r3, [r4, #1]
 800bb32:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb34:	d132      	bne.n	800bb9c <_vfiprintf_r+0x1ac>
 800bb36:	9b03      	ldr	r3, [sp, #12]
 800bb38:	1d1a      	adds	r2, r3, #4
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	9203      	str	r2, [sp, #12]
 800bb3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb42:	3402      	adds	r4, #2
 800bb44:	9305      	str	r3, [sp, #20]
 800bb46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc1c <_vfiprintf_r+0x22c>
 800bb4a:	7821      	ldrb	r1, [r4, #0]
 800bb4c:	2203      	movs	r2, #3
 800bb4e:	4650      	mov	r0, sl
 800bb50:	f7f4 fb66 	bl	8000220 <memchr>
 800bb54:	b138      	cbz	r0, 800bb66 <_vfiprintf_r+0x176>
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	eba0 000a 	sub.w	r0, r0, sl
 800bb5c:	2240      	movs	r2, #64	@ 0x40
 800bb5e:	4082      	lsls	r2, r0
 800bb60:	4313      	orrs	r3, r2
 800bb62:	3401      	adds	r4, #1
 800bb64:	9304      	str	r3, [sp, #16]
 800bb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6a:	4829      	ldr	r0, [pc, #164]	@ (800bc10 <_vfiprintf_r+0x220>)
 800bb6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb70:	2206      	movs	r2, #6
 800bb72:	f7f4 fb55 	bl	8000220 <memchr>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d03f      	beq.n	800bbfa <_vfiprintf_r+0x20a>
 800bb7a:	4b26      	ldr	r3, [pc, #152]	@ (800bc14 <_vfiprintf_r+0x224>)
 800bb7c:	bb1b      	cbnz	r3, 800bbc6 <_vfiprintf_r+0x1d6>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	3307      	adds	r3, #7
 800bb82:	f023 0307 	bic.w	r3, r3, #7
 800bb86:	3308      	adds	r3, #8
 800bb88:	9303      	str	r3, [sp, #12]
 800bb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8c:	443b      	add	r3, r7
 800bb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb90:	e76a      	b.n	800ba68 <_vfiprintf_r+0x78>
 800bb92:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb96:	460c      	mov	r4, r1
 800bb98:	2001      	movs	r0, #1
 800bb9a:	e7a8      	b.n	800baee <_vfiprintf_r+0xfe>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	3401      	adds	r4, #1
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	4619      	mov	r1, r3
 800bba4:	f04f 0c0a 	mov.w	ip, #10
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbae:	3a30      	subs	r2, #48	@ 0x30
 800bbb0:	2a09      	cmp	r2, #9
 800bbb2:	d903      	bls.n	800bbbc <_vfiprintf_r+0x1cc>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0c6      	beq.n	800bb46 <_vfiprintf_r+0x156>
 800bbb8:	9105      	str	r1, [sp, #20]
 800bbba:	e7c4      	b.n	800bb46 <_vfiprintf_r+0x156>
 800bbbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e7f0      	b.n	800bba8 <_vfiprintf_r+0x1b8>
 800bbc6:	ab03      	add	r3, sp, #12
 800bbc8:	9300      	str	r3, [sp, #0]
 800bbca:	462a      	mov	r2, r5
 800bbcc:	4b12      	ldr	r3, [pc, #72]	@ (800bc18 <_vfiprintf_r+0x228>)
 800bbce:	a904      	add	r1, sp, #16
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7fc fc57 	bl	8008484 <_printf_float>
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	1c78      	adds	r0, r7, #1
 800bbda:	d1d6      	bne.n	800bb8a <_vfiprintf_r+0x19a>
 800bbdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbde:	07d9      	lsls	r1, r3, #31
 800bbe0:	d405      	bmi.n	800bbee <_vfiprintf_r+0x1fe>
 800bbe2:	89ab      	ldrh	r3, [r5, #12]
 800bbe4:	059a      	lsls	r2, r3, #22
 800bbe6:	d402      	bmi.n	800bbee <_vfiprintf_r+0x1fe>
 800bbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbea:	f7fd fd8d 	bl	8009708 <__retarget_lock_release_recursive>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	065b      	lsls	r3, r3, #25
 800bbf2:	f53f af1f 	bmi.w	800ba34 <_vfiprintf_r+0x44>
 800bbf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbf8:	e71e      	b.n	800ba38 <_vfiprintf_r+0x48>
 800bbfa:	ab03      	add	r3, sp, #12
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4b05      	ldr	r3, [pc, #20]	@ (800bc18 <_vfiprintf_r+0x228>)
 800bc02:	a904      	add	r1, sp, #16
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7fc fed5 	bl	80089b4 <_printf_i>
 800bc0a:	e7e4      	b.n	800bbd6 <_vfiprintf_r+0x1e6>
 800bc0c:	0800c4f1 	.word	0x0800c4f1
 800bc10:	0800c4fb 	.word	0x0800c4fb
 800bc14:	08008485 	.word	0x08008485
 800bc18:	0800b9cb 	.word	0x0800b9cb
 800bc1c:	0800c4f7 	.word	0x0800c4f7

0800bc20 <__sflush_r>:
 800bc20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	0716      	lsls	r6, r2, #28
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	d454      	bmi.n	800bcda <__sflush_r+0xba>
 800bc30:	684b      	ldr	r3, [r1, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dc02      	bgt.n	800bc3c <__sflush_r+0x1c>
 800bc36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dd48      	ble.n	800bcce <__sflush_r+0xae>
 800bc3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	d045      	beq.n	800bcce <__sflush_r+0xae>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc48:	682f      	ldr	r7, [r5, #0]
 800bc4a:	6a21      	ldr	r1, [r4, #32]
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	d030      	beq.n	800bcb2 <__sflush_r+0x92>
 800bc50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	0759      	lsls	r1, r3, #29
 800bc56:	d505      	bpl.n	800bc64 <__sflush_r+0x44>
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc5e:	b10b      	cbz	r3, 800bc64 <__sflush_r+0x44>
 800bc60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc62:	1ad2      	subs	r2, r2, r3
 800bc64:	2300      	movs	r3, #0
 800bc66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc68:	6a21      	ldr	r1, [r4, #32]
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b0      	blx	r6
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	d106      	bne.n	800bc82 <__sflush_r+0x62>
 800bc74:	6829      	ldr	r1, [r5, #0]
 800bc76:	291d      	cmp	r1, #29
 800bc78:	d82b      	bhi.n	800bcd2 <__sflush_r+0xb2>
 800bc7a:	4a2a      	ldr	r2, [pc, #168]	@ (800bd24 <__sflush_r+0x104>)
 800bc7c:	410a      	asrs	r2, r1
 800bc7e:	07d6      	lsls	r6, r2, #31
 800bc80:	d427      	bmi.n	800bcd2 <__sflush_r+0xb2>
 800bc82:	2200      	movs	r2, #0
 800bc84:	6062      	str	r2, [r4, #4]
 800bc86:	04d9      	lsls	r1, r3, #19
 800bc88:	6922      	ldr	r2, [r4, #16]
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	d504      	bpl.n	800bc98 <__sflush_r+0x78>
 800bc8e:	1c42      	adds	r2, r0, #1
 800bc90:	d101      	bne.n	800bc96 <__sflush_r+0x76>
 800bc92:	682b      	ldr	r3, [r5, #0]
 800bc94:	b903      	cbnz	r3, 800bc98 <__sflush_r+0x78>
 800bc96:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc9a:	602f      	str	r7, [r5, #0]
 800bc9c:	b1b9      	cbz	r1, 800bcce <__sflush_r+0xae>
 800bc9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bca2:	4299      	cmp	r1, r3
 800bca4:	d002      	beq.n	800bcac <__sflush_r+0x8c>
 800bca6:	4628      	mov	r0, r5
 800bca8:	f7fe fb9a 	bl	800a3e0 <_free_r>
 800bcac:	2300      	movs	r3, #0
 800bcae:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcb0:	e00d      	b.n	800bcce <__sflush_r+0xae>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b0      	blx	r6
 800bcb8:	4602      	mov	r2, r0
 800bcba:	1c50      	adds	r0, r2, #1
 800bcbc:	d1c9      	bne.n	800bc52 <__sflush_r+0x32>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0c6      	beq.n	800bc52 <__sflush_r+0x32>
 800bcc4:	2b1d      	cmp	r3, #29
 800bcc6:	d001      	beq.n	800bccc <__sflush_r+0xac>
 800bcc8:	2b16      	cmp	r3, #22
 800bcca:	d11e      	bne.n	800bd0a <__sflush_r+0xea>
 800bccc:	602f      	str	r7, [r5, #0]
 800bcce:	2000      	movs	r0, #0
 800bcd0:	e022      	b.n	800bd18 <__sflush_r+0xf8>
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcd6:	b21b      	sxth	r3, r3
 800bcd8:	e01b      	b.n	800bd12 <__sflush_r+0xf2>
 800bcda:	690f      	ldr	r7, [r1, #16]
 800bcdc:	2f00      	cmp	r7, #0
 800bcde:	d0f6      	beq.n	800bcce <__sflush_r+0xae>
 800bce0:	0793      	lsls	r3, r2, #30
 800bce2:	680e      	ldr	r6, [r1, #0]
 800bce4:	bf08      	it	eq
 800bce6:	694b      	ldreq	r3, [r1, #20]
 800bce8:	600f      	str	r7, [r1, #0]
 800bcea:	bf18      	it	ne
 800bcec:	2300      	movne	r3, #0
 800bcee:	eba6 0807 	sub.w	r8, r6, r7
 800bcf2:	608b      	str	r3, [r1, #8]
 800bcf4:	f1b8 0f00 	cmp.w	r8, #0
 800bcf8:	dde9      	ble.n	800bcce <__sflush_r+0xae>
 800bcfa:	6a21      	ldr	r1, [r4, #32]
 800bcfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcfe:	4643      	mov	r3, r8
 800bd00:	463a      	mov	r2, r7
 800bd02:	4628      	mov	r0, r5
 800bd04:	47b0      	blx	r6
 800bd06:	2800      	cmp	r0, #0
 800bd08:	dc08      	bgt.n	800bd1c <__sflush_r+0xfc>
 800bd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	4407      	add	r7, r0
 800bd1e:	eba8 0800 	sub.w	r8, r8, r0
 800bd22:	e7e7      	b.n	800bcf4 <__sflush_r+0xd4>
 800bd24:	dfbffffe 	.word	0xdfbffffe

0800bd28 <_fflush_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	690b      	ldr	r3, [r1, #16]
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	460c      	mov	r4, r1
 800bd30:	b913      	cbnz	r3, 800bd38 <_fflush_r+0x10>
 800bd32:	2500      	movs	r5, #0
 800bd34:	4628      	mov	r0, r5
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	b118      	cbz	r0, 800bd42 <_fflush_r+0x1a>
 800bd3a:	6a03      	ldr	r3, [r0, #32]
 800bd3c:	b90b      	cbnz	r3, 800bd42 <_fflush_r+0x1a>
 800bd3e:	f7fd f9f9 	bl	8009134 <__sinit>
 800bd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0f3      	beq.n	800bd32 <_fflush_r+0xa>
 800bd4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd4c:	07d0      	lsls	r0, r2, #31
 800bd4e:	d404      	bmi.n	800bd5a <_fflush_r+0x32>
 800bd50:	0599      	lsls	r1, r3, #22
 800bd52:	d402      	bmi.n	800bd5a <_fflush_r+0x32>
 800bd54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd56:	f7fd fcd6 	bl	8009706 <__retarget_lock_acquire_recursive>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f7ff ff5f 	bl	800bc20 <__sflush_r>
 800bd62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd64:	07da      	lsls	r2, r3, #31
 800bd66:	4605      	mov	r5, r0
 800bd68:	d4e4      	bmi.n	800bd34 <_fflush_r+0xc>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	059b      	lsls	r3, r3, #22
 800bd6e:	d4e1      	bmi.n	800bd34 <_fflush_r+0xc>
 800bd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd72:	f7fd fcc9 	bl	8009708 <__retarget_lock_release_recursive>
 800bd76:	e7dd      	b.n	800bd34 <_fflush_r+0xc>

0800bd78 <__swhatbuf_r>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd80:	2900      	cmp	r1, #0
 800bd82:	b096      	sub	sp, #88	@ 0x58
 800bd84:	4615      	mov	r5, r2
 800bd86:	461e      	mov	r6, r3
 800bd88:	da0d      	bge.n	800bda6 <__swhatbuf_r+0x2e>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd90:	f04f 0100 	mov.w	r1, #0
 800bd94:	bf14      	ite	ne
 800bd96:	2340      	movne	r3, #64	@ 0x40
 800bd98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	6031      	str	r1, [r6, #0]
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	b016      	add	sp, #88	@ 0x58
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
 800bda6:	466a      	mov	r2, sp
 800bda8:	f000 f862 	bl	800be70 <_fstat_r>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	dbec      	blt.n	800bd8a <__swhatbuf_r+0x12>
 800bdb0:	9901      	ldr	r1, [sp, #4]
 800bdb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdba:	4259      	negs	r1, r3
 800bdbc:	4159      	adcs	r1, r3
 800bdbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdc2:	e7eb      	b.n	800bd9c <__swhatbuf_r+0x24>

0800bdc4 <__smakebuf_r>:
 800bdc4:	898b      	ldrh	r3, [r1, #12]
 800bdc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdc8:	079d      	lsls	r5, r3, #30
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460c      	mov	r4, r1
 800bdce:	d507      	bpl.n	800bde0 <__smakebuf_r+0x1c>
 800bdd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	2301      	movs	r3, #1
 800bdda:	6163      	str	r3, [r4, #20]
 800bddc:	b003      	add	sp, #12
 800bdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde0:	ab01      	add	r3, sp, #4
 800bde2:	466a      	mov	r2, sp
 800bde4:	f7ff ffc8 	bl	800bd78 <__swhatbuf_r>
 800bde8:	9f00      	ldr	r7, [sp, #0]
 800bdea:	4605      	mov	r5, r0
 800bdec:	4639      	mov	r1, r7
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f7fe fea4 	bl	800ab3c <_malloc_r>
 800bdf4:	b948      	cbnz	r0, 800be0a <__smakebuf_r+0x46>
 800bdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfa:	059a      	lsls	r2, r3, #22
 800bdfc:	d4ee      	bmi.n	800bddc <__smakebuf_r+0x18>
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	f043 0302 	orr.w	r3, r3, #2
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	e7e2      	b.n	800bdd0 <__smakebuf_r+0xc>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	6020      	str	r0, [r4, #0]
 800be0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be1a:	b15b      	cbz	r3, 800be34 <__smakebuf_r+0x70>
 800be1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f837 	bl	800be94 <_isatty_r>
 800be26:	b128      	cbz	r0, 800be34 <__smakebuf_r+0x70>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	431d      	orrs	r5, r3
 800be38:	81a5      	strh	r5, [r4, #12]
 800be3a:	e7cf      	b.n	800bddc <__smakebuf_r+0x18>

0800be3c <memmove>:
 800be3c:	4288      	cmp	r0, r1
 800be3e:	b510      	push	{r4, lr}
 800be40:	eb01 0402 	add.w	r4, r1, r2
 800be44:	d902      	bls.n	800be4c <memmove+0x10>
 800be46:	4284      	cmp	r4, r0
 800be48:	4623      	mov	r3, r4
 800be4a:	d807      	bhi.n	800be5c <memmove+0x20>
 800be4c:	1e43      	subs	r3, r0, #1
 800be4e:	42a1      	cmp	r1, r4
 800be50:	d008      	beq.n	800be64 <memmove+0x28>
 800be52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be5a:	e7f8      	b.n	800be4e <memmove+0x12>
 800be5c:	4402      	add	r2, r0
 800be5e:	4601      	mov	r1, r0
 800be60:	428a      	cmp	r2, r1
 800be62:	d100      	bne.n	800be66 <memmove+0x2a>
 800be64:	bd10      	pop	{r4, pc}
 800be66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be6e:	e7f7      	b.n	800be60 <memmove+0x24>

0800be70 <_fstat_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	@ (800be90 <_fstat_r+0x20>)
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	4611      	mov	r1, r2
 800be7c:	602b      	str	r3, [r5, #0]
 800be7e:	f7f6 f9f1 	bl	8002264 <_fstat>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	d102      	bne.n	800be8c <_fstat_r+0x1c>
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	b103      	cbz	r3, 800be8c <_fstat_r+0x1c>
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	bf00      	nop
 800be90:	200006a0 	.word	0x200006a0

0800be94 <_isatty_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d06      	ldr	r5, [pc, #24]	@ (800beb0 <_isatty_r+0x1c>)
 800be98:	2300      	movs	r3, #0
 800be9a:	4604      	mov	r4, r0
 800be9c:	4608      	mov	r0, r1
 800be9e:	602b      	str	r3, [r5, #0]
 800bea0:	f7f6 f9f0 	bl	8002284 <_isatty>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_isatty_r+0x1a>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_isatty_r+0x1a>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	200006a0 	.word	0x200006a0

0800beb4 <_sbrk_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d06      	ldr	r5, [pc, #24]	@ (800bed0 <_sbrk_r+0x1c>)
 800beb8:	2300      	movs	r3, #0
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f6 f9f8 	bl	80022b4 <_sbrk>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_sbrk_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_sbrk_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	200006a0 	.word	0x200006a0

0800bed4 <__assert_func>:
 800bed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bed6:	4614      	mov	r4, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <__assert_func+0x2c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4605      	mov	r5, r0
 800bee0:	68d8      	ldr	r0, [r3, #12]
 800bee2:	b954      	cbnz	r4, 800befa <__assert_func+0x26>
 800bee4:	4b07      	ldr	r3, [pc, #28]	@ (800bf04 <__assert_func+0x30>)
 800bee6:	461c      	mov	r4, r3
 800bee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beec:	9100      	str	r1, [sp, #0]
 800beee:	462b      	mov	r3, r5
 800bef0:	4905      	ldr	r1, [pc, #20]	@ (800bf08 <__assert_func+0x34>)
 800bef2:	f000 f84f 	bl	800bf94 <fiprintf>
 800bef6:	f000 f85f 	bl	800bfb8 <abort>
 800befa:	4b04      	ldr	r3, [pc, #16]	@ (800bf0c <__assert_func+0x38>)
 800befc:	e7f4      	b.n	800bee8 <__assert_func+0x14>
 800befe:	bf00      	nop
 800bf00:	20000190 	.word	0x20000190
 800bf04:	0800c53d 	.word	0x0800c53d
 800bf08:	0800c50f 	.word	0x0800c50f
 800bf0c:	0800c502 	.word	0x0800c502

0800bf10 <_calloc_r>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	fba1 5402 	umull	r5, r4, r1, r2
 800bf16:	b93c      	cbnz	r4, 800bf28 <_calloc_r+0x18>
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7fe fe0f 	bl	800ab3c <_malloc_r>
 800bf1e:	4606      	mov	r6, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <_calloc_r+0x1e>
 800bf22:	2600      	movs	r6, #0
 800bf24:	4630      	mov	r0, r6
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	220c      	movs	r2, #12
 800bf2a:	6002      	str	r2, [r0, #0]
 800bf2c:	e7f9      	b.n	800bf22 <_calloc_r+0x12>
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4621      	mov	r1, r4
 800bf32:	f7fd fb59 	bl	80095e8 <memset>
 800bf36:	e7f5      	b.n	800bf24 <_calloc_r+0x14>

0800bf38 <_realloc_r>:
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4615      	mov	r5, r2
 800bf40:	460c      	mov	r4, r1
 800bf42:	b921      	cbnz	r1, 800bf4e <_realloc_r+0x16>
 800bf44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf48:	4611      	mov	r1, r2
 800bf4a:	f7fe bdf7 	b.w	800ab3c <_malloc_r>
 800bf4e:	b92a      	cbnz	r2, 800bf5c <_realloc_r+0x24>
 800bf50:	f7fe fa46 	bl	800a3e0 <_free_r>
 800bf54:	2400      	movs	r4, #0
 800bf56:	4620      	mov	r0, r4
 800bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf5c:	f000 f833 	bl	800bfc6 <_malloc_usable_size_r>
 800bf60:	4285      	cmp	r5, r0
 800bf62:	4606      	mov	r6, r0
 800bf64:	d802      	bhi.n	800bf6c <_realloc_r+0x34>
 800bf66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf6a:	d8f4      	bhi.n	800bf56 <_realloc_r+0x1e>
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4640      	mov	r0, r8
 800bf70:	f7fe fde4 	bl	800ab3c <_malloc_r>
 800bf74:	4607      	mov	r7, r0
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d0ec      	beq.n	800bf54 <_realloc_r+0x1c>
 800bf7a:	42b5      	cmp	r5, r6
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4621      	mov	r1, r4
 800bf80:	bf28      	it	cs
 800bf82:	4632      	movcs	r2, r6
 800bf84:	f7fd fbc1 	bl	800970a <memcpy>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	f7fe fa28 	bl	800a3e0 <_free_r>
 800bf90:	463c      	mov	r4, r7
 800bf92:	e7e0      	b.n	800bf56 <_realloc_r+0x1e>

0800bf94 <fiprintf>:
 800bf94:	b40e      	push	{r1, r2, r3}
 800bf96:	b503      	push	{r0, r1, lr}
 800bf98:	4601      	mov	r1, r0
 800bf9a:	ab03      	add	r3, sp, #12
 800bf9c:	4805      	ldr	r0, [pc, #20]	@ (800bfb4 <fiprintf+0x20>)
 800bf9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa2:	6800      	ldr	r0, [r0, #0]
 800bfa4:	9301      	str	r3, [sp, #4]
 800bfa6:	f7ff fd23 	bl	800b9f0 <_vfiprintf_r>
 800bfaa:	b002      	add	sp, #8
 800bfac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfb0:	b003      	add	sp, #12
 800bfb2:	4770      	bx	lr
 800bfb4:	20000190 	.word	0x20000190

0800bfb8 <abort>:
 800bfb8:	b508      	push	{r3, lr}
 800bfba:	2006      	movs	r0, #6
 800bfbc:	f000 f834 	bl	800c028 <raise>
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	f7f6 f91b 	bl	80021fc <_exit>

0800bfc6 <_malloc_usable_size_r>:
 800bfc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfca:	1f18      	subs	r0, r3, #4
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bfbc      	itt	lt
 800bfd0:	580b      	ldrlt	r3, [r1, r0]
 800bfd2:	18c0      	addlt	r0, r0, r3
 800bfd4:	4770      	bx	lr

0800bfd6 <_raise_r>:
 800bfd6:	291f      	cmp	r1, #31
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4605      	mov	r5, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	d904      	bls.n	800bfea <_raise_r+0x14>
 800bfe0:	2316      	movs	r3, #22
 800bfe2:	6003      	str	r3, [r0, #0]
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfec:	b112      	cbz	r2, 800bff4 <_raise_r+0x1e>
 800bfee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bff2:	b94b      	cbnz	r3, 800c008 <_raise_r+0x32>
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 f831 	bl	800c05c <_getpid_r>
 800bffa:	4622      	mov	r2, r4
 800bffc:	4601      	mov	r1, r0
 800bffe:	4628      	mov	r0, r5
 800c000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c004:	f000 b818 	b.w	800c038 <_kill_r>
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d00a      	beq.n	800c022 <_raise_r+0x4c>
 800c00c:	1c59      	adds	r1, r3, #1
 800c00e:	d103      	bne.n	800c018 <_raise_r+0x42>
 800c010:	2316      	movs	r3, #22
 800c012:	6003      	str	r3, [r0, #0]
 800c014:	2001      	movs	r0, #1
 800c016:	e7e7      	b.n	800bfe8 <_raise_r+0x12>
 800c018:	2100      	movs	r1, #0
 800c01a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c01e:	4620      	mov	r0, r4
 800c020:	4798      	blx	r3
 800c022:	2000      	movs	r0, #0
 800c024:	e7e0      	b.n	800bfe8 <_raise_r+0x12>
	...

0800c028 <raise>:
 800c028:	4b02      	ldr	r3, [pc, #8]	@ (800c034 <raise+0xc>)
 800c02a:	4601      	mov	r1, r0
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	f7ff bfd2 	b.w	800bfd6 <_raise_r>
 800c032:	bf00      	nop
 800c034:	20000190 	.word	0x20000190

0800c038 <_kill_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d07      	ldr	r5, [pc, #28]	@ (800c058 <_kill_r+0x20>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	4611      	mov	r1, r2
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	f7f6 f8c9 	bl	80021dc <_kill>
 800c04a:	1c43      	adds	r3, r0, #1
 800c04c:	d102      	bne.n	800c054 <_kill_r+0x1c>
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	b103      	cbz	r3, 800c054 <_kill_r+0x1c>
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	bd38      	pop	{r3, r4, r5, pc}
 800c056:	bf00      	nop
 800c058:	200006a0 	.word	0x200006a0

0800c05c <_getpid_r>:
 800c05c:	f7f6 b8b6 	b.w	80021cc <_getpid>

0800c060 <_init>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	bf00      	nop
 800c064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c066:	bc08      	pop	{r3}
 800c068:	469e      	mov	lr, r3
 800c06a:	4770      	bx	lr

0800c06c <_fini>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr
